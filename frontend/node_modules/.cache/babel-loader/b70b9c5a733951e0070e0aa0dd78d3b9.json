{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\nvar _jsxFileName = \"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n/**\n * Shows an in-line error message in a given component context,\n * if the error object is not null\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _standardText = /*#__PURE__*/_classPrivateFieldLooseKey(\"standardText\");\n\nclass ContextErrorMessage extends Component {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperty(this, _standardText, {\n      writable: true,\n      value: 'This should not have happend. We are working on the problem!'\n    });\n  }\n\n  /** Renders the ContextErrorMessage if error object is not null  */\n  render() {\n    const {\n      classes,\n      error,\n      contextErrorMsg,\n      onReload\n    } = this.props;\n    return error !== null ? /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: _classPrivateFieldLooseBase(this, _standardText)[_standardText]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: contextErrorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.margins,\n        children: \"Error message (for debugging only) is:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), onReload ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.margins,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(AutorenewIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 72\n          }, this),\n          onClick: onReload,\n          children: \"Reload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this) : null;\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  margins: {\n    marginTop: theme.spacing(2)\n  }\n});\n/** PropTypes */\n\n\nContextErrorMessage.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** \n   * The error object, which drives the error message \n   * If not null, the error message is shown \n   */\n  error: PropTypes.object,\n\n  /**  A contextual error message to be shown */\n  contextErrorMsg: PropTypes.string,\n\n  /** \n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \n   * If given a reload button is shown \n   */\n  onReload: PropTypes.func\n};\nexport default withStyles(styles)(ContextErrorMessage);","map":{"version":3,"sources":["/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js"],"names":["React","Component","PropTypes","withStyles","Button","Alert","AlertTitle","AutorenewIcon","ContextErrorMessage","render","classes","error","contextErrorMsg","onReload","props","root","margins","message","styles","theme","marginTop","spacing","propTypes","object","isRequired","string","func"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AAEA;AACA;AACA;AACA;;;;;;AACA,MAAMC,mBAAN,SAAkCP,SAAlC,CAA4C;AAAA;AAAA;AAAA;AAAA;AAAA,aAC1B;AAD0B;AAAA;;AAG1C;AACAQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA,eAAlB;AAAmCC,MAAAA;AAAnC,QAAgD,KAAKC,KAA3D;AAEA,WACGH,KAAK,KAAK,IAAX,gBACE,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,OAAhB;AAAwB,MAAA,SAAS,EAAED,OAAO,CAACK,IAA3C;AAAA,8BACE;AAAA,8CACG,IADH;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AAAA,kBACGH;AADH;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAK,QAAA,SAAS,EAAEF,OAAO,CAACM,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAUE;AAAA,kBACGL,KAAK,CAACM;AADT;AAAA;AAAA;AAAA;AAAA,cAVF,EAcIJ,QAAQ,gBACN;AAAK,QAAA,SAAS,EAAEH,OAAO,CAACM,OAAxB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,KAAK,EAAC,SAAlC;AAA4C,UAAA,SAAS,eAAE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,kBAAvD;AAA0E,UAAA,OAAO,EAAEH,QAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADM,GAMJ,IApBR;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,GAwBI,IAzBN;AA2BD;;AAlCyC;AAqC5C;;;AACA,MAAMK,MAAM,GAAGC,KAAK,KAAK;AACvBH,EAAAA,OAAO,EAAE;AACPI,IAAAA,SAAS,EAAED,KAAK,CAACE,OAAN,CAAc,CAAd;AADJ;AADc,CAAL,CAApB;AAMA;;;AACAb,mBAAmB,CAACc,SAApB,GAAgC;AAC9B;AACAZ,EAAAA,OAAO,EAAER,SAAS,CAACqB,MAAV,CAAiBC,UAFI;;AAG9B;AACF;AACA;AACA;AACEb,EAAAA,KAAK,EAAET,SAAS,CAACqB,MAPa;;AAQ9B;AACAX,EAAAA,eAAe,EAAEV,SAAS,CAACuB,MATG;;AAU9B;AACF;AACA;AACA;AACEZ,EAAAA,QAAQ,EAAEX,SAAS,CAACwB;AAdU,CAAhC;AAiBA,eAAevB,UAAU,CAACe,MAAD,CAAV,CAAmBV,mBAAnB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\n/**\n * Shows an in-line error message in a given component context,\n * if the error object is not null\n */\nclass ContextErrorMessage extends Component {\n  #standardText = 'This should not have happend. We are working on the problem!';\n\n  /** Renders the ContextErrorMessage if error object is not null  */\n  render() {\n    const { classes, error, contextErrorMsg, onReload } = this.props;\n\n    return (\n      (error !== null) ?\n        <Alert severity='error' className={classes.root}>\n          <div>\n            {this.#standardText}\n          </div>\n          <AlertTitle>\n            {contextErrorMsg}\n          </AlertTitle>\n          <div className={classes.margins}>\n            Error message (for debugging only) is:\n        </div>\n          <div>\n            {error.message}\n          </div>\n          {\n            onReload ?\n              <div className={classes.margins}>\n                <Button variant='contained' color='primary' startIcon={<AutorenewIcon />} onClick={onReload}>\n                  Reload\n            </Button>\n              </div>\n              : null\n          }\n        </Alert>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  margins: {\n    marginTop: theme.spacing(2)\n  }\n});\n\n/** PropTypes */ \nContextErrorMessage.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** \n   * The error object, which drives the error message \n   * If not null, the error message is shown \n   */\n  error: PropTypes.object,\n  /**  A contextual error message to be shown */\n  contextErrorMsg: PropTypes.string,\n  /** \n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \n   * If given a reload button is shown \n   */\n  onReload: PropTypes.func\n}\n\nexport default withStyles(styles)(ContextErrorMessage);\n"]},"metadata":{},"sourceType":"module"}