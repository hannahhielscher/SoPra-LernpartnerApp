[{"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js":"1","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js":"2","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js":"3","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js":"4","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js":"5","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js":"6","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js":"7","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js":"8","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js":"9","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js":"10","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js":"11","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js":"12","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js":"13","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js":"14","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js":"15","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js":"16","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js":"17","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js":"18","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js":"19","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js":"20","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js":"21","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js":"22","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js":"23","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js":"24","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js":"25","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js":"26","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js":"27","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js":"28","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Nachricht.js":"29","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js":"30","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js":"31","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Profil.js":"32"},{"size":146,"mtime":1620807576504,"results":"33","hashOfConfig":"34"},{"size":5819,"mtime":1624218925957,"results":"35","hashOfConfig":"34"},{"size":1706,"mtime":1623434614996,"results":"36","hashOfConfig":"34"},{"size":579,"mtime":1624086408653,"results":"37","hashOfConfig":"34"},{"size":38284,"mtime":1624043753964,"results":"38","hashOfConfig":"34"},{"size":1589,"mtime":1624217966511,"results":"39","hashOfConfig":"34"},{"size":844,"mtime":1624215856548,"results":"40","hashOfConfig":"34"},{"size":1816,"mtime":1623433312638,"results":"41","hashOfConfig":"34"},{"size":862,"mtime":1622112082063,"results":"42","hashOfConfig":"34"},{"size":9939,"mtime":1624216586576,"results":"43","hashOfConfig":"34"},{"size":2113,"mtime":1622112193821,"results":"44","hashOfConfig":"34"},{"size":1253,"mtime":1623433111030,"results":"45","hashOfConfig":"34"},{"size":2597,"mtime":1623433111029,"results":"46","hashOfConfig":"34"},{"size":1348,"mtime":1623484557530,"results":"47","hashOfConfig":"34"},{"size":1078,"mtime":1622969157843,"results":"48","hashOfConfig":"34"},{"size":2140,"mtime":1623484846947,"results":"49","hashOfConfig":"34"},{"size":1315,"mtime":1623938783709,"results":"50","hashOfConfig":"34"},{"size":1040,"mtime":1624043753965,"results":"51","hashOfConfig":"34"},{"size":1003,"mtime":1623484557530,"results":"52","hashOfConfig":"34"},{"size":1228,"mtime":1624043821584,"results":"53","hashOfConfig":"34"},{"size":3271,"mtime":1622538283974,"results":"54","hashOfConfig":"34"},{"size":329,"mtime":1622114445485,"results":"55","hashOfConfig":"34"},{"size":761,"mtime":1621758115765,"results":"56","hashOfConfig":"34"},{"size":375,"mtime":1622112904258,"results":"57","hashOfConfig":"34"},{"size":5340,"mtime":1624043821584,"results":"58","hashOfConfig":"34"},{"size":2858,"mtime":1624218881801,"results":"59","hashOfConfig":"34"},{"size":4229,"mtime":1624025612198,"results":"60","hashOfConfig":"34"},{"size":2237,"mtime":1624216957712,"results":"61","hashOfConfig":"34"},{"size":7536,"mtime":1624218381891,"results":"62","hashOfConfig":"34"},{"size":4990,"mtime":1624218899302,"results":"63","hashOfConfig":"34"},{"size":5446,"mtime":1624044203458,"results":"64","hashOfConfig":"34"},{"size":5314,"mtime":1623482933335,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"cx8xr9",{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":8,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":5,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":1,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js",[],["139","140"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js",["141","142","143","144"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js",["145"],"import ProfilBO from './ProfilBO';\nimport PersonBO from './PersonBO';\nimport VorschlagBO from './VorschlagBO';\nimport LerngruppeBO from './LerngruppeBO';\nimport LernvorliebenBO from './LernvorliebenBO';\nimport NachrichtBO from './NachrichtBO';\nimport KonversationBO from './KonversationBO'\nimport TeilnahmeChatBO from './TeilnahmeChatBO';\nimport TeilnahmeGruppeBO from './TeilnahmeGruppeBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n */\nexport default class LernpartnerAPI {\n\n        // Singelton instance\n        static #api = null;\n\n        #lernappServerBaseURL = '/lernApp'\n        /** \n         * Get the Singelton instance \n         * \n         * @public\n         */\n        static getAPI() {\n          if (this.#api == null) {\n            this.#api = new LernpartnerAPI();\n          }\n          return this.#api;\n        }\n\n        #fetchAdvanced = (url, init) => fetch(url, init)\n          .then(res => {\n            // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n            if (!res.ok) {\n              throw Error(`${res.status} ${res.statusText}`);\n            }\n            return res.json();\n          }\n          )\n\n        //Person related\n        #getPersonenURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #addPersonURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #getPersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #updatePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #deletePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #searchPersonURL = (personName) => `${this.#lernappServerBaseURL}/personen-by-name/${personName}`;\n        #getPersonByGoogleIDURL = (google_user_id) => `${this.#lernappServerBaseURL}/personbygoogle/${google_user_id}`;\n        \n        //Gruppenbezogen\n        #getLerngruppenURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #addLerngruppeURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #getLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        #updateLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        #deleteLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        \n        //Profilbezogen\n        #getProfileURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #addProfilURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #getProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n        #updateProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n        //#getLernfaecherByProfilURL = (profilID) => `${this.#lernappServerBaseURL}/profil/${profilID}`;\n        #deleteProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n\n        //Lernvorliebenbezogen\n        #getLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        //#getLernvorliebenByProfilURL = () => `${this.#lernappServerBaseURL}/lervorlieben/${profilid}`;\n        #addLernvorliebenURL = () => `${this.#lernappServerBaseURL}/lernvorlieben`;\n        #updateLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        #deleteLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n\n        //Vorschlagbezogen\n        #getVorschlaegeURL = (mainpersonID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}`;\n        //#getSelectedLernfach = () => `${this.#lernappServerBaseURL}`\n        #getVorschlaegeByPersonByLernfachURL = (mainpersonID, lernfachID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}/${lernfachID}`;\n\n        //Nachrichtenbezogen\n        #getNachrichtenURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/konversation/${id}`;\n        #addNachrichtURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationByPersonURL = (konversationID, personID) => `${this.#lernappServerBaseURL}/nachricht-by-konversation-by-person/${konversationID}/${personID}`;\n        #deleteNachrichtURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/${id}`;\n        #deleteNachrichtenByKonversationURL = (konversationID) => `${this.#lernappServerBaseURL}/nachrichten/${konversationID}`;\n        #getNachrichtenByPersonURL = (personID) => `${this.#lernappServerBaseURL}/nachrichten/${personID}`;\n        #getNachrichtenByInhaltURL= (inhalt) => `${this.#lernappServerBaseURL}/nachrichten/${inhalt}`;\n        \n        //Konversationbezogen\n        #getKonversationenURL = () => `${this.#lernappServerBaseURL}/konversationen`;\n        #getKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #getKonversationenByPersonURL = (personid) => `${this.#lernappServerBaseURL}/konversationen/${personid}`;\n        #setKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #addKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #deleteKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #getKonversationByNameURL = (name) => `${this.#lernappServerBaseURL}/konversationen/${name}`;\n\n        //TeilnahmeChatbezogen\n        #getTeilnahmeChatURL = () => `${this.#lernappServerBaseURL}/teilnahmeChat`;\n        #getTeilnahmeChatByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #setTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #addTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #deleteTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #getTeilnahmeChatByStudentIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-student-id/${id}`;\n        #getTeilnahmeChatByKonversationIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-konversation-id/${id}`;\n\n        //TeilnahmeGruppebezogen\n        #getTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #addTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #getTeilnahmeGruppeByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\n\n        //Personenbezogene\n        /**\n           * Gibt alle Personen als BO zurück\n           * \n           * @public\n           */\n        getPersonen() {\n          return this.#fetchAdvanced(this.#getPersonenURL()).then((responseJSON) => {\n            let personenBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(customerBOs);\n            return new Promise(function (resolve) {\n              resolve(personenBOs);\n            })           \n          })\n        }\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addPerson(personBO) {\n          return this.#fetchAdvanced(this.#addPersonURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(personBO)\n          }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} personID to be retrieved\n         * @public\n         */\n        getPerson(personID) {\n          return this.#fetchAdvanced(this.#getPersonURL(personID)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(responsePersonBO);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Updated eine Person und gibt Promise zurück, resolves as PersonBO.\n         * \n         * @param {PersonBO} personBO to be updated\n         * @public\n         */\n        updatePerson(personBO) {\n          return this.#fetchAdvanced(this.#updatePersonURL(personBO.getID()), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(personBO)\n          }).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(PersonBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} google_user_id to be retrieved\n         * @public\n         */\n        getPersonByGoogleID(google_user_id) {\n          return this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(responsePersonBO);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n \n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        deletePerson(personID) {\n          return this.#fetchAdvanced(this.#deletePersonURL(personID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        searchPerson(personName) {\n          return this.#fetchAdvanced(this.#searchPersonURL(personName)).then((responseJSON) => {\n            let personBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(personBOs);\n            })\n          })\n        }\n        //Lerngruppenbezogene\n        /**\n           * Gibt alle Lerngruppen als BO zurück\n           * \n           * @public\n           */\n          getLerngruppen() {\n            return this.#fetchAdvanced(this.#getLerngruppenURL()).then((responseJSON) => {\n              let lerngruppenBOs = LerngruppeBO.fromJSON(responseJSON);\n              // console.info(customerBOs);\n              return new Promise(function (resolve) {\n                resolve(lerngruppenBOs);\n              })           \n            })\n          }\n          /**\n           * Adds a lerngruppe and returns a Promise, which resolves to a new LerngruppeBO object\n           *  \n           * @param {LerngruppeBO} lerngruppeBO to be added. The ID of the new lerngruppe is set by the backend\n           * @public\n           */\n          addLerngruppe(lerngruppeBO) {\n            return this.#fetchAdvanced(this.#addLerngruppeURL(), {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              },\n              body: JSON.stringify(lerngruppeBO)\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON, but only need one object\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n  \n          /**\n           * Gibt eine Lerngruppe mit einer bestimmten ID als BO zurück\n           * \n           * @param {Number} lerngruppeID to be retrieved\n           * @public\n           */\n          getLerngruppe(lerngruppeID) {\n            return this.#fetchAdvanced(this.#getLerngruppeURL(lerngruppeID)).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON, but only need one object\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(responseLerngruppeBO);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n  \n          /**\n           * Updated eine Lerngruppe und gibt Promise zurück, resolves as LerngruppeBO.\n           * \n           * @param {LerngruppeBO} lerngruppeBO to be updated\n           * @public\n           */\n          updateLerngruppe(lerngruppeBO) {\n            return this.#fetchAdvanced(this.#updateLerngruppeURL(lerngruppeBO.getID()), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              },\n              body: JSON.stringify(lerngruppeBO)\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n   \n          /**\n           * Gibt Promise zurück\n           * \n           * @param {Number} lerngruppeID to be deleted\n           * @public\n           */\n          deleteLerngruppe(lerngruppeID) {\n            return this.#fetchAdvanced(this.#deleteLerngruppeURL(lerngruppeID), {\n              method: 'DELETE'\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n\n\n        //Profilbezogene\n        /**\n           * Gibt alle Profile als BO zurück\n           * \n           * @public\n           */\n          getProfile() {\n            return this.#fetchAdvanced(this.#getProfileURL()).then((responseJSON) => {\n              let profileBOs = ProfilBO.fromJSON(responseJSON);\n              // console.info(profilBOs);\n              return new Promise(function (resolve) {\n                resolve(profileBOs);\n              })           \n            })\n          }\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addProfil(profilBO) {\n          return this.#fetchAdvanced(this.#addProfilURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(profilBO)\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON, but only need one object\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n        /**\n         * Gibt ein Profil-Objekt zurück\n         * @param {Number} profilID to be retrieved\n         * @public\n          */\n         getProfil(profilID) {\n          return this.#fetchAdvanced(this.#getProfilURL(profilID,{method: 'GET'})).then((responseJSON) => {\n            let profilBOs = ProfilBO.fromJSON(responseJSON);\n            //console.info(ProfilBOs)\n            return new Promise(function (resolve) {\n              resolve(profilBOs);\n            })\n          })\n        }\n\n        /**\n         * Updated ein Profil und gibt Promise zurück, resolves as ProfilBO.\n         * \n         * @param {ProfilBO} profilBO to be updated\n         * @public\n         */\n        updateProfil(profilBO) {\n          return this.#fetchAdvanced(this.#updateProfilURL(profilBO.getID()), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(profilBO)\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(ProfilBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} profilID to be deleted\n         * @public\n         */\n        deleteProfil(profilID) {\n          return this.#fetchAdvanced(this.#deleteProfilURL(profilID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(profilBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n\n        //Lernvorliebenbezogene\n\n        /**\n         * Gibt eine Lernvorliebe mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} lernvorliebenID to be retrieved\n         * @public\n         */\n        getLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#getLernvorliebenURL(lernvorliebenID)).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(responseLernvorliebenBO);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n        /**\n         * Adds a lernvorlieben and returns a Promise, which resolves to a new LernvorliebenBO object\n         *  \n         * @param {LernvorliebenBO} lernvorliebenBO to be added. The ID of the new lernvorliebe is set by the backend\n         * @public\n         */\n        addLernvorlieben(lernvorliebenBO) {\n          return this.#fetchAdvanced(this.#addLernvorliebenURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(lernvorliebenBO)\n          }).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(LernvorliebenBOs);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} lernvorliebenID to be deleted\n         * @public\n         */\n        deleteLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#deleteLernvorliebenURL(lernvorliebenID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(LernvorliebenBOs);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n\n        //Vorschlagbezogene\n        /**\n         * Gibt alle Vorschlaege zurück\n         * @param {Number} mainpersonID to be retrieved\n         * @param {Number} lernfachID to be retrieved\n         * @public\n          */\n        getVorschlaegeByPersonByLernfach(mainpersonID, lernfachID) {\n          return this.#fetchAdvanced(this.#getVorschlaegeByPersonByLernfachURL(mainpersonID, lernfachID, {method: 'GET'})).then((responseJSON) => {\n            let vorschlaegeBOs = VorschlagBO.fromJSON(responseJSON);\n            //console.info(vorschlaegeBOs)\n            return new Promise(function (resolve) {\n              resolve(vorschlaegeBOs);\n            })\n          })\n        }\n\n      \n        //Nachrichtbezogene\n        /** \n        * Gibt alle Nachrichten einer Person zurück\n         * @param {Number} personID to be retrieved\n         * @public\n          */\n\n        getNachrichten(personID) {\n          return this.#fetchAdvanced(this.#getNachrichtenByPersonURL(personID,{method: 'GET'})).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            //console.info(nachrichtenBOs)\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })\n          })\n        }\n\n       /**\n         * Adds a Nachricht and returns a Promise, which resolves to a new NachrichtenBO object\n         *  \n         * @param {NachrichtBO} nachrichtBO to be added. The ID of the new nachricht is set by the backend\n         * @public\n         */\n\n        addNachricht(nachrichtBO) {\n          return this.#fetchAdvanced(this.#addNachrichtURL(), {\n          method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(nachrichtBO)\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtBOs.fromJSON, but only need one object\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /**\n           * Gibt alle Nachrichten als BO zurück\n           * \n           * @public\n           */\n\n        getNachrichten() {\n          return this.#fetchAdvanced(this.#getNachrichtenURL()).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\n         * @param {Number} konversationID to be retrieved\n         * @public\n          */\n    \n        getNachrichtenByKonversation(konversationID){\n\t\t      return this.#fetchAdvanced(this.#getNachrichtenByKonversationURL(konversationID)).then((responseJSON) => {\n\t\t\t      let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n\t\t\t      //console.info(nachrichtenBOs)\n\t\t\t      return new Promise(function (resolve){\n\t\t\t  \t    resolve(nachrichtenBOs)\n\t\t\t      })\n\t\t      })\n\t      }\n\n\n          /**\n         * Gibt Promise zurück, Löscht Nachricht mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n\n\n        deleteNachricht(id) {\n          return this.#fetchAdvanced(this.#deleteNachrichtURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtenBOs.fromJSON\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /** \n         * gibt die Nachrichten mit der bestimmten konversationsID und PersonID als BO zurück\n         * @param {Number} konversationId to be retrieved\n         * @param {Number} personID \n         * @public\n         */\n    \n          getNachrichtenByKonversationByPerson(konversationID, personID) {\n            return this.#fetchAdvanced(this.#getNachrichtenByKonversationByPersonURL(konversationID, personID, {method: 'GET'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              //console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n \n          /** \n           * löscht Nachrichten einer konversation\n           * @param {Number} konversationId to be retrieved\n           * @param {Number} personID \n           * @public\n           */\n      \n          deleteNachrichtenByKonversation(konversationID) {\n            return this.#fetchAdvanced(this.#deleteNachrichtenByKonversationURL(konversationID, {method: 'DELETE'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              //console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n\n           /** \n          * gibt die Nachrichten mit dem bestimmten Inhalt als BO zurück\n          * @param {String} inhalt to be retrieved\n          * @public\n          */\n    \n        getNachrichtByInhalt(inhalt){\n          return this.#fetchAdvanced(this.#getNachrichtenByInhaltURL(inhalt)).then((responseJSON) => {\n          let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n          console.info(nachrichtenBOs)\n          return new Promise(function (resolve){\n            resolve(nachrichtenBOs)\n             })\n           })\n          }\n\n          //Konversations bezogen\n\n           /**\n           * Gibt alle Konversationen als BO zurück\n           * \n           * @public\n           */\n\n        getKonversationen() {\n          return this.#fetchAdvanced(this.#getKonversationenURL()).then((responseJSON) => {\n            let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(konversationenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Konversation mit der bestimmten ID als BO zurück\n         * @param {Number} id to be retrieved\n         * @public\n          */\n    \n          getKonversation(id){\n            return this.#fetchAdvanced(this.#getKonversationURL(id)).then((responseJSON) => {\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n              //console.info(konversationenBOs)\n              return new Promise(function (resolve){\n                resolve(konversationenBOs)\n              })\n            })\n          }\n\n           /**\n           * Gibt alle Konversationen einer Person als BO zurück\n           * @param {Number} personid to be retrieved\n           * @public\n           */\n\n          getKonversationenByPerson(personid) {\n            return this.#fetchAdvanced(this.#getKonversationenByPersonURL(personid)).then((responseJSON) => {\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n              return new Promise(function (resolve) {\n                resolve(konversationenBOs);\n              })           \n            })\n          }\n          /** \n          * Adds a KOnversation and returns a Promise, which resolves to a new KonversationBO object\n          *  \n          * @param {KonversationBO} konversationBO to be added. The ID of the new nachricht is set by the backend\n          * @public\n          */\n \n         addKonversation(konversationBO) {\n           return this.#fetchAdvanced(this.#addKonversationURL(), {\n           method: 'POST',\n             headers: {\n               'Accept': 'application/json, text/plain',\n               'Content-type': 'application/json',\n             },\n             body: JSON.stringify(konversationBO)\n           }).then((responseJSON) => {\n             // We always get an array of NachrichtBOs.fromJSON, but only need one object\n             let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\n             // console.info(KonversationBOs);\n             return new Promise(function (resolve) {\n               resolve(responseKonversationBO);\n             })\n           })\n         }\n\n          /**\n         * Gibt Promise zurück, Löscht Konversation mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n\n\n        deleteKonversation(id) {\n          return this.#fetchAdvanced(this.#deleteKonversationURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of KonversationBOs.fromJSON\n            let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\n            // console.info(KonversationBOs);\n            return new Promise(function (resolve) {\n              resolve(responseKonversationBO);\n            })\n          })\n        }\n\n         /**\n         * Gibt Promise zurück, Löscht Nachricht mit bestimmter ID\n         * \n         * @param {String} name to be retrived \n         * @public\n         */\n\n\n          getKonversationByName(name){\n            return this.#fetchAdvanced(this.#getKonversationByNameURL(name)).then((responseJSON) => {\n            let konversationBOs = KonversationBO.fromJSON(responseJSON);\n            console.info(konversationBOs)\n            return new Promise(function (resolve){\n              resolve(konversationBOs)\n               })\n             })\n            }\n\n          //setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\n\t        setKonversation(id) { \n\t\t      //immer Zustand 1 holen\n\t\t        return this.#fetchAdvanced(this.#setKonversationURL(id),{method: 'PUT'}).then((responseJSON) => {\n\t\t\t      let konversationBOs = KonversationBO.fromJSON(responseJSON);\n\t\t\t      console.info(konversationBOs)\n\t\t\t      return new Promise(function (resolve){\n\t\t\t      \tresolve(konversationBOs);\n\t\t           \t})\n\t        \t  })\n          \t}\n\n             //Teilnahme Chat bezogene\n\n          /**\n           * Gibt alle Teilnahmen eines Chats als BO zurück\n           * \n           * @public\n           */\n\n           getTeilnahmeChat() {\n            return this.#fetchAdvanced(this.#getTeilnahmeChatURL()).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmechatBOs);\n               })           \n              })\n            }\n\n          /** \n           * gibt die Teilnehmer mit der bestimmten ID als BO zurück\n           * @param {Number} id to be retrieved\n           * @public\n          */\n  \n          getTeilnahmeChatById(id){\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByIdURL(id)).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            //console.info(teilnahmechatBOs)\n            return new Promise(function (resolve){\n              resolve(teilnahmechatBOs)\n               })\n             })\n            }\n\n            /**\n             * setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\n             * \n             * @param {Number} id to be deleted\n             * @public\n             */\n\n             setTeilnahmeChat(id) { \n             //immer Zustand 1 holen\n               return this.#fetchAdvanced(this.#setTeilnahmeChatURL(id),{method: 'PUT'}).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n               console.info(teilnahmechatBOs)\n               return new Promise(function (resolve){\n                 resolve(teilnahmechatBOs);\n                 })\n                })\n              }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeChatBO object\n             *  \n             * @param {TeilnahmeChatBO} teilnahmechatBO to be added. The ID of the new teilnahemChat is set by the backend\n             * @public\n            */\n\n            addTeilnahmeChat(teilnahmechatBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeChatURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmechatBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeChatBOs.fromJSON, but only need one object\n               let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\n               // console.info(TeilnahmeChatBOs);\n                 return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeChatBO);\n                     })\n                   })\n               }\n\n             /** \n             * löscht Nachrichten einer konversation\n             * @param {Number} id to be retrieved\n             * @public\n             */\n    \n            deleteTeilnahmeChat(id) {\n              return this.#fetchAdvanced(this.#deleteTeilnahmeChatURL(id), {\n                method: 'DELETE'\n                }).then((responseJSON) => {\n                // We always get an array of TeilnahmeChatBOs.fromJSON\n                let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\n                // console.info(KonversationBOs);\n                return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeChatBO);\n                })\n              })\n            }\n\n             /** \n              * Gibt alle TeilnahmenChat einer Person zurück\n              * @param {Number} personid to be retrieved\n              * @public\n              */\n\n              getTeilnahmeChatByStudentId(personid) {\n                return this.#fetchAdvanced(this.#getTeilnahmeChatByStudentIdURL(personid,{method: 'GET'})).then((responseJSON) => {\n                let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n                //console.info(teilnahmechatBOs)\n                return new Promise(function (resolve) {\n                  resolve(teilnahmechatBOs);\n                  })\n                })\n              }\n              \n             /** \n              * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\n              * @param {Number} id to be retrieved\n              * @public\n             */\n  \n            getTeilnahmeChatByKonversationId(id){\n               return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationIdURL(id)).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n              //console.info(teilnahmechatBOs)\n              return new Promise(function (resolve){\n               resolve(teilnahmechatBOs)\n                })\n              })\n             }\n\n            //Teilnahme Gruppe bezogen\n\n            /**\n           * Gibt alle Teilnahmen einer Gruppe als BO zurück\n           * \n           * @public\n           */\n\n           getTeilnahmeGruppe() {\n            return this.#fetchAdvanced(this.#getTeilnahmeGruppeURL()).then((responseJSON) => {\n            let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmegruppeBOs);\n               })           \n              })\n            }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeGruppeBO object\n             *  \n             * @param {TeilnahmeGruppeBO} teilnahmegruppeBO to be added. The ID of the new teilnahemgruppe is set by the backend\n             * @public\n            */\n\n             addTeilnahmeGruppe(teilnahmegruppeBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeGruppeURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmegruppeBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeGruppeBOs.fromJSON, but only need one object\n               let responseTeilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\n               // console.info(TeilnahmeGruppeBOs);\n                 return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeGruppeBO);\n                     })\n                   })\n               }\n\n              /** \n               * gibt die Teilnehmer mit der bestimmten ID als BO zurück\n               * @param {Number} id to be retrieved\n               * @public\n              */\n  \n              getTeilnahmeGruppeById(id){\n                return this.#fetchAdvanced(this.#getTeilnahmeGruppeByIdURL(id)).then((responseJSON) => {\n                let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n                //console.info(teilnahmegruppeBOs)\n                return new Promise(function (resolve){\n                 resolve(teilnahmegruppeBOs)\n                  })\n                })\n              }\n\n\n\n\n\n\n\n\n\n}","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js",["146"],"import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n */\n\n\nfunction About() {\n\n    const classes = useStyles();\n  \n    return (\n      <Paper elevation={0} className={classes.root}>\n        <div className={classes.content}>\n          <Typography variant='h6'>\n            App zum Auffinden von Lernpartnern\n          </Typography>\n          <Typography variant='body2'>\n            © Hochschule der Medien 2020, all rights reserved.\n          </Typography>\n        </div>\n      </Paper>\n    )\n  }\n  \n  export default About;","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js",["147","148","149"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass RegistrierungForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Init the state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            firstName: null,\n            firstNameValidationFailed: false,\n            firstNameEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n            \n        };\n        // save this state for canceling\n        this.baseState = this.state;\n        }\n    \n\n    /** Adds the customer */\n    registrieren = () => {\n        let person = this.props.person;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator \n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t \n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n      this.setState(this.baseState);\n      this.props.onClose(null);\n  }\n\n  handleChange(change, event) {\n    var toChange = this.state.form;\n    toChange[change] = event.target.value;\n    this.setState({form: toChange});\n  }\n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, person } = this.props;\n        const { name, nameValidationFailed, firstName, firstNameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\n          updatingInProgress, updatingError} = this.state;\n    \n        let title = 'Registriere dich jetzt!';\n        let header = 'Bitte gib deine Daten ein:';\n    \n        return (\n            <Dialog>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='firstName' label='Vorname:' value={firstName} \n                    onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                    helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n                  \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \n                    onChange={this.textFieldValueChange} error={semesterValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \n                    \n                  <FormControl className={classes.formControl} value = {studiengang}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select required onChange={this.handleChange} error={studiengangValidationFailed}>\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\n                            </Select>\n                   </FormControl>\n                   \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \n                    onChange={this.textFieldValueChange} error={alterValidationFailed} \n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \n                  \n                  <FormControl className={classes.formControl} value = {lerngruppe}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required onChange={this.handleChange} error={lerngruppeValidationFailed}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`DU konntest leider nicht registriert werden :/`}\n                      onReload={this.registrieren} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || firstNameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={this.registrieren} color='primary'>\n                          Jetzt registrieren\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n        \n        );\n      }\n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nRegistrierungForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n  onClose: PropTypes.func.isRequired,\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(RegistrierungForm));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js",["150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\n//import Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport {LernpartnerAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ProfilBO from '../api/ProfilBO';\n\nclass MeinProfil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            profil: null,\n            gruppe: false,\n            personVorname: null,\n            personName: null,\n            personSemester: 0,\n            personStudiengang: null,\n            lerngruppe: false,\n            personProfilID: null,\n            personLernfaecher: null,\n            personLernvorliebenID: null,\n            loadingInProgress: false,\n            loadingError: null\n        };\n    }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getPerson();\n  }\n\n/**   showVorschlagButtonClick = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showVorschlag: true\n      });\n    }**/\n\n\n\n\n    // API Anbindung um Profil vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.person.getgoogle_user_id)\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n     getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(personProfilID).then(profilBO =>\n      this.setState({\n            profil: profilBOs,\n            profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          profilLernfaecher: null,\n          profilLernvorliebenID: false,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n     getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(personLernvorliebenID).then(lernvorliebenBO =>\n      this.setState({\n            profil: profilBOs,\n            profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorlieben: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          profilLernfaecher: null,\n          profilLernvorlieben: false,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n   /** Renders the component */\n    render() {\n      const { classes } = this.props;\n      // Use the states customer\n      const { personProfil, personName, personVorname, personSemester, personStudiengang, personLernfaecher, personLernvorlieben, loadingInProgress, error} = this.state;\n\n      // console.log(this.props);\n      return (\n        <div className={classes.root}>\n        <Button color=\"primary\" onClick= {this.showVorschlagButtonClick}>Mein Profil bearbeiten</Button>\n        <Typography variant='body1' color={'textSecondary'}>\n\n                              <b>Semester: </b> {personSemester} <br />\n                              <b>Studiengang: </b>{personStudiengang}<br />\n                              <b>Lernfächer: </b>{personLernfaecher}<br />\n                              <b>Lernvorlieben: </b>{personLernvorlieben}<br />\n\n        </Typography>\n        </div>\n      );\n    }\n}\n\n  const styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n\n/** PropTypes */\nProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  person: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(MeinProfil);\n\n","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js",["176","177","178","179","180","181","182","183"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js",["184","185","186","187"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, Grid } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport KonversationListeEintrag from './KonversationListeEintrag';\n\n/**\n * Es werden alle Konversationen des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [KonversationListeEintrag]](#konversationlisteeintrag)\n * \n * Hierfür werden alle Konversationen des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\nclass KonversationListe extends Component {\n    constructor(props){\n        super(props);\n\n        // console.log(props);\n        let expandedID = null;\n\n        if (this.props.location.expandKonversation) {\n        expandedID = this.props.location.expandKonversation.getID();\n        }\n\n        // initiiere einen leeren state\n        this.state = {\n            konversationen : [],\n            error: null,\n            loadingInProgress: false, \n            //expandedKonversationID: expandedID,\n        };\n\n      }\n\n      // API Anbindung um Vorschläge des Students vom Backend zu bekommen \n    getKonversationen = () => {\n      LernpartnerAPI.getAPI().getKonversationenByPerson(this.props.currentPerson.getid())\n      .then(konversationenBOs =>\n          this.setState({\n              konversationen: konversationenBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  konversationen: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingKonversationenError: null\n      });\n    }\n    \n\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getKonversationen();\n  this.setState({\n      currentStudentName: this.props.currentPerson.getname(),\n        })\n}\n\n /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {konversation} KonversationBO of the KonversationListeEintrag to be toggeled\n     \n  onExpandedStateChange = konversation => {\n    // console.log(konversationID);\n    // Set expandend Konversation Eintrag to null by default\n    let newID = null;\n\n    // If same konversation entry is clicked, collapse it else expand a new one\n    if (konversation.getID() !== this.state.expandedKonversationID) {\n    // Expand the konservation entry with konversationID\n    newID = konversation.getID();\n    }\n    // console.log(newID);\n    this.setState({\n    expandedKonversastionID: newID,\n    });\n}\n*/\n\nrender() {\n  const { classes, currentPerson } = this.props;\n        const { konversationen, error, loadingInProgress}  = this.state; \n\n        return(\n          <div className={classes.root}>\n\n            { \n              // Show the list of KonversationListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              konversationen.map(konversation =>\n                <KonversationListeEintrag key={konversation.getID()} konversation={konversation}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Chats nicht geladen werden!`} onReload={this.getKonversationen} />\n          </div>\n\n        );\n\n      }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nKonversationListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(KonversationListe));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js",["188"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport Nachricht from './Nachricht';\n\n/** \n * \n * Es wird ein einzelne Konversationen von einer Person dargestellt\n * \n * Hierfür wird der Name der Konversation angezeigt\n * \n */\n\nclass KonversationListeEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            konversation: null,\n            showKonversation: false,\n            showProfil: false,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n\n    \n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getKonversation();\n}\n\n//Handles the onClick event of the show Konversation button\nshowKonversationButtonClicked = (event) => {\n  event.stopPropagation();\n  this.setState({\n    showKonversation: true\n  });\n}\n\nrender() {\n  const { classes } = this.props;\n  const { konversation } = this.state;\n\n  return(\n    <div>\n      <Grid container spacing={1} justify='flex-start' alignItems='center'>\n            <Grid item>\n              <Typography variant='body1' className={classes.heading}>{konversation.getname()}\n                </Typography>\n            </Grid>  \n            <Grid item>\n              <ButtonGroup variant='text' size='small'>\n                <Button color='primary' onClick={this.showKonversationButtonClicked}>\n                    Konversation ansehen\n                </Button>\n              </ButtonGroup>\n            </Grid>\n      </Grid>\n      <Nachricht show={showKonversation} konversationid = {konversation.getid()}/> \n    </div>\n  )\n\n}\n  \n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nKonversationListeEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\n\n\nexport default withStyles(styles)(KonversationListeEintrag);","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Nachricht.js",["189"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography, Paper, CardActions } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport NachrichtenListeEintrag from './NachrichtenListeEintrag';\nimport Divider from \"@material-ui/core/Divider\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\n\n\n/**\n * Es werden alle Nachrichten des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [NachrichtenListeEintrag]](#nachrichtenlisteeintrag)\n * \n * Hierfür werden alle Nachrichten des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\n\nclass Nachricht extends Component {\n\n  constructor(props) {\n    super(props);\n\n   // console.log(props);\n   let expandedID = null;\n\n   if (this.props.location.expandCustomer) {\n     expandedID = this.props.location.expandCustomer.getID();\n   }\n\n   // Init an empty state\n   this.state = {\n     nachrichten: '',\n     inhalt: null,\n     personID: null, \n     konversation_id: null, \n     error: null,\n     loadingInProgress: false,\n     expandedNachrichtID: expandedID,\n   };\n }\n\n //Öffnet das Dialog-Fenster Nachrichtfrom, wenn der Button geklickt wurde\n addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showModulForm: true\n    });\n  }\n \n // API Anbindung um alle Nachrichten vom Backend zu bekommen \n getNachrichten= () => {\n  LernpartnerAPI.getAPI()\n    .getNachrichten(this.props.personID.getID(), this.props.konversation_id.getID())\n    .then((nachrichtenBOs) =>\n      this.setState({\n        nachrichten: nachrichten,\n        loadingInProgress: false,\n        loadingError: null,\n      })\n    )\n    .catch((e) =>\n      this.setState({\n        nachrichten: null,\n        loadingInProgress: false,\n        loadingError: e,\n      })\n    );\n  this.setState({\n    loadingInProgress: true,\n    loadingError: null,\n  });\n};\n\naddNachricht = () => {\n    let newNachricht = new NachrichtBO(\n      this.state.inhalt,\n      this.props.personID.getID(),\n      this.props.konversation_id.getID()\n    );\n    LernpartnerAPI.getAPI()\n      .addNachricht(newNachricht)\n      .then((nachricht) => {\n        this.state.nachricht.push(nachricht);\n        this.setState({ inhalt: \"\" });\n        // Backend call sucessfull\n        // reinit the dialogs state for a new empty nachricht\n      })\n      .catch((e) =>\n        this.setState({\n          updatingInProgress: false, // disable loading indicator\n          updatingError: e, // show error message\n        })\n      );\n\n        \n\nthis.setState({\n    loadingInProgress: true,\n    error: null\n  });\n}\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getNachrichten();\n}\n\n//Wird aufgerufen, wenn das Dialog-Fenster Nachrichtform geschlossen wird\nnachrichtFormClosed = modul => {\n    this.getNachrichten();\n    if (nachricht) {\n      const newNachricht = [...this.state.nachrichten, nachricht];\n      this.setState({\n        nachrichten: newNachricht,\n        filteredNachrichten: [...newNachricht],\n        showNachrichtForm: false\n      });\n    } else {\n      this.setState({\n        showNachrichtForm: false\n      });\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({ content: e.target.value });\n  };\n\n  handleClose = () => {\n    this.props.onClose();\n  };\n\n  //nachrichtDeleted = nachricht => {\n   // const newNachricht = this.state.nachrichten.filter(nachrichtFromState => nachrichtFromState.getID() !== nachricht.getID());\n   // this.setState({\n     // nachrichten: newNachricht,\n     // filteredNachrichten: [...newNachricht],\n     // showNachrichtenForm: false\n  //  });}\n\n // Rendert die Componente \n    render() {\n      const { classes, personID, konversation_id } = this.props;\n      const { nachrichten, inhalt, personID, konversation_id, loadingInProgress, error, expandedNachrichtID } = this.state;\n      if (nachrichten) {\n        nachrichten.sort((a, b) => {\n          return a.getID() - b.getID();\n        });\n      }\n  \n      return (\n        <div>\n          <h1 class=\"Chatname\">\n            {konversation_id.getName() + \" \" + konversation_id.getVorname()}\n          </h1>\n          {nachrichten\n            ? nachrichten.map((nachricht) => {\n                {\n                  if (nachricht.getPersonID() != personID.getID()) {\n                    return (\n                      <div id=\"empfänger_text\">\n                        <Grid item\n                          xs\n                          className={classes.outerColumn}\n                          style={{ display: \"flex\", alignItems: \"center\", position: \"rigth\" }}\n                        >\n                          <Typography>{nachricht.getInhalt()}</Typography>\n                        </Grid>\n                        <Divider />\n                      </div>\n                    );\n                  } \n                  \n                  else {\n                    return (\n                      <div id=\"sender_text\">\n                        <Grid\n                          item\n                          className={classes.outerColumn}\n                          container\n                          direction=\"row\"\n                          alignItems=\"center\"\n                          justify=\"flex-end\"\n                          position= \"left\"\n                        >\n                          <Typography>{nachricht.getInhalt()}</Typography>\n                        </Grid>\n                        <Divider />\n                      </div>\n                    );\n                  }\n                }\n              })\n            : null}\n  \n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"standard-basic\"\n              label=\"schreibe eine Nachricht\"\n              value={inhalt}\n              onChange={this.handleChange}\n            />\n          </form>\n          <Button className={classes.button_style} variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>\n          <ArrowBackIcon/>\n          </Button>\n          <Button color=\"primary\" variant=\"contained\" onClick={this.addNachricht}>\n            senden \n          </Button>\n\n      <LoadingProgress show={loadingInProgress} />\n      <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Nachrichten nicht geladen werden!`} onReload={this.getNachrichten} />\n      \n      </div>\n    );\n\n}}\n\nconst styles = (theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100ch\",\n    },\n  },\n  outerColumn: {\n    margin: 5,\n    padding: 5,\n    height: 50,\n  },\n  button_style: {\n    margin: 5,\n    padding: 5,\n  }\n});\n\n/** PropTypes */\nNachricht.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n  \n\nexport default withStyles(styles)(Nachricht);","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js",["190","191","192","193","194","195","196"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js",["197","198","199"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Profil.js",["200"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport {LernpartnerAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport ProfilBO from '../api/ProfilBO';\nimport PersonBO from '..api/PersonBO';\n\nclass Profil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            profil: null,\n            gruppe: false,\n            personVorname = null,\n            personName = null,\n            personSemester = 0,\n            personStudiengang = null,\n            lerngruppe = false\n            personProfilID = None,\n            personLernfaecher = null,\n            personLernvorliebenID = null\n            loadingInProgress: false,\n            loadingError: null,\n        };\n    }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getPerson();\n  }\n\n/**   showVorschlagButtonClick = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showVorschlag: true\n      });\n    }**/\n\n\n\n\n    // API Anbindung um Profil vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n     getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(personProfilID).then(profilBO =>\n      this.setState({\n            profil: profilBOs,\n            profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          profilLernfaecher: null,\n          profilLernvorliebenID: false,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n     getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(personLernvorliebenID).then(lernvorliebenBO =>\n      this.setState({\n            profil: profilBOs,\n            profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorlieben: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          profilLernfaecher: null,\n          profilLernvorlieben: false,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n   /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    // Use the states customer\n    const { personProfil, personName, personVorname, personSemester, personStudiengang, personLernfaecher, personLernvorlieben, loadingInProgress, error} = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n    \"\"\"  <Button color=\"primary\" onClick= {this.showVorschlagButtonClick}>Zurueck zu den Vorschlaegen</Button>\"\"\"\n      <Typography variant='body1' color={'textSecondary'}>\n\n                            <b>Semester: </b> {personSemester} <br />\n                            <b>Studiengang: </b>{personStudiengang}<br />\n                            <b>Lernfächer: </b>{personLernfaecher}<br />\n                            <b>Lernvorlieben: </b>{personLernvorlieben}<br />\n\n\n      </div>\n    );\n  }\n}\n\n  const styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n\n/** PropTypes */\nProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  person: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(Profil);\n\n",{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"205","severity":1,"message":"209","line":8,"column":8,"nodeType":"207","messageId":"208","endLine":8,"endColumn":22},{"ruleId":"205","severity":1,"message":"210","line":13,"column":8,"nodeType":"207","messageId":"208","endLine":13,"endColumn":25},{"ruleId":"205","severity":1,"message":"211","line":154,"column":39,"nodeType":"207","messageId":"208","endLine":154,"endColumn":46},{"ruleId":"212","severity":1,"message":"213","line":564,"column":9,"nodeType":"214","messageId":"215","endLine":571,"endColumn":10},{"ruleId":"205","severity":1,"message":"216","line":2,"column":41,"nodeType":"207","messageId":"208","endLine":2,"endColumn":45},{"ruleId":"205","severity":1,"message":"217","line":3,"column":123,"nodeType":"207","messageId":"208","endLine":3,"endColumn":127},{"ruleId":"205","severity":1,"message":"218","line":138,"column":26,"nodeType":"207","messageId":"208","endLine":138,"endColumn":30},{"ruleId":"205","severity":1,"message":"219","line":138,"column":32,"nodeType":"207","messageId":"208","endLine":138,"endColumn":38},{"ruleId":"205","severity":1,"message":"220","line":3,"column":34,"nodeType":"207","messageId":"208","endLine":3,"endColumn":48},{"ruleId":"205","severity":1,"message":"221","line":3,"column":50,"nodeType":"207","messageId":"208","endLine":3,"endColumn":55},{"ruleId":"205","severity":1,"message":"222","line":3,"column":57,"nodeType":"207","messageId":"208","endLine":3,"endColumn":66},{"ruleId":"205","severity":1,"message":"223","line":3,"column":68,"nodeType":"207","messageId":"208","endLine":3,"endColumn":77},{"ruleId":"205","severity":1,"message":"224","line":3,"column":79,"nodeType":"207","messageId":"208","endLine":3,"endColumn":84},{"ruleId":"205","severity":1,"message":"225","line":3,"column":86,"nodeType":"207","messageId":"208","endLine":3,"endColumn":94},{"ruleId":"205","severity":1,"message":"226","line":3,"column":96,"nodeType":"207","messageId":"208","endLine":3,"endColumn":105},{"ruleId":"205","severity":1,"message":"216","line":3,"column":107,"nodeType":"207","messageId":"208","endLine":3,"endColumn":111},{"ruleId":"205","severity":1,"message":"227","line":3,"column":113,"nodeType":"207","messageId":"208","endLine":3,"endColumn":117},{"ruleId":"205","severity":1,"message":"228","line":5,"column":10,"nodeType":"207","messageId":"208","endLine":5,"endColumn":20},{"ruleId":"205","severity":1,"message":"229","line":7,"column":8,"nodeType":"207","messageId":"208","endLine":7,"endColumn":27},{"ruleId":"205","severity":1,"message":"230","line":8,"column":8,"nodeType":"207","messageId":"208","endLine":8,"endColumn":23},{"ruleId":"205","severity":1,"message":"231","line":9,"column":8,"nodeType":"207","messageId":"208","endLine":9,"endColumn":16},{"ruleId":"232","severity":2,"message":"233","line":80,"column":39,"nodeType":"207","messageId":"234","endLine":80,"endColumn":53},{"ruleId":"232","severity":2,"message":"235","line":82,"column":21,"nodeType":"207","messageId":"234","endLine":82,"endColumn":30},{"ruleId":"232","severity":2,"message":"236","line":106,"column":46,"nodeType":"207","messageId":"234","endLine":106,"endColumn":67},{"ruleId":"232","severity":2,"message":"235","line":108,"column":21,"nodeType":"207","messageId":"234","endLine":108,"endColumn":30},{"ruleId":"232","severity":2,"message":"237","line":109,"column":32,"nodeType":"207","messageId":"234","endLine":109,"endColumn":40},{"ruleId":"232","severity":2,"message":"237","line":110,"column":34,"nodeType":"207","messageId":"234","endLine":110,"endColumn":42},{"ruleId":"205","severity":1,"message":"238","line":134,"column":15,"nodeType":"207","messageId":"208","endLine":134,"endColumn":27},{"ruleId":"205","severity":1,"message":"239","line":134,"column":29,"nodeType":"207","messageId":"208","endLine":134,"endColumn":39},{"ruleId":"205","severity":1,"message":"240","line":134,"column":41,"nodeType":"207","messageId":"208","endLine":134,"endColumn":54},{"ruleId":"205","severity":1,"message":"241","line":134,"column":131,"nodeType":"207","messageId":"208","endLine":134,"endColumn":148},{"ruleId":"205","severity":1,"message":"242","line":134,"column":150,"nodeType":"207","messageId":"208","endLine":134,"endColumn":155},{"ruleId":"243","severity":2,"message":"244","line":139,"column":10,"nodeType":"245","messageId":"246","endLine":139,"endColumn":16},{"ruleId":"232","severity":2,"message":"247","line":182,"column":1,"nodeType":"207","messageId":"234","endLine":182,"endColumn":7},{"ruleId":"205","severity":1,"message":"206","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"205","severity":1,"message":"248","line":5,"column":8,"nodeType":"207","messageId":"208","endLine":5,"endColumn":22},{"ruleId":"205","severity":1,"message":"249","line":8,"column":8,"nodeType":"207","messageId":"208","endLine":8,"endColumn":20},{"ruleId":"232","severity":2,"message":"250","line":24,"column":31,"nodeType":"207","messageId":"234","endLine":24,"endColumn":40},{"ruleId":"232","severity":2,"message":"251","line":41,"column":5,"nodeType":"207","messageId":"234","endLine":41,"endColumn":13},{"ruleId":"232","severity":2,"message":"252","line":42,"column":10,"nodeType":"207","messageId":"234","endLine":42,"endColumn":15},{"ruleId":"232","severity":2,"message":"253","line":73,"column":33,"nodeType":"207","messageId":"234","endLine":73,"endColumn":40},{"ruleId":"232","severity":2,"message":"254","line":78,"column":23,"nodeType":"207","messageId":"234","endLine":78,"endColumn":35},{"ruleId":"205","severity":1,"message":"255","line":4,"column":22,"nodeType":"207","messageId":"208","endLine":4,"endColumn":28},{"ruleId":"205","severity":1,"message":"227","line":4,"column":30,"nodeType":"207","messageId":"208","endLine":4,"endColumn":34},{"ruleId":"205","severity":1,"message":"256","line":27,"column":9,"nodeType":"207","messageId":"208","endLine":27,"endColumn":19},{"ruleId":"205","severity":1,"message":"257","line":95,"column":20,"nodeType":"207","messageId":"208","endLine":95,"endColumn":33},{"ruleId":"232","severity":2,"message":"258","line":64,"column":24,"nodeType":"207","messageId":"234","endLine":64,"endColumn":40},{"ruleId":null,"fatal":true,"severity":2,"message":"259","line":156,"column":36},{"ruleId":"205","severity":1,"message":"255","line":4,"column":22,"nodeType":"207","messageId":"208","endLine":4,"endColumn":28},{"ruleId":"205","severity":1,"message":"260","line":4,"column":30,"nodeType":"207","messageId":"208","endLine":4,"endColumn":39},{"ruleId":"205","severity":1,"message":"261","line":4,"column":41,"nodeType":"207","messageId":"208","endLine":4,"endColumn":55},{"ruleId":"205","severity":1,"message":"262","line":4,"column":57,"nodeType":"207","messageId":"208","endLine":4,"endColumn":67},{"ruleId":"205","severity":1,"message":"227","line":4,"column":69,"nodeType":"207","messageId":"208","endLine":4,"endColumn":73},{"ruleId":"205","severity":1,"message":"263","line":4,"column":75,"nodeType":"207","messageId":"208","endLine":4,"endColumn":85},{"ruleId":"232","severity":2,"message":"264","line":44,"column":23,"nodeType":"207","messageId":"234","endLine":44,"endColumn":31},{"ruleId":"205","severity":1,"message":"265","line":7,"column":63,"nodeType":"207","messageId":"208","endLine":7,"endColumn":79},{"ruleId":"205","severity":1,"message":"266","line":94,"column":37,"nodeType":"207","messageId":"208","endLine":94,"endColumn":45},{"ruleId":"243","severity":2,"message":"267","line":125,"column":18,"nodeType":"245","messageId":"246","endLine":125,"endColumn":29},{"ruleId":null,"fatal":true,"severity":2,"message":"268","line":26,"column":13},"no-native-reassign",["269"],"no-negated-in-lhs",["270"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'VorschlagListe' is defined but never used.","'RegistrierungForm' is defined but never used.","'Userneu' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","unexpected","'Link' is defined but never used.","'Card' is defined but never used.","'show' is assigned a value but never used.","'person' is assigned a value but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Grid' is defined but never used.","'withRouter' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","'ProfilBO' is defined but never used.","no-undef","'personProfilID' is not defined.","undef","'profilBOs' is not defined.","'personLernvorliebenID' is not defined.","'profilBO' is not defined.","'personProfil' is assigned a value but never used.","'personName' is assigned a value but never used.","'personVorname' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","react/jsx-no-undef","'Button' is not defined.","JSXIdentifier","undefined","'Profil' is not defined.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","'component' is not defined.","'setState' is not defined.","'state' is not defined.","'classes' is not defined.","'handleChange' is not defined.","'Button' is defined but never used.","'expandedID' is assigned a value but never used.","'currentPerson' is assigned a value but never used.","'showKonversation' is not defined.","Parsing error: Identifier 'personID' has already been declared.\n\n\u001b[0m \u001b[90m 154 |\u001b[39m     render() {\u001b[0m\n\u001b[0m \u001b[90m 155 |\u001b[39m       \u001b[36mconst\u001b[39m { classes\u001b[33m,\u001b[39m personID\u001b[33m,\u001b[39m konversation_id } \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mprops\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 156 |\u001b[39m       \u001b[36mconst\u001b[39m { nachrichten\u001b[33m,\u001b[39m inhalt\u001b[33m,\u001b[39m personID\u001b[33m,\u001b[39m konversation_id\u001b[33m,\u001b[39m loadingInProgress\u001b[33m,\u001b[39m error\u001b[33m,\u001b[39m expandedNachrichtID } \u001b[33m=\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mstate\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 157 |\u001b[39m       \u001b[36mif\u001b[39m (nachrichten) {\u001b[0m\n\u001b[0m \u001b[90m 158 |\u001b[39m         nachrichten\u001b[33m.\u001b[39msort((a\u001b[33m,\u001b[39m b) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 159 |\u001b[39m           \u001b[36mreturn\u001b[39m a\u001b[33m.\u001b[39mgetID() \u001b[33m-\u001b[39m b\u001b[33m.\u001b[39mgetID()\u001b[33m;\u001b[39m\u001b[0m","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'lernfach' is not defined.","'AccordionDetails' is defined but never used.","'profilID' is assigned a value but never used.","'AnfrageForm' is not defined.","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 24 |\u001b[39m             personStudiengang \u001b[33m=\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m             lerngruppe \u001b[33m=\u001b[39m \u001b[36mfalse\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 |\u001b[39m             personProfilID \u001b[33m=\u001b[39m \u001b[33mNone\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m             personLernfaecher \u001b[33m=\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 |\u001b[39m             personLernvorliebenID \u001b[33m=\u001b[39m \u001b[36mnull\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 29 |\u001b[39m             loadingInProgress\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m\u001b[33m,\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]