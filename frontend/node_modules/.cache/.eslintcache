[{"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\index.js":"1","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\App.js":"2","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\Theme.js":"3","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\firebaseconfig.js":"4","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListe.js":"5","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\MeinProfil.js":"6","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Profil.js":"7","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListe.js":"8","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\layout\\Header.js":"9","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\About.js":"10","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\SignIn.js":"11","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernpartnerAPI.js":"12","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LoadingProgress.js":"13","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\RegistrierungForm.js":"14","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js":"15","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LernfaecherForm.js":"16","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListeEintrag.js":"17","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListeEintrag.js":"18","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\MeinProfilForm.js":"19","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ProfileDropDown.js":"20","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\PersonBO.js":"21","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\ProfilBO.js":"22","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LerngruppeBO.js":"23","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\VorschlagBO.js":"24","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernvorliebenBO.js":"25","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NachrichtBO.js":"26","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeChatBO.js":"27","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\KonversationBO.js":"28","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeGruppeBO.js":"29","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernfachBO.js":"30","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\VorschlagListe.js":"31","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\index.js":"32","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Nachricht.js":"33","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NamedBusinessObject.js":"34","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\GruppeVerlassenDialog.js":"35","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\BusinessObject.js":"36","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\VorschlagListeEintrag.js":"37","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\NachrichtenListeEintrag.js":"38"},{"size":151,"mtime":1620806709859,"results":"39","hashOfConfig":"40"},{"size":6450,"mtime":1624794239668,"results":"41","hashOfConfig":"40"},{"size":1787,"mtime":1623496749709,"results":"42","hashOfConfig":"40"},{"size":594,"mtime":1624371992866,"results":"43","hashOfConfig":"40"},{"size":4466,"mtime":1624794239725,"results":"44","hashOfConfig":"40"},{"size":9171,"mtime":1624793373997,"results":"45","hashOfConfig":"40"},{"size":6235,"mtime":1624630590665,"results":"46","hashOfConfig":"40"},{"size":5646,"mtime":1624569929821,"results":"47","hashOfConfig":"40"},{"size":1907,"mtime":1624616171146,"results":"48","hashOfConfig":"40"},{"size":882,"mtime":1624371992865,"results":"49","hashOfConfig":"40"},{"size":1877,"mtime":1624459993900,"results":"50","hashOfConfig":"40"},{"size":44799,"mtime":1624813414751,"results":"51","hashOfConfig":"40"},{"size":902,"mtime":1622117473558,"results":"52","hashOfConfig":"40"},{"size":12852,"mtime":1624793374029,"results":"53","hashOfConfig":"40"},{"size":2187,"mtime":1622117473550,"results":"54","hashOfConfig":"40"},{"size":4054,"mtime":1624793374005,"results":"55","hashOfConfig":"40"},{"size":3508,"mtime":1624795671419,"results":"56","hashOfConfig":"40"},{"size":5424,"mtime":1624630590664,"results":"57","hashOfConfig":"40"},{"size":21907,"mtime":1624793374013,"results":"58","hashOfConfig":"40"},{"size":3383,"mtime":1622538423136,"results":"59","hashOfConfig":"40"},{"size":2672,"mtime":1624630590661,"results":"60","hashOfConfig":"40"},{"size":1309,"mtime":1623496749716,"results":"61","hashOfConfig":"40"},{"size":1057,"mtime":1624630590617,"results":"62","hashOfConfig":"40"},{"size":1526,"mtime":1624711798299,"results":"63","hashOfConfig":"40"},{"size":2025,"mtime":1624630590658,"results":"64","hashOfConfig":"40"},{"size":1383,"mtime":1623853219586,"results":"65","hashOfConfig":"40"},{"size":1097,"mtime":1624371992680,"results":"66","hashOfConfig":"40"},{"size":853,"mtime":1624794239687,"results":"67","hashOfConfig":"40"},{"size":1097,"mtime":1624569929819,"results":"68","hashOfConfig":"40"},{"size":805,"mtime":1624705738451,"results":"69","hashOfConfig":"40"},{"size":5306,"mtime":1624711798314,"results":"70","hashOfConfig":"40"},{"size":335,"mtime":1622117473538,"results":"71","hashOfConfig":"40"},{"size":8008,"mtime":1624814959572,"results":"72","hashOfConfig":"40"},{"size":400,"mtime":1622117473508,"results":"73","hashOfConfig":"40"},{"size":4037,"mtime":1624569929826,"results":"74","hashOfConfig":"40"},{"size":799,"mtime":1621766915463,"results":"75","hashOfConfig":"40"},{"size":6084,"mtime":1624711798321,"results":"76","hashOfConfig":"40"},{"size":5315,"mtime":1624807353651,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"15l5e1u",{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\index.js",[],["169","170"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\App.js",["171","172","173"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport Header from './components/layout/Header';\r\nimport KonversationListe from './components/KonversationListe';\r\n//import VorschlagListe from './components/VorschlagListe';\r\nimport LernpartnerAPI from './api/LernpartnerAPI';\r\nimport About from './components/pages/About';\r\nimport Theme from './Theme';\r\nimport SignIn from './components/pages/SignIn';\r\nimport RegistrierungForm from './components/dialogs/RegistrierungForm';\r\nimport MeinProfil from './components/MeinProfil';\r\nimport LoadingProgress from './components/dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\r\nimport firebaseConfig from './firebaseconfig';\r\nimport LernfaecherForm from './components/dialogs/LernfaecherForm';\r\nimport Profil from './components/Profil';\r\nimport GruppenListe from './components/GruppenListe';\r\n\r\nclass App extends React.Component {\r\n\r\n\t/** Constructor of the app, which initializes firebase  */\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t// Init an empty state\r\n\t\tthis.state = {\r\n\t\t\tcurrentUser: null,\r\n\t\t\tpersonName: null,\r\n\t\t\tpersonneu: false,\r\n\t\t\tappError: null,\r\n\t\t\tauthError: null,\r\n\t\t\tauthLoading: false,\r\n\t\t\tUserneu: null,\r\n\t\t\tcurrentPerson: null,\r\n\t\t\t\r\n\t\t};\r\n\t}\r\n\r\n\t/** \r\n\t * Create an error boundary for this app and recieve all errors from below the component tree.\r\n\t * \r\n\t * @See See Reacts [Error Boundaries](https://reactjs.org/docs/error-boundaries.html)\r\n \t */\r\n\tstatic getDerivedStateFromError(error) {\r\n\t\t// Update state so the next render will show the fallback UI.\r\n\t\treturn { appError: error };\r\n\t}\r\n\r\n\t/** Handles firebase users logged in state changes  */\r\n\thandleAuthStateChange = user => {\r\n\t\tif (user) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tauthLoading: true\r\n\t\t\t});\r\n\t\t\t// The user is signed in\r\n\t\t\tuser.getIdToken().then(token => {\r\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\r\n\t\t\t\t// able to verify the token against the API.\r\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\r\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\r\n\t\t\t\t// user information.\r\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\r\n\r\n\t\t\t\t// Set the user not before the token arrived \r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentUser: user,\r\n\t\t\t\t\tauthError: null,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t\r\n\t\t\t\t})}).then(() => {\r\n\t\t\t\tthis.getPersonByGoogleID()\r\n\t\t\t}).catch(e => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tauthError: e,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// User has logged out, so clear the id token\r\n\t\t\tdocument.cookie = 'token=;path=/';\r\n\r\n\t\t\t// Set the logged out user to null\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentUser: null,\r\n\t\t\t\tauthLoading: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n  /** \r\n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\r\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\r\n\t */\r\n\thandleSignIn = () => {\r\n\t\tthis.setState({\r\n\t\t\tauthLoading: true\r\n\t\t});\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\r\n\t\tfirebase.auth().signInWithRedirect(provider);\r\n\t}\r\n\r\n\t//aktuell eingeloggten Student vom Backend abfragen\r\n\t\r\n\tgetPersonByGoogleID = () => {\r\n\t\tLernpartnerAPI.getAPI().getPersonByGoogleID(this.state.currentUser.uid)\r\n\t\t\t.then(personBO =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcurrentPerson: personBO,\r\n\t\t\t\t\tpersonName: personBO.getvorname(),\r\n\t\t\t\t\terror: null,\r\n\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t}))\r\n\t\t\t\t.catch(e =>\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tcurrentPerson: null,\r\n\t\t\t\t\t\terror: e,\r\n\t\t\t\t\t\tloadingInProgress: false,\r\n\t\t\t\t\t}));\r\n\t\t\tthis.setState({\r\n\t\t\t\terror: null,\r\n\t\t\t\tloadingInProgress: true\r\n\t\t\t});\r\n\t\t\r\n\t\tsetTimeout(()=>{\r\n\t\t  console.log(this.state);\r\n\t\t},1000);\r\n\t\t}\r\n\t\r\n\t/**\r\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\r\n\t * Initializes the firebase SDK.\r\n\t * \r\n\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tfirebase.initializeApp(firebaseConfig);\r\n\t\tfirebase.auth().languageCode = 'en';\r\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n\t\r\n\t}\r\n\r\n\t/** Renders the whole app */\r\n\trender() {\r\n\t\tconst { currentUser, currentPerson, personneu, personName, appError, authError, authLoading} = this.state;\r\n\t\tconsole.log(personName)\r\n\t\tconsole.log(personneu)\r\n\t\treturn (\r\n\t\t\t<ThemeProvider theme={Theme}>\r\n\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Container maxWidth='md'>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Header user={currentUser} person={currentPerson}/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Is a user signed in?\r\n\t\t\t\t\t\t\tcurrentUser ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='/about'/>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Route path='/meinprofil' component={MeinProfil}>\r\n\t\t\t\t\t\t\t\t\t\t<MeinProfil currentPerson={currentPerson}/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t\t<Route path='/meinelerngruppen'>\r\n                                    \t<GruppenListe currentPerson={currentPerson}/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Route path='/meinevorschlaege'>\r\n\t\t\t\t\t\t\t\t\t\t<LernfaecherForm currentPerson={currentPerson}/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t\t<Route path='/meinechats'>\r\n\t\t\t\t\t\t\t\t\t\t<KonversationListe currentPerson={currentPerson} />\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t// else show the sign in page\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\r\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sign in process.`} onReload={this.handleSignIn} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t\r\n\t\t\t\t</Router>\r\n\t\t\t</ThemeProvider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\Theme.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\firebaseconfig.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListe.js",["174","175"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport { withStyles, Grid, Typography} from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport KonversationListeEintrag from './KonversationListeEintrag';\r\n\r\n\r\n/**\r\n * Es werden alle Konversationen des aktuell eingeloggten Studenten angezeigt\r\n * \r\n * @see See [KonversationListeEintrag]](#konversationlisteeintrag)\r\n * \r\n * Hierfür werden alle Konversationen des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\r\n * \r\n */\r\n\r\nclass KonversationListe extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandKonversation) {\r\n        expandedID = this.props.location.expandKonversation.getID();\r\n        }\r\n        \r\n       \r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            konversationen : [],\r\n            error: null,\r\n            loadingInProgress: false, \r\n            expandedKonversationID: expandedID,\r\n        };\r\n\r\n      }\r\n\r\n      // API Anbindung um Konversationen des Students vom Backend zu bekommen \r\n    getKonversation = () => {\r\n      LernpartnerAPI.getAPI().getKonversationenByPerson(this.props.currentPerson.getID())\r\n      .then(konversationenBOs =>\r\n          this.setState({\r\n              konversationen: konversationenBOs,\r\n              error: null,\r\n              loadingInProgress: false,\r\n          })).catch(e =>\r\n              this.setState({\r\n                  konversationen: [],\r\n                  error: e,\r\n                  loadingInProgress: false,\r\n              }));\r\n      this.setState({\r\n          error: null,\r\n          loadingInProgress: true,\r\n          loadingKonversationenError: null\r\n      });\r\n    }\r\n    \r\n\r\n \r\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\ncomponentDidMount() {\r\n  this.getKonversation();\r\n}\r\n\r\n\r\n /** \r\n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \r\n     * the VorschlagListeEintrag of the given VorschlagBO.\r\n     * \r\n     * @param {konversation} KonversationBO of the KonversationListeEintrag to be toggeled\r\n   */\r\n     \r\n  onExpandedStateChange = konversation => {\r\n    // console.log(konversationID);\r\n    // Set expandend Konversation Eintrag to null by default\r\n    let newID = null;\r\n\r\n    // If same konversation entry is clicked, collapse it else expand a new one\r\n    if (konversation.getID() !== this.state.expandedKonversationID) {\r\n    // Expand the konservation entry with konversationID\r\n    newID = konversation.getID();\r\n    }\r\n    // console.log(newID);\r\n    this.setState({\r\n    expandedKonversationID: newID,\r\n    });\r\n}\r\n\r\n \r\n\r\nrender() {\r\n  const { classes, currentPerson } = this.props;\r\n        const { konversationen, expandedKonversationID, error, loadingInProgress}  = this.state; \r\n\r\n        return(\r\n          <div className={classes.root}>\r\n           \r\n            { \r\n              // Show the list of KonversationListeEintrag components\r\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\r\n  \r\n              konversationen.map(konversation =>\r\n                <KonversationListeEintrag key={konversation.getID()} currentPerson= {currentPerson} konversation={konversation} expandedState={expandedKonversationID === konversation.getID()}\r\n                onExpandedStateChange={this.onExpandedStateChange}\r\n                />)\r\n            }\r\n            <LoadingProgress show={loadingInProgress} />\r\n            <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Chats nicht geladen werden!`} onReload={this.getKonversation} />\r\n          </div>\r\n\r\n        );\r\n\r\n      }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  customerFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nKonversationListe.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default withRouter(withStyles(styles)(KonversationListe));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\MeinProfil.js",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\r\n//import Button from '@material-ui/core/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport RegistrierungForm from './dialogs/RegistrierungForm';\r\nimport MeinProfilForm from './dialogs/MeinProfilForm';\r\nimport { LernpartnerAPI } from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass MeinProfil extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            person: null,\r\n            \r\n            personVorname: null,\r\n            personName: this.props.personName,\r\n            personSemester: null,\r\n            personAlter: null,\r\n            personStudiengang: null,\r\n            lerngruppe: false,\r\n            personProfilID: null,\r\n            personLernfaecher: [],\r\n            lernfaechernamen: [],\r\n            lernfaechergesamt: [],\r\n            personLernvorliebenID: null,\r\n            profil: null,\r\n            lernvorlieben: null,\r\n            lernvorliebenfrequenz: null,\r\n            gruppe: false,\r\n            showMeinProfilForm: false,\r\n            showRegistrierungForm: false,\r\n            loadingInProgress: false,\r\n            loadingError: null,\r\n            \r\n        };\r\n    }\r\n\r\n    // API Anbindung um Profil vom Backend zu bekommen\r\n    \r\n    getPerson = () => {\r\n      LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.currentPerson.getgoogle_user_id())\r\n      .then(personBO =>\r\n          this.setState({\r\n            person: personBO,\r\n            personName: personBO.name,\r\n            personVorname: personBO.vorname,\r\n            personAlter: personBO.alter,\r\n            personSemester: personBO.semester,\r\n            personStudiengang: personBO.studiengang,\r\n            personProfilID: personBO.personenprofil,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          })).then(() => {\r\n            if (this.state.personName === 'Null'){\r\n              this.setState({\r\n                showRegistrierungForm: true\r\n              })\r\n            }\r\n          })\r\n          .catch(e =>\r\n              this.setState({\r\n            person: null,\r\n            personName: null,\r\n            personVorname: null,\r\n            personSemester: null,\r\n            personStudiengang: null,\r\n            personProfilID: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n    \r\n\r\n   getProfil = () => {\r\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\r\n\t\t\t.then(profilBO =>\r\n\t\t\t\tthis.setState({\r\n            profil: profilBO,\r\n            personLernvorliebenID: profilBO.lernvorlieben_id,\r\n            error: null,\r\n            loadingInProgress: false,\r\n          })).then(() => {\r\n            this.getLernvorlieben();\r\n           \r\n          }).catch(e =>\r\n            this.setState({\r\n              profil: null,\r\n              personLernfaecher: null,\r\n              error: e,\r\n              loadingInProgress: false,\r\n            }));\r\n\r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n\r\n    getLernfaecher = () => {\r\n      LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\r\n      .then(lernfaecherBOs =>\r\n        this.setState({\r\n              personLernfaecher: lernfaecherBOs,\r\n              lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\r\n              loadingInProgress: false,\r\n              error: null\r\n        }))\r\n        .catch(e =>\r\n          this.setState({ // Reset state with error from catch\r\n            personLernfaecher: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n          })\r\n        );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n\r\n    getalleLernfaecher = () => {\r\n      LernpartnerAPI.getAPI().getLernfaecher()\r\n      .then(lernfaecherBOs =>\r\n        this.setState({\r\n              lernfaechergesamt: lernfaecherBOs,\r\n              loadingInProgress: false,\r\n              error: null\r\n        }))\r\n        .catch(e =>\r\n          this.setState({ // Reset state with error from catch\r\n            lernfaechergesamt: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n          })\r\n        );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n   \r\n    getLernvorlieben = () => {\r\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.personLernvorliebenID)\r\n    .then(lernvorliebenBO =>\r\n      this.setState({\r\n            lernvorlieben: lernvorliebenBO,\r\n            lernvorliebenfrequenz: lernvorliebenBO.frequenz,\r\n            loadingInProgress: false,\r\n            error: null\r\n      }))\r\n      .catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          lernvorlieben: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n  \r\n  \r\n  //Handles the onClick event of the show profil button\r\n  bearbeitenButtonClicked = (event) => {\r\n    this.setState({\r\n      showMeinProfilForm: true\r\n    });\r\n  }\r\n\r\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\r\n  userFormClosed = (person) => {\r\n    this.getPerson();\r\n    if (person) {\r\n        this.setState({\r\n            person: person,\r\n            showRegistrierungForm: false,\r\n        });\r\n    } else {\r\n        this.setState({\r\n          showRegistrierungForm: false\r\n        })\r\n      \r\n    }\r\n  }\r\n\r\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\r\n  bearbeitenFormClosed = (person) => {\r\n    this.getPerson();\r\n    if (person) {\r\n        this.setState({\r\n            person: person,\r\n            showMeinProfilForm: false,\r\n        });\r\n    } else {\r\n        this.setState({\r\n          showMeinProfilForm: false\r\n        })\r\n      \r\n    }\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount(){\r\n    this.getPerson();\r\n    this.getProfil();\r\n    this.getLernfaecher();\r\n    this.getalleLernfaecher();\r\n    \r\n  }\r\n\r\n\r\n   /** Renders the component */\r\n    render() {\r\n      const { classes , currentPerson } = this.props;\r\n      // Use the states customer\r\n      const { lernfaechernamen, profil, personProfil, personName, personVorname, personSemester, personAlter, personStudiengang, personLernfaecher, lernfach, lernfaechergesamt, personLernvorliebenID, lernvorlieben, lernvorliebenfrequenz, showRegistrierungForm, showMeinProfilForm, loadingInProgress, error} = this.state;\r\n      console.log(lernfaechergesamt)\r\n      \r\n    \r\n      return (\r\n        <div className={classes.root}>\r\n        <RegistrierungForm show={showRegistrierungForm} currentPerson = {currentPerson} onClose={this.userFormClosed}/>\r\n        \r\n        <Button color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Mein Profil bearbeiten</Button>\r\n        <Typography variant='body1' color={'textSecondary'}>\r\n\r\n                              <b>Name: </b>{personVorname} {personName}<br />\r\n                              <b>Alter: </b> {personAlter} <br />\r\n                              <b>Semester: </b> {personSemester} <br />\r\n                              <b>Studiengang: </b>{personStudiengang}<br />\r\n                              <b>Lernfächer: </b>{lernfaechernamen}<br />\r\n                              <b>Lernvorlieben-Frequenz Test: </b>{lernvorliebenfrequenz}<br />\r\n\r\n        </Typography>\r\n        <MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson} currentProfil={profil} lernvorlieben={lernvorlieben} lernfaechergesamt={lernfaechergesamt} onClose={this.bearbeitenFormClosed}/>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n//<MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson}/>\r\n  const styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n  formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      textAlign: \"left\"\r\n  },\r\n\r\n  laden: {\r\n    padding: 0\r\n  },\r\n  breite: {\r\n    width: 220\r\n  }\r\n  });\r\n\r\n\r\n/** PropTypes */\r\nMeinProfil.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  currentPerson: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withRouter(withStyles(styles)(MeinProfil));\r\n\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Profil.js",["193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Button, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {LernpartnerAPI} from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n\r\nclass Profil extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            user: props.user,\r\n            profil: null,\r\n            lernvorlieben: null,\r\n            gruppe: false,\r\n            tageszeiten: null,\r\n            tage: null,\r\n            frequenz: null,\r\n            lernart: null,\r\n            gruppengroesse: null,\r\n            lernort: null,\r\n            gruppe: null,\r\n            personVorname: null,\r\n            personName: null,\r\n            personSemester: 0,\r\n            personStudiengang: null,\r\n            lerngruppe: false,\r\n            personProfilID: null,\r\n            personLernfaecher: null,\r\n            personLernvorliebenID: null,\r\n            loadingInProgress: false,\r\n            loadingError: null,\r\n        };\r\n    }\r\n\r\n\r\n\r\n/**   showVorschlagButtonClick = (event) => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showVorschlag: true\r\n      });\r\n    }**/\r\n\r\n\r\n\r\n/**\r\n    // API Anbindung um Profil vom Backend zu bekommen\r\n    getPerson = () => {\r\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\r\n      .then(personBO =>\r\n          this.setState({\r\n            person: personBO,\r\n            personName: personBO.name,\r\n            personVorname: personBO.vorname,\r\n            personSemester: personBO.semester,\r\n            personStudiengang: personBO.studiengang,\r\n            personProfilID: personBO.personenprofil,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n            person: null,\r\n            personName: null,\r\n            personVorname: null,\r\n            personSemester: null,\r\n            personStudiengang: null,\r\n            personProfilID: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n*/\r\n\r\n     getProfil = () => {\r\n    LernpartnerAPI.getAPI().getProfil(this.props.user.id).then(profilBO =>\r\n      this.setState({\r\n            profil: profilBO,\r\n            gruppe: profilBO.gruppe,\r\n            //profilLernfaecher: profilBO.lernfaecher,\r\n            profilLernvorliebenID: profilBO.lernvorlieben,\r\n            loadingInProgress: false,\r\n            error: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          profil: null,\r\n          gruppe: null,\r\n          //profilLernfaecher: null,\r\n          profilLernvorliebenID: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n\r\n     getLernvorlieben = () => {\r\n    LernpartnerAPI.getAPI().getLernvorliebenPraeferenz(this.props.user.profil).then(lernvorliebenBO =>\r\n      this.setState({\r\n            lernvorlieben: lernvorliebenBO,\r\n            tageszeiten: lernvorliebenBO.tageszeiten,\r\n            tage: lernvorliebenBO.tage,\r\n            frequenz: lernvorliebenBO.frequenz,\r\n            lernart: lernvorliebenBO.lernart,\r\n            gruppengroesse: lernvorliebenBO.gruppengroesse,\r\n            lernort: lernvorliebenBO.lernort,\r\n            loadingInProgress: false,\r\n            error: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          lernvorlieben: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n    componentDidMount() {\r\n        this.getProfil();\r\n        this.getLernvorlieben();\r\n  }\r\n\r\n\r\n   /** Renders the component */\r\n  render() {\r\n    const { classes, show } = this.props;\r\n    // Use the states customer\r\n    const { user, profil, lernvorlieben, tageszeiten, tage, frequenz, lernart, lernort, gruppengroesse, gruppe, personLernvorliebenID, loadingInProgress, error} = this.state;\r\n    console.log(user)\r\n\r\n    // console.log(this.props);\r\n    return (\r\n      <div className={classes.root}>\r\n            {\r\n            gruppe ?\r\n                <>\r\n                    <b> {user.vorname} {user.name} </b> <br />\r\n                    <b>Semester: </b> {user.semester} <br />\r\n                    <b>Studiengang: </b> {user.studiengang} <br />\r\n                    <b>Alter: </b> {user.alter} <br />\r\n                    <b>Geschlecht: </b> {user.geschlecht} <br />\r\n\r\n                </>\r\n\r\n                :\r\n                <>\r\n                    <b> Profilinformationen: </b> <br /><br />\r\n                    Tageszeiten: {tageszeiten}<br />\r\n                    Tage: {tage}<br />\r\n                    Frequenz: {frequenz}<br />\r\n                    Lernart: {lernart}<br />\r\n                    Lernort: {lernort}\r\n                </>\r\n           }\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n  formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      textAlign: \"left\"\r\n  },\r\n\r\n  laden: {\r\n    padding: 0\r\n  },\r\n  breite: {\r\n    width: 220\r\n  }\r\n});\r\n\r\n\r\n/** PropTypes */\r\nProfil.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Profil);\r\n\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListe.js",["215","216","217","218","219","220"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport GruppenListeEintrag from './GruppenListeEintrag';\r\n//import SaveIcon from '@material-ui/icons/Save';\r\n//import Table from '@material-ui/core/Table';\r\n//import TableBody from '@material-ui/core/TableBody';\r\n//import TableCell from '@material-ui/core/TableCell';\r\n//import TableContainer from '@material-ui/core/TableContainer';\r\n//import TableHead from '@material-ui/core/TableHead';\r\n//import TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\n/**\r\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\r\n *\r\n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\r\n *\r\n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\r\n *\r\n */\r\n\r\n\r\nclass GruppenListe extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandLerngruppe) {\r\n          expandedID = this.props.location.expandLerngruppe.getID();\r\n        }\r\n\r\n        // Init an empty state\r\n        this.state = {\r\n          lerngruppen: [],\r\n          error: null,\r\n          loadingInProgress: false,\r\n          expandedLerngruppeID: expandedID,\r\n          //showCustomerForm: false\r\n        };\r\n\r\n    }\r\n\r\n    /** Fetches all LerngruppenBOs from the backend */\r\n    getLerngruppen = () => {\r\n        LernpartnerAPI.getAPI().getLerngruppe(this.props.currentPerson.id)\r\n            .then(lerngruppeBOs =>\r\n                this.setState({               // Set new state when LerngruppeBOs have been fetched\r\n                    lerngruppen: lerngruppeBOs,\r\n                    //name: lerngruppeBO.name\r\n                    loadingInProgress: false,   // disable loading indicator\r\n                    error: null\r\n                })).catch(e =>\r\n                    this.setState({             // Reset state with error from catch\r\n                        lerngruppen: [],\r\n                        loadingInProgress: false, // disable loading indicator\r\n                        error: e\r\n                    })\r\n                );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles onExpandedStateChange events from the GruppeListeEintrag component. Toggels the expanded state of\r\n     * the GruppeListeEintrag of the given LerngruppeBO.\r\n     *\r\n     * @param {lerngruppe} LerngruppeBO of the GruppeListeEintrag to be toggeled\r\n     */\r\n    onExpandedStateChange = lerngruppe => {\r\n        // console.log(vorschlagID);\r\n        // Set expandend Lerngruppe Eintrag to null by default\r\n        let newID = null;\r\n\r\n        // If same lerngruppe entry is clicked, collapse it else expand a new one\r\n        if (lerngruppe.getID() !== this.state.expandedLerngruppeID) {\r\n        // Expand the lerngruppe entry with lerngruppeID\r\n        newID = lerngruppe.getID();\r\n        }\r\n        // console.log(newID);\r\n        this.setState({\r\n        expandedLerngruppeID: newID,\r\n        });\r\n    }\r\n\r\n   /**\r\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\r\n   */\r\n    lerngruppeVerlassen = () => {\r\n        this.getLerngruppen();\r\n        this.setState({\r\n            lerngruppen: this.state.lerngruppen,\r\n            //showCustomerForm: false\r\n        });\r\n    }\r\n\r\n    /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n    componentDidMount() {\r\n        this.getLerngruppen();\r\n    }\r\n\r\n    render() {\r\n        const { classes, currentPerson } = this.props;\r\n        const { lerngruppen, personID, expandedLerngruppeID, loadingInProgress, error }  = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Grid item >\r\n                        <Typography>\r\n                            <h1>Lerngruppen</h1>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    lerngruppen.map(lerngruppe =>\r\n                    <GruppenListeEintrag key={lerngruppe.getID()} lerngruppe={lerngruppe} currentPerson={currentPerson} expandedState={expandedLerngruppeID === lerngruppe.getID()}\r\n                      onExpandedStateChange={this.onExpandedStateChange}\r\n                      onTeilnahmeGruppeDeleted={this.lerngruppeVerlassen}\r\n                    />)\r\n                }\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Lerngruppen konnten nicht geladen werden!`} onReload={this.getLerngruppen} />\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nGruppenListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default withRouter(withStyles(styles)(GruppenListe));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\layout\\Header.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\About.js",["221"],"import React from 'react'\r\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1)\r\n  },\r\n  content: {\r\n    margin: theme.spacing(1),\r\n  }\r\n}));\r\n\r\n/**\r\n * Shows the about page with the impressum\r\n */\r\n\r\n\r\nfunction About() {\r\n\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <Paper elevation={0} className={classes.root}>\r\n        <div className={classes.content}>\r\n          <Typography variant='h6'>\r\n            App zum Auffinden von Lernpartnern\r\n          </Typography>\r\n          <Typography variant='body2'>\r\n            © Hochschule der Medien 2020, all rights reserved.\r\n          </Typography>\r\n        </div>\r\n      </Paper>\r\n    )\r\n  }\r\n  \r\n  export default About;","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\SignIn.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernpartnerAPI.js",["222"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LoadingProgress.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\RegistrierungForm.js",["223","224"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    } from '@material-ui/core';\r\n\r\nimport { LernpartnerAPI } from '../../api';\r\nimport { withRouter } from 'react-router-dom';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n/** \r\n * Renders a landing page for users who are not signed in. Provides a sign in button \r\n * for using an existing google account to sign in. The component uses firebase to \r\n * do redirect based signin process.\r\n * \r\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\r\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\r\n * \r\n */\r\nclass RegistrierungForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Init the state\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            vorname: null,\r\n            vornameValidationFailed: false,\r\n            vornameEdited: false,\r\n\r\n            alter: null,\r\n            alterValidationFailed: false,\r\n            alterEdited: false,\r\n\r\n            geschlecht: null,\r\n            geschlechtValidationFailed: false,\r\n            geschlechtEdited: false,\r\n\r\n            semester: null,\r\n            semesterValidationFailed: false,\r\n            semesterEdited: false,\r\n\r\n            studiengang: null,\r\n            studiengangValidationFailed: false,\r\n            studiengangEdited: false,\r\n\r\n            lerngruppe: null,\r\n            lerngruppeValidationFailed: false,\r\n            lerngruppeEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false,\r\n            \r\n            \r\n        };\r\n        // save this state for canceling\r\n        this.baseState = this.state;\r\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\r\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\r\n        }\r\n    \r\n\r\n    /** Updates the person */\r\n    registrieren = () => {\r\n        let person = this.props.currentPerson;\r\n        person.name = this.state.name\r\n        person.vorname = this.state.vorname\r\n        person.semester = this.state.semester\r\n        person.studiengang = this.state.studiengang\r\n        person.alter = this.state.alter\r\n        person.geschlecht = this.state.geschlecht\r\n        person.lerngruppe = this.state.lerngruppe\r\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\r\n          this.state.lerngruppe).then(person => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(person); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator \r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\t/** \r\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\r\n\t \r\n\thandleSignInButtonClicked = () => {\r\n\t\tthis.props.onSignIn();\r\n\t}\r\n    */\r\n   /** Handles value changes of the forms textfields and validates them */\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n        error = true;\r\n        }\r\n\r\n        this.setState({\r\n        [event.target.id]: event.target.value,\r\n        [event.target.id + 'ValidationFailed']: error,\r\n        [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Setzen der Werte aus der Validierung\r\n    setStateValueChange(event, error) {\r\n      this.setState({\r\n          [event.target.id]: event.target.value,\r\n          [event.target.id + 'ValidationFailed']: error,\r\n          [event.target.id + 'Edited']: true\r\n      });\r\n  }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n    handleChangeStudiengang(event) {\r\n      this.setState({studiengang: event.target.value});\r\n    }\r\n\r\n    handleChangeLerngruppe(event) {\r\n      this.setState({lerngruppe: event.target.value});\r\n    }\r\n\r\n  \r\n\t/** Renders the sign in page, if user objext is null */\r\n\t/** Renders the component */\r\n    render() {\r\n        const { classes, show, currentPerson, } = this.props;\r\n        const { name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\r\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\r\n          updatingInProgress, updatingError} = this.state;\r\n    \r\n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\r\n        let header = 'Bitte gib deine Daten ein:';\r\n    \r\n        return (\r\n            show ?\r\n            <Dialog open={show}>\r\n              <DialogTitle id='form-dialog-title'>{title}\r\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  {header}\r\n                </DialogContentText>\r\n                <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\r\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname} \r\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed} \r\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\r\n                  \r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \r\n                    onChange={this.numberValueChange} error={semesterValidationFailed} \r\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \r\n                    \r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Studiengang</InputLabel>\r\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\r\n                                <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\r\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\r\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\r\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\r\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\r\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\r\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\r\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\r\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\r\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\r\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\r\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\r\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\r\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\r\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\r\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   \r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \r\n                    onChange={this.numberValueChange} error={alterValidationFailed} \r\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \r\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \r\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \r\n                  \r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\r\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\r\n                                <MenuItem value='1'>Ja!</MenuItem>\r\n                                <MenuItem value='0'>Nein!</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                </form>\r\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                {\r\n\r\n                  <ContextErrorMessage error={updatingError}\r\n                      contextErrorMsg={`Du konntest leider nicht registriert werden :/`}\r\n                      onReload={this.registrieren} />\r\n\r\n                }\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                </Button>\r\n                {\r\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\r\n                          onClick={this.registrieren} color='primary'>\r\n                          Jetzt registrieren\r\n                    </Button>\r\n                }\r\n              </DialogActions>\r\n            </Dialog>\r\n            : null\r\n        );\r\n      }\r\n    \r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\tmargin: theme.spacing(2)\r\n\t}\r\n});\r\n\r\n/** PropTypes */\r\nRegistrierungForm.propTypes = {\r\n\t/** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n\t/** \r\n\t * Handler function, which is called if the user wants to sign in.\r\n\t */\r\n  \r\n\tonSignIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(RegistrierungForm));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LernfaecherForm.js",["225","226"],"import React, { Component } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from 'react-router-dom';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport { LernpartnerAPI } from '../../api';\r\nimport VorschlagListe from '../VorschlagListe';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n  \r\nclass LernfaecherForm extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n\r\n    // initiiere einen leeren state\r\n    this.state = {\r\n        profil: null,\r\n        lernfaecher: [],\r\n        lernfach: null,\r\n        showVorschlagListe: false,\r\n        loadingInProgress: false,\r\n        error: null\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({lernfach: event.target.value});\r\n    \r\n  }\r\n\r\n  getProfil = () => {\r\n    LernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\r\n    .then(profilBO =>\r\n        this.setState({\r\n          profil: profilBO,\r\n          lernfaecher: profilBO.lernfaecher,\r\n          loadingInProgress: false,\r\n          error: null,\r\n        }))\r\n        .catch(e =>\r\n            this.setState({\r\n              profil: null,\r\n              lernfaecher: null,\r\n              loadingInProgress: false,\r\n              error: e,\r\n            }));\r\n        this.setState({\r\n          loadingInProgress: true,\r\n          error: null\r\n        });\r\n  }\r\n\r\n  getLernfaecher = () => {\r\n    LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\r\n    .then(lernfaecherBOs =>\r\n      this.setState({\r\n            lernfaecher: lernfaecherBOs,\r\n            lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung),\r\n            loadingInProgress: false,\r\n            error: null\r\n      }))\r\n      .catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          lernfaecher: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  //Handles the onClick event of the show profil button\r\n  bestaetigenButtonClicked = (event) => {\r\n    this.setState({\r\n      showVorschlagListe: true\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getLernfaecher();\r\n  }\r\n\r\n  render() {\r\n    const { classes, currentPerson } = this.props;\r\n    const { profil, lernfaecher, lernfach, showVorschlagListe, loadingInProgress, error } = this.state;\r\n    \r\n    console.log(profil)\r\n    console.log(showVorschlagListe)\r\n    return (\r\n      <div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel htmlFor=\"age-native-simple\">Lernfach auswählen:</InputLabel>\r\n          <Select\r\n            native\r\n            value= {lernfach}\r\n            onChange={this.handleChange}\r\n          >\r\n           {lernfaecher.map(lernfach =>\r\n            <option key={lernfach.id} value={lernfach.id}>{lernfach.bezeichnung}</option>\r\n          )};\r\n           \r\n          </Select>\r\n        </FormControl>\r\n        <Button color=\"primary\" onClick= {this.bestaetigenButtonClicked}>Bestätigen</Button>\r\n        <VorschlagListe show={showVorschlagListe} currentPerson={currentPerson} lernfach={lernfach} />\r\n        <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n        <ContextErrorMessage error={error} contextErrorMsg = {'Hier ist ein Fehler aufgetreten'} onReload={this.getProfil} />\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default withRouter(withStyles(useStyles)(LernfaecherForm));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListeEintrag.js",["227","228","229"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport Nachricht from './Nachricht';\r\n//import KonversationListe from './KonversationListe';\r\n\r\n\r\n/** \r\n * \r\n * Es wird ein einzelne Konversationen von einer Person dargestellt\r\n * \r\n * Hierfür wird der Name der Konversation angezeigt\r\n * \r\n */\r\n\r\nclass KonversationListeEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            konversation: this.props.konversation,\r\n            showKonversation: false,\r\n            showChatVerlassenForm: false, \r\n            //showProfil: false,\r\n        };\r\n    }\r\n\r\n\r\n    \r\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\ncomponentDidMount() {\r\n  \r\n}\r\n\r\n/** Handles onChange events of the underlying ExpansionPanel */\r\nexpansionPanelStateChanged = () => {\r\n  this.props.onExpandedStateChange(this.props.konversation);\r\n  }\r\n\r\n//Handles the onClick event of the show Konversation button\r\nshowKonversationButtonClicked = (event) => {\r\n  this.setState({\r\n    showKonversation: true\r\n  });\r\n}\r\n\r\n//Handles the onClick event of the show Konversation button\r\nverlassenButtonClicked = (event) => {\r\n  this.setState({\r\n    showChatVerlassenForm: true\r\n  });\r\n}\r\n\r\nrender() {\r\n  const { classes, expandedState, currentPerson} = this.props;\r\n  const { konversation, showKonversation, showChatVerlassenForm } = this.state;\r\n  console.log(konversation)\r\n  return(\r\n    <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`konversation${konversation.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Typography variant='body1'>\r\n                  {konversation.getname()}\r\n              </Typography>\r\n            </Grid>\r\n              <Typography variant='body1'>\r\n                  Optionen\r\n              </Typography>\r\n              </AccordionSummary>\r\n                <AccordionDetails>\r\n                <ButtonGroup variant='text' size='small'>\r\n                        <Button color='primary' onClick={this.showProfilButtonClicked}>\r\n                          Chat ansehen\r\n                        </Button>\r\n                        <Button color='secondary' onClick={this.sendAnfrageButtonClicked}>\r\n                          Chat verlassen\r\n                        </Button>\r\n                      </ButtonGroup>\r\n              </AccordionDetails>\r\n              </Accordion>\r\n              <Nachricht show={showKonversation} konversationid = {konversation.getID()}/> \r\n            </div>\r\n    \r\n  )\r\n  \r\n}\r\n  \r\n    \r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  customerFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nKonversationListeEintrag.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(KonversationListeEintrag);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListeEintrag.js",["230","231","232","233","234","235","236","237","238"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport Profil from './Profil';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import InputLabel from '@material-ui/core/InputLabel';\r\n//import MenuItem from '@material-ui/core/MenuItem';\r\n//import FormControl from '@material-ui/core/FormControl';\r\n//import Select from '@material-ui/core/Select';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport GruppeVerlassenDialog from './dialogs/GruppeVerlassenDialog';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\n\r\n/**\r\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\r\n *\r\n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\r\n *\r\n */\r\n\r\nclass GruppenListeEintrag extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            lerngruppe: props.lerngruppe,\r\n            gruppeName: this.props.lerngruppe.name,\r\n            teilnahmeGruppe: null,\r\n            profilID: this.props.lerngruppe.gruppenprofil,\r\n            showProfil: false,\r\n            showLerngruppeVerlassenDialog: false,\r\n            //showTeilnehmer: false,\r\n            //showNachrichtenListe: false,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    /** Handles onChange events of the underlying ExpansionPanel */\r\n    expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.lerngruppe);\r\n    }\r\n\r\n    /** Handles the onClick event of the Profil ansehen button */\r\n    showProfilButtonClicked = (event) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showProfil: true\r\n        });\r\n    }\r\n\r\n        /** TeilnahmeGruppe holen fürs Verlassen */\r\n  getTeilnahmeGruppe = () => {\r\n    LernpartnerAPI.getAPI().getTeilnahmeGruppeByPersonByGruppe(this.props.currentPerson.getID(), this.props.lerngruppe.id)\r\n    .then(teilnahmeGruppeBO => {\r\n      this.setState({\r\n        teilnahmeGruppe: teilnahmeGruppeBO,              // disable loading indicator                 // no error message\r\n      });\r\n    }).catch(e =>\r\n      this.setState({\r\n        teilnahmeGruppe: null,              // disable loading indicator                     // show error message\r\n      })\r\n    );\r\n    }\r\n\r\n    /** Handles the onClick event of the delete customer button */\r\n    verlasseLerngruppeButtonClicked = (event) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showLerngruppeVerlassenDialog: true\r\n        });\r\n    }\r\n\r\n    /** Handles the onClose event of the CustomerDeleteDialog */\r\n    verlasseLerngruppeDialogClosed = (teilnahmeGruppe) => {\r\n        // if customer is not null, delete it\r\n        if (teilnahmeGruppe) {\r\n            this.props.onTeilnahmeGruppeDeleted(teilnahmeGruppe);\r\n        };\r\n\r\n        // Don´t show the dialog\r\n        this.setState({\r\n            showLerngruppeVerlassenDialog: false\r\n        });\r\n    }\r\n\r\n     /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n   componentDidMount() {\r\n       this.getTeilnahmeGruppe();\r\n   }\r\n\r\n    render(){\r\n\r\n          const { classes, expandedState, currentPerson } = this.props;\r\n          const { lerngruppe, gruppeName, profilID, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog } = this.state;\r\n\r\n          return (\r\n            <div>\r\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  id={`lerngruppe${lerngruppe.getID()}accountpanel-header`}\r\n                >\r\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Typography variant='body1'>\r\n                        {lerngruppe.getname()}\r\n                    </Typography>\r\n                  </Grid>\r\n                    <Button style={{ width : 250, color: \"red\"}} color='secondary' onClick={this.verlasseLerngruppeButtonClicked}>\r\n                        Gruppe verlassen\r\n                    </Button>\r\n                  </AccordionSummary>\r\n                 <AccordionDetails>\r\n                  <Profil user={lerngruppe}/>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <GruppeVerlassenDialog show={showLerngruppeVerlassenDialog} teilnahmeGruppe={teilnahmeGruppe} currentPerson={currentPerson} onClose={this.verlasseLerngruppeDialogClosed}/>\r\n            </div>\r\n          );\r\n        }\r\n}\r\n\r\n/** PropTypes */\r\nGruppenListeEintrag.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  vorschlag: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  expandedState: PropTypes.bool.isRequired,\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  onTeilnahmeGruppeDeleted: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default (GruppenListeEintrag);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\MeinProfilForm.js",["239","240","241","242","243","244"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    } from '@material-ui/core';\r\n\r\nimport { LernpartnerAPI } from '../../api';\r\nimport { withRouter } from 'react-router-dom';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\r\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\r\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\r\n *\r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n */\r\n\r\nclass MeinProfilForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initiiere den state\r\n        this.state = {\r\n            name: null,\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            vorname: null,\r\n            vornameValidationFailed: false,\r\n            vornameEdited: false,\r\n\r\n            semester: null,\r\n            semesterValidationFailed: false,\r\n            semesterEdited: false,\r\n\r\n            studiengang: null,\r\n            studiengangValidationFailed: false,\r\n            studiengangEdited: false,\r\n\r\n            lerngruppe: null,\r\n            lerngruppeValidationFailed: false,\r\n            lerngruppeEdited: false,\r\n\r\n            alter: null,\r\n            alterValidationFailed: false,\r\n            alterEdited: false,\r\n\r\n            geschlecht: null,\r\n            geschlechtValidationFailed: false,\r\n            geschlechtEdited: false,\r\n\r\n            tageszeiten: null,\r\n            tageszeitenValidationFailed: false,\r\n            tageszeitenEdited: false,\r\n\r\n            tage: null,\r\n            tageValidationFailed: false,\r\n            tageEdited: false,\r\n\r\n            frequenz: null,\r\n            frequenzValidationFailed: false,\r\n            frequenzEdited: false,\r\n\r\n            lernart: null,\r\n            lernartValidationFailed: false,\r\n            lernartEdited: false,\r\n\r\n            gruppengroesse: null,\r\n            gruppengroesseValidationFailed: false,\r\n            gruppengroesseEdited: false,\r\n\r\n            lernort: null,\r\n            lernortValidationFailed: false,\r\n            lernortEdited: false,\r\n\r\n            lernfach: null,\r\n            lernfaecherValidationFailed: false,\r\n            lernfaecherEdited: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false,\r\n\r\n            profil: this.props.currentProfil,\r\n            test: this.props.lernfaechergesamt,\r\n            gruppe: 0,\r\n\r\n        };\r\n        // State speichern falls cancel\r\n        this.baseState = this.state;\r\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\r\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\r\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\r\n        this.handleChangeTage = this.handleChangeTage.bind(this);\r\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\r\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\r\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\r\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\r\n        this.handleChangeLernfaecher = this.handleChangeLernfaecher.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Updates the person */\r\n    updatenPerson = () => {\r\n        let person = this.props.currentPerson;\r\n        person.name = this.state.name\r\n        person.vorname = this.state.vorname\r\n        person.semester = this.state.semester\r\n        person.studiengang = this.state.studiengang\r\n        person.alter = this.state.alter\r\n        person.geschlecht = this.state.geschlecht\r\n        person.lerngruppe = this.state.lerngruppe\r\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\r\n          this.state.lerngruppe).then(person => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(person); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator\r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\r\n  /** Updates the person */\r\n  updatenProfil = () => {\r\n    let profil = this.state.profil;\r\n    LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\r\n    ).then(profil => {\r\n        // Backend call sucessfull\r\n        // reinit the dialogs state for a new empty customer\r\n        this.setState(this.baseState);\r\n        this.props.onClose(profil); // call the parent with the customer object from backend\r\n    }).catch(e =>\r\n        this.setState({\r\n            updatingInProgress: false,    // disable loading indicator\r\n            updatingError: e              // show error message\r\n        })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n        updatingInProgress: true,       // show loading indicator\r\n        updatingError: null             // disable error message\r\n  });\r\n}\r\n\r\n  /** Updates the person */\r\n    updatenLernvorlieben = () => {\r\n        let lernvorlieben = this.props.lernvorlieben;\r\n        lernvorlieben.tageszeiten = this.state.tageszeiten\r\n        lernvorlieben.tage = this.state.tage\r\n        lernvorlieben.frequenz = this.state.frequenz\r\n        lernvorlieben.lernart = this.state.lernart\r\n        lernvorlieben.gruppengroesse = this.state.gruppengroesse\r\n        lernvorlieben.lernort = this.state.lernort\r\n\r\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\r\n        .then(lernvorlieben => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(lernvorlieben); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator\r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\r\n\r\n\t/**\r\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\r\n\r\n\thandleSignInButtonClicked = () => {\r\n\t\tthis.props.onSignIn();\r\n\t}\r\n    */\r\n   /** Handles value changes of the forms textfields and validates them */\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n        error = true;\r\n        }\r\n\r\n        this.setState({\r\n        [event.target.id]: event.target.value,\r\n        [event.target.id + 'ValidationFailed']: error,\r\n        [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Setzen der Werte aus der Validierung\r\n    setStateValueChange(event, error) {\r\n      this.setState({\r\n          [event.target.id]: event.target.value,\r\n          [event.target.id + 'ValidationFailed']: error,\r\n          [event.target.id + 'Edited']: true\r\n      });\r\n  }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n      handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleChangeStudiengang(event) {\r\n      this.setState({studiengang: event.target.value});\r\n    }\r\n\r\n    handleChangeLerngruppe(event) {\r\n      this.setState({lerngruppe: event.target.value});\r\n    }\r\n\r\n    handleChangeTageszeiten(event) {\r\n      this.setState({tageszeiten: event.target.value});\r\n    }\r\n\r\n    handleChangeTage(event) {\r\n      this.setState({tage: event.target.value});\r\n    }\r\n\r\n    handleChangeFrequenz(event) {\r\n      this.setState({frequenz: event.target.value});\r\n    }\r\n\r\n    handleChangeLernart(event) {\r\n      this.setState({lernart: event.target.value});\r\n    }\r\n\r\n    handleChangeGruppengroesse(event) {\r\n      this.setState({gruppengroesse: event.target.value});\r\n    }\r\n\r\n    handleChangeLernort(event) {\r\n      this.setState({lernort: event.target.value});\r\n    }\r\n\r\n    handleChangeLernfaecher(event) {\r\n      this.setState({lernfach: event.target.value});\r\n    }\r\n\r\n\r\n\r\n\t/** Renders the sign in page, if user objext is null */\r\n\t/** Renders the component */\r\n    render() {\r\n        const { classes, show, currentPerson, lernvorlieben} = this.props;\r\n        const { profil, name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\r\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, tageszeiten,\r\n          tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\r\n          lernort, lernortValidationFailed, lernfach, test, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\r\n\r\n        console.log(test)\r\n        \r\n        let title = 'Profil bearbeiten';\r\n        let header = 'Bitte gib deine neuen Daten ein:';\r\n\r\n        return (\r\n            show ?\r\n            <Dialog open={show}>\r\n              <DialogTitle id='form-dialog-title'>{title}\r\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  {header}\r\n                </DialogContentText>\r\n                <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\r\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname}\r\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed}\r\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\r\n                    onChange={this.numberValueChange} error={semesterValidationFailed}\r\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} />\r\n\r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Studiengang</InputLabel>\r\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\r\n                             <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\r\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\r\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\r\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\r\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\r\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\r\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\r\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\r\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\r\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\r\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\r\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\r\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\r\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\r\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\r\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter}\r\n                    onChange={this.numberValueChange} error={alterValidationFailed}\r\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht}\r\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed}\r\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} />\r\n\r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\r\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\r\n                                <MenuItem value='1'>Ja!</MenuItem>\r\n                                <MenuItem value='0'>Nein!</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                  <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel >Welche Tageszeit präferierst du? </InputLabel>\r\n                             <Select required error={tageszeitenValidationFailed} value={tageszeiten}\r\n                             onChange={this.handleChangeTageszeiten}>\r\n                                <MenuItem value='1'>Morgens</MenuItem>\r\n                                <MenuItem value='2'>Mittags</MenuItem>\r\n                                <MenuItem value='3'>Abends</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\r\n                             <Select required error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\r\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\r\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\r\n                             <Select required error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\r\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\r\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\r\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/> \r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\r\n                             <Select required error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\r\n                                <MenuItem value='1'>Visuell</MenuItem>\r\n                                <MenuItem value='2'>Auditiv</MenuItem>\r\n                                <MenuItem value='3'>Motorisch</MenuItem>\r\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\r\n                             <Select required error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\r\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\r\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\r\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\r\n                             <Select required error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\r\n                                <MenuItem value='1'>Remote</MenuItem>\r\n                                <MenuItem value='2'>Hochschule</MenuItem>\r\n                                <MenuItem value='3'>Bibliothek</MenuItem>\r\n                                <MenuItem value='4'>Cafe</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   <br/>\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Was willst du lernen?</InputLabel>\r\n                             \r\n                            <Select\r\n                              native\r\n                              value= {lernfach}\r\n                              onChange={this.handleChangeLernfaecher}\r\n                            >\r\n                            {test.map(lernfach =>\r\n                              <option key={lernfach.id} value={lernfach.id}>{lernfach.bezeichnung}</option>\r\n                            )};\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n\r\n\r\n                </form>\r\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                {\r\n\r\n                  <ContextErrorMessage error={updatingError}\r\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\r\n                      onReload={this.updatenPerson} />\r\n\r\n                }\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                </Button>\r\n                {\r\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\r\n                          onClick={ () => {this.updatenPerson(); this.updatenLernvorlieben();}} color='primary'>\r\n                          Änderungen abschließen\r\n                    </Button>\r\n                }\r\n              </DialogActions>\r\n            </Dialog>\r\n            : null\r\n        );\r\n      }\r\n\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n    margin: theme.spacing(2)\r\n    \r\n  }\r\n  \r\n  \r\n});\r\n\r\n/** PropTypes */\r\nMeinProfilForm.propTypes = {\r\n\t/** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n\t/**\r\n\t * Handler function, which is called if the user wants to sign in.\r\n\t */\r\n\r\n\tonSignIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(MeinProfilForm);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ProfileDropDown.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\PersonBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\ProfilBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LerngruppeBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\VorschlagBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernvorliebenBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NachrichtBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeChatBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\KonversationBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeGruppeBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernfachBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\VorschlagListe.js",["245","246","247","248","249"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport VorschlagListeEintrag from './VorschlagListeEintrag';\r\n//import SaveIcon from '@material-ui/icons/Save';\r\n//import Table from '@material-ui/core/Table';\r\n//import TableBody from '@material-ui/core/TableBody';\r\n//import TableCell from '@material-ui/core/TableCell';\r\n//import TableContainer from '@material-ui/core/TableContainer';\r\n//import TableHead from '@material-ui/core/TableHead';\r\n//import TableRow from '@material-ui/core/TableRow';\r\n//import Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\n/**\r\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\r\n * \r\n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\r\n * \r\n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\r\n * \r\n */\r\n\r\n\r\nclass VorschlagListe extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // console.log(props);\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandVorschlag) {\r\n        expandedID = this.props.location.expandVorschlag.getID();\r\n        }\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            vorschlaege : [],\r\n            //currentPersonName: null,\r\n            error: null,\r\n            loadingInProgress: false, \r\n            expandedVorschlagID: expandedID,\r\n        };\r\n    }\r\n\r\n\r\n    // API Anbindung um Vorschläge des Students vom Backend zu bekommen \r\n    getVorschlaege = () => {\r\n            LernpartnerAPI.getAPI().getVorschlaegeByPersonByLernfach(this.props.currentPerson.id, this.props.lernfach)\r\n            .then(vorschlagBOs =>\r\n                this.setState({\r\n                    vorschlaege: vorschlagBOs,\r\n                    error: null,\r\n                    loadingInProgress: false,\r\n                })).catch(e =>\r\n                    this.setState({\r\n                        vorschlaege: [],\r\n                        error: e,\r\n                        loadingInProgress: false,\r\n                    }));\r\n            this.setState({\r\n                error: null,\r\n                loadingInProgress: true,\r\n                loadingVorschlaegeError: null\r\n            });\r\n    }\r\n\r\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\n    componentDidMount() {\r\n        \r\n\r\n    }\r\n    \r\n    /** \r\n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \r\n     * the VorschlagListeEintrag of the given VorschlagBO.\r\n     * \r\n     * @param {vorschlag} VorschlagBO of the VorschlagListeEintrag to be toggeled\r\n     */\r\n    onExpandedStateChange = vorschlag => {\r\n        // console.log(vorschlagID);\r\n        // Set expandend Vorschlag Eintrag to null by default\r\n        let newID = null;\r\n\r\n        // If same vorschlag entry is clicked, collapse it else expand a new one\r\n        if (vorschlag.getID() !== this.state.expandedVorschlagID) {\r\n        // Expand the customer entry with customerID\r\n        newID = vorschlag.getID();\r\n        }\r\n        // console.log(newID);\r\n        this.setState({\r\n        expandedVorschlagID: newID,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { show, classes, lernfach } = this.props;\r\n        const { vorschlaege, expandedVorschlagID, error, loadingInProgress}  = this.state;\r\n        console.log(lernfach)\r\n        return (\r\n          show ?\r\n          <div className={classes.root}>\r\n            <h1>Hier sind alle Matches für dein ausgewähltes Lernfach:</h1>\r\n            <Button color=\"primary\" onClick= {this.getVorschlaege}>Matches generieren</Button>\r\n            { \r\n              // Show the list of VorschlagListeEintrag components\r\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\r\n  \r\n              vorschlaege.map(vorschlag =>\r\n                <VorschlagListeEintrag key={vorschlag.getID()} vorschlag={vorschlag} expandedState={expandedVorschlagID === vorschlag.getID()}\r\n                  onExpandedStateChange={this.onExpandedStateChange}\r\n                />)\r\n            }\r\n            <LoadingProgress show={loadingInProgress} />\r\n            <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Vorschläge konnten nicht geladen werden!`} onReload={this.getVorschlaege} />\r\n          </div>\r\n          : null\r\n        );\r\n      }\r\n    }\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    customerFilter: {\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(1),\r\n    }\r\n  });\r\n\r\n/** PropTypes */\r\nVorschlagListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default withRouter(withStyles(styles)(VorschlagListe));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\index.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Nachricht.js",["250"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NamedBusinessObject.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\GruppeVerlassenDialog.js",["251"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport LernpartnerAPI from '../../api/LernpartnerAPI'\r\n\r\n\r\nclass GruppeVerlassenDialog extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      verlassenInProgress: false,\r\n      verlassenError: null\r\n    };\r\n  }\r\n\r\n  /** Gruppe verlassen */\r\n  verlasseGruppe = () => {\r\n    LernpartnerAPI.getAPI().deleteTeilnahmeGruppe(this.props.teilnahmeGruppe.getID())\r\n    .then(teilnahmeGruppe => {\r\n      this.setState({\r\n        verlassenInProgress: false,              // disable loading indicator\r\n        verlassenError: null                     // no error message\r\n      });\r\n      this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\r\n    }).catch(e =>\r\n      this.setState({\r\n        verlassenInProgress: false,              // disable loading indicator\r\n        verlassenError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      verlassenInProgress: true,                 // show loading indicator\r\n      verlassenError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // console.log(event);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, teilnahmeGruppe, lerngruppeID, show } = this.props;\r\n    const { verlassenInProgress, verlassenError } = this.state;\r\n    //console.log(verlassenInProgress)\r\n    console.log(teilnahmeGruppe)\r\n    //console.log(teilnahmeGruppe.id)\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose}>\r\n          <DialogTitle id='delete-dialog-title'>Gruppe verlassen\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              <p>Möchtest du wirklich die Gruppe verlassen?</p>\r\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du die Gruppe verlässt, verlässt du auch automatisch den Chat!!!</p>\r\n            </DialogContentText>\r\n            <LoadingProgress show={verlassenInProgress} />\r\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Die Gruppe konnte nicht verlassen werden.`}\r\n              onReload={this.verlasseGruppe} />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Abbrechen\r\n            </Button>\r\n            <Button variant='contained' onClick={this.verlasseGruppe} color='primary'>\r\n              Verlassen\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nGruppeVerlassenDialog.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The CustomerBO to be deleted */\r\n  teilnahmeGruppe: PropTypes.object.isRequired,\r\n  /** If true, the dialog is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(CustomerBO customer);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(GruppeVerlassenDialog);\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\BusinessObject.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\VorschlagListeEintrag.js",["252","253","254","255"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\n//import Profil from './Profil';\r\n//import { withStyles } from '@material-ui/core';\r\n//import { withRouter } from 'react-router-dom';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import InputLabel from '@material-ui/core/InputLabel';\r\n//import MenuItem from '@material-ui/core/MenuItem';\r\n//import FormControl from '@material-ui/core/FormControl';\r\n//import Select from '@material-ui/core/Select';\r\n//import ContextErrorMessage from './dialogs/ContextErrorMessage';\r\n//import LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/**\r\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\r\n * \r\n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\r\n * \r\n */\r\n\r\nclass VorschlagListeEintrag extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            vorschlag: props.vorschlag,\r\n            //match: null,\r\n            profil: null,\r\n            person: null,\r\n            profilID: null,\r\n            personName: null,\r\n            personVorname: null,\r\n            showProfil: false,\r\n            showAnfrageForm: false,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    /** Handles onChange events of the underlying ExpansionPanel */\r\n    expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.vorschlag);\r\n    }\r\n    \r\n    //Handles the onClick event of the show profil button\r\n    showProfilButtonClicked = (event) => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showProfil: true\r\n      });\r\n    }\r\n\r\n    /** Handles the onClick event of the send Anfrage button */\r\n    sendAnfrageButtonClicked = (event) => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showAnfrageForm: true\r\n      });\r\n    }\r\n\r\n    // API Anbindung um Profil vom Backend zu bekommen \r\n    getPerson = () => {\r\n      LernpartnerAPI.getAPI().getPersonByProfil(this.props.vorschlag.getmatch_profil_id())\r\n      .then(personBO =>\r\n          this.setState({\r\n            person: personBO,\r\n            personName: personBO.name,\r\n            personVorname: personBO.vorname,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n                person: null,\r\n                personName: null,\r\n                personVorname: null,\r\n                loadingInProgress: false,\r\n                error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n \r\n    componentDidMount() {\r\n      // load initial balance\r\n      this.getPerson();\r\n    }\r\n  \r\n    /** Lifecycle method, which is called when the component was updated */\r\n    componentDidUpdate(prevProps) {\r\n      if ((this.props.show) && (this.props.show !== prevProps.show)) {\r\n        this.getPerson();\r\n      }\r\n    }\r\n  \r\n    render(){\r\n\r\n          const { classes, expandedState } = this.props;\r\n          const { person, vorschlag, profil, profilID, personName, personVorname, showProfil, showAnfrageForm } = this.state;\r\n          console.log(person)\r\n          return (\r\n            <div>\r\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  id={`vorschlag${vorschlag.getID()}accountpanel-header`}\r\n                >\r\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Grid item>\r\n                    <Typography variant='body1' className={classes.heading}>{personVorname} {personName}\r\n                      </Typography>\r\n                    <Typography variant='body1' className={classes.heading}>Matchquote: {vorschlag.getmatch_quote()}%\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                    \r\n                    </Grid>\r\n                    <Grid item xs />\r\n                    <Grid item>\r\n                      <Typography variant='body2' color={'textSecondary'}>Mehr sehen</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                      <ButtonGroup variant='text' size='small'>\r\n                        <Button color='primary' onClick={this.showProfilButtonClicked}>\r\n                          Profil ansehen\r\n                        </Button>\r\n                        <Button color='secondary' onClick={this.sendAnfrageButtonClicked}>\r\n                          Kontaktanfrage\r\n                        </Button>\r\n                      </ButtonGroup>\r\n                    </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          );\r\n        }\r\n}\r\n\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n  formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      textAlign: \"left\"\r\n  },\r\n  button: {\r\n      margin: theme.spacing(1),\r\n      },\r\n  laden: {\r\n    padding: 0\r\n  },\r\n  breite: {\r\n    width: 220\r\n  }\r\n  });\r\n\r\n/** PropTypes */\r\nVorschlagListeEintrag.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  vorschlag: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withStyles(styles)(VorschlagListeEintrag);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\NachrichtenListeEintrag.js",["256","257","258","259","260"],{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":1,"column":17,"nodeType":"267","messageId":"268","endLine":1,"endColumn":26},{"ruleId":"265","severity":1,"message":"269","line":13,"column":8,"nodeType":"267","messageId":"268","endLine":13,"endColumn":25},{"ruleId":"265","severity":1,"message":"270","line":19,"column":8,"nodeType":"267","messageId":"268","endLine":19,"endColumn":14},{"ruleId":"265","severity":1,"message":"271","line":4,"column":22,"nodeType":"267","messageId":"268","endLine":4,"endColumn":26},{"ruleId":"265","severity":1,"message":"272","line":4,"column":28,"nodeType":"267","messageId":"268","endLine":4,"endColumn":38},{"ruleId":"265","severity":1,"message":"273","line":3,"column":34,"nodeType":"267","messageId":"268","endLine":3,"endColumn":48},{"ruleId":"265","severity":1,"message":"274","line":3,"column":50,"nodeType":"267","messageId":"268","endLine":3,"endColumn":55},{"ruleId":"265","severity":1,"message":"275","line":3,"column":57,"nodeType":"267","messageId":"268","endLine":3,"endColumn":66},{"ruleId":"265","severity":1,"message":"276","line":3,"column":68,"nodeType":"267","messageId":"268","endLine":3,"endColumn":77},{"ruleId":"265","severity":1,"message":"277","line":3,"column":79,"nodeType":"267","messageId":"268","endLine":3,"endColumn":84},{"ruleId":"265","severity":1,"message":"278","line":3,"column":86,"nodeType":"267","messageId":"268","endLine":3,"endColumn":94},{"ruleId":"265","severity":1,"message":"279","line":3,"column":96,"nodeType":"267","messageId":"268","endLine":3,"endColumn":105},{"ruleId":"265","severity":1,"message":"280","line":3,"column":107,"nodeType":"267","messageId":"268","endLine":3,"endColumn":111},{"ruleId":"265","severity":1,"message":"271","line":3,"column":113,"nodeType":"267","messageId":"268","endLine":3,"endColumn":117},{"ruleId":"265","severity":1,"message":"281","line":9,"column":8,"nodeType":"267","messageId":"268","endLine":9,"endColumn":27},{"ruleId":"265","severity":1,"message":"282","line":10,"column":8,"nodeType":"267","messageId":"268","endLine":10,"endColumn":23},{"ruleId":"265","severity":1,"message":"283","line":237,"column":41,"nodeType":"267","messageId":"268","endLine":237,"endColumn":53},{"ruleId":"265","severity":1,"message":"284","line":237,"column":130,"nodeType":"267","messageId":"268","endLine":237,"endColumn":147},{"ruleId":"265","severity":1,"message":"285","line":237,"column":149,"nodeType":"267","messageId":"268","endLine":237,"endColumn":157},{"ruleId":"265","severity":1,"message":"286","line":237,"column":178,"nodeType":"267","messageId":"268","endLine":237,"endColumn":199},{"ruleId":"265","severity":1,"message":"287","line":237,"column":282,"nodeType":"267","messageId":"268","endLine":237,"endColumn":299},{"ruleId":"265","severity":1,"message":"288","line":237,"column":301,"nodeType":"267","messageId":"268","endLine":237,"endColumn":306},{"ruleId":"265","severity":1,"message":"272","line":3,"column":22,"nodeType":"267","messageId":"268","endLine":3,"endColumn":32},{"ruleId":"265","severity":1,"message":"289","line":3,"column":34,"nodeType":"267","messageId":"268","endLine":3,"endColumn":40},{"ruleId":"265","severity":1,"message":"273","line":3,"column":42,"nodeType":"267","messageId":"268","endLine":3,"endColumn":56},{"ruleId":"265","severity":1,"message":"274","line":3,"column":58,"nodeType":"267","messageId":"268","endLine":3,"endColumn":63},{"ruleId":"265","severity":1,"message":"275","line":3,"column":65,"nodeType":"267","messageId":"268","endLine":3,"endColumn":74},{"ruleId":"265","severity":1,"message":"276","line":3,"column":76,"nodeType":"267","messageId":"268","endLine":3,"endColumn":85},{"ruleId":"265","severity":1,"message":"277","line":3,"column":87,"nodeType":"267","messageId":"268","endLine":3,"endColumn":92},{"ruleId":"265","severity":1,"message":"278","line":3,"column":94,"nodeType":"267","messageId":"268","endLine":3,"endColumn":102},{"ruleId":"265","severity":1,"message":"279","line":3,"column":104,"nodeType":"267","messageId":"268","endLine":3,"endColumn":113},{"ruleId":"265","severity":1,"message":"280","line":3,"column":115,"nodeType":"267","messageId":"268","endLine":3,"endColumn":119},{"ruleId":"265","severity":1,"message":"271","line":3,"column":121,"nodeType":"267","messageId":"268","endLine":3,"endColumn":125},{"ruleId":"265","severity":1,"message":"290","line":4,"column":10,"nodeType":"267","messageId":"268","endLine":4,"endColumn":20},{"ruleId":"265","severity":1,"message":"281","line":6,"column":8,"nodeType":"267","messageId":"268","endLine":6,"endColumn":27},{"ruleId":"265","severity":1,"message":"282","line":7,"column":8,"nodeType":"267","messageId":"268","endLine":7,"endColumn":23},{"ruleId":"291","severity":1,"message":"292","line":27,"column":13,"nodeType":"293","messageId":"294","endLine":27,"endColumn":19},{"ruleId":"265","severity":1,"message":"295","line":150,"column":22,"nodeType":"267","messageId":"268","endLine":150,"endColumn":26},{"ruleId":"265","severity":1,"message":"296","line":152,"column":19,"nodeType":"267","messageId":"268","endLine":152,"endColumn":25},{"ruleId":"265","severity":1,"message":"297","line":152,"column":27,"nodeType":"267","messageId":"268","endLine":152,"endColumn":40},{"ruleId":"265","severity":1,"message":"298","line":152,"column":89,"nodeType":"267","messageId":"268","endLine":152,"endColumn":103},{"ruleId":"265","severity":1,"message":"286","line":152,"column":113,"nodeType":"267","messageId":"268","endLine":152,"endColumn":134},{"ruleId":"265","severity":1,"message":"287","line":152,"column":136,"nodeType":"267","messageId":"268","endLine":152,"endColumn":153},{"ruleId":"265","severity":1,"message":"288","line":152,"column":155,"nodeType":"267","messageId":"268","endLine":152,"endColumn":160},{"ruleId":"265","severity":1,"message":"289","line":4,"column":22,"nodeType":"267","messageId":"268","endLine":4,"endColumn":28},{"ruleId":"265","severity":1,"message":"299","line":4,"column":30,"nodeType":"267","messageId":"268","endLine":4,"endColumn":39},{"ruleId":"265","severity":1,"message":"300","line":4,"column":41,"nodeType":"267","messageId":"268","endLine":4,"endColumn":55},{"ruleId":"265","severity":1,"message":"301","line":4,"column":57,"nodeType":"267","messageId":"268","endLine":4,"endColumn":67},{"ruleId":"265","severity":1,"message":"277","line":16,"column":8,"nodeType":"267","messageId":"268","endLine":16,"endColumn":13},{"ruleId":"265","severity":1,"message":"302","line":116,"column":30,"nodeType":"267","messageId":"268","endLine":116,"endColumn":38},{"ruleId":"265","severity":1,"message":"280","line":2,"column":41,"nodeType":"267","messageId":"268","endLine":2,"endColumn":45},{"ruleId":"303","severity":1,"message":"304","line":596,"column":9,"nodeType":"305","messageId":"294","endLine":603,"endColumn":10},{"ruleId":"265","severity":1,"message":"306","line":3,"column":123,"nodeType":"267","messageId":"268","endLine":3,"endColumn":127},{"ruleId":"265","severity":1,"message":"307","line":168,"column":32,"nodeType":"267","messageId":"268","endLine":168,"endColumn":45},{"ruleId":"265","severity":1,"message":"308","line":5,"column":8,"nodeType":"267","messageId":"268","endLine":5,"endColumn":22},{"ruleId":"265","severity":1,"message":"309","line":8,"column":8,"nodeType":"267","messageId":"268","endLine":8,"endColumn":20},{"ruleId":"265","severity":1,"message":"310","line":59,"column":11,"nodeType":"267","messageId":"268","endLine":59,"endColumn":18},{"ruleId":"265","severity":1,"message":"307","line":59,"column":35,"nodeType":"267","messageId":"268","endLine":59,"endColumn":48},{"ruleId":"265","severity":1,"message":"311","line":60,"column":43,"nodeType":"267","messageId":"268","endLine":60,"endColumn":64},{"ruleId":"265","severity":1,"message":"290","line":5,"column":10,"nodeType":"267","messageId":"268","endLine":5,"endColumn":20},{"ruleId":"265","severity":1,"message":"312","line":6,"column":10,"nodeType":"267","messageId":"268","endLine":6,"endColumn":20},{"ruleId":"265","severity":1,"message":"313","line":7,"column":18,"nodeType":"267","messageId":"268","endLine":7,"endColumn":29},{"ruleId":"265","severity":1,"message":"281","line":13,"column":8,"nodeType":"267","messageId":"268","endLine":13,"endColumn":27},{"ruleId":"265","severity":1,"message":"282","line":14,"column":8,"nodeType":"267","messageId":"268","endLine":14,"endColumn":23},{"ruleId":"265","severity":1,"message":"310","line":99,"column":19,"nodeType":"267","messageId":"268","endLine":99,"endColumn":26},{"ruleId":"265","severity":1,"message":"314","line":100,"column":31,"nodeType":"267","messageId":"268","endLine":100,"endColumn":41},{"ruleId":"265","severity":1,"message":"315","line":100,"column":43,"nodeType":"267","messageId":"268","endLine":100,"endColumn":51},{"ruleId":"265","severity":1,"message":"316","line":100,"column":70,"nodeType":"267","messageId":"268","endLine":100,"endColumn":80},{"ruleId":"265","severity":1,"message":"306","line":3,"column":123,"nodeType":"267","messageId":"268","endLine":3,"endColumn":127},{"ruleId":"265","severity":1,"message":"290","line":11,"column":10,"nodeType":"267","messageId":"268","endLine":11,"endColumn":20},{"ruleId":"265","severity":1,"message":"307","line":290,"column":32,"nodeType":"267","messageId":"268","endLine":290,"endColumn":45},{"ruleId":"265","severity":1,"message":"297","line":290,"column":47,"nodeType":"267","messageId":"268","endLine":290,"endColumn":60},{"ruleId":"265","severity":1,"message":"296","line":291,"column":17,"nodeType":"267","messageId":"268","endLine":291,"endColumn":23},{"ruleId":"265","severity":1,"message":"317","line":294,"column":61,"nodeType":"267","messageId":"268","endLine":294,"endColumn":88},{"ruleId":"265","severity":1,"message":"299","line":4,"column":30,"nodeType":"267","messageId":"268","endLine":4,"endColumn":39},{"ruleId":"265","severity":1,"message":"300","line":4,"column":41,"nodeType":"267","messageId":"268","endLine":4,"endColumn":55},{"ruleId":"265","severity":1,"message":"301","line":4,"column":57,"nodeType":"267","messageId":"268","endLine":4,"endColumn":67},{"ruleId":"265","severity":1,"message":"271","line":4,"column":69,"nodeType":"267","messageId":"268","endLine":4,"endColumn":73},{"ruleId":"265","severity":1,"message":"272","line":4,"column":75,"nodeType":"267","messageId":"268","endLine":4,"endColumn":85},{"ruleId":"318","severity":1,"message":"319","line":169,"column":17,"nodeType":"320","messageId":"321","endLine":203,"endColumn":18},{"ruleId":"265","severity":1,"message":"322","line":53,"column":39,"nodeType":"267","messageId":"268","endLine":53,"endColumn":51},{"ruleId":"265","severity":1,"message":"296","line":105,"column":38,"nodeType":"267","messageId":"268","endLine":105,"endColumn":44},{"ruleId":"265","severity":1,"message":"315","line":105,"column":46,"nodeType":"267","messageId":"268","endLine":105,"endColumn":54},{"ruleId":"265","severity":1,"message":"316","line":105,"column":83,"nodeType":"267","messageId":"268","endLine":105,"endColumn":93},{"ruleId":"265","severity":1,"message":"323","line":105,"column":95,"nodeType":"267","messageId":"268","endLine":105,"endColumn":110},{"ruleId":"265","severity":1,"message":"324","line":6,"column":3,"nodeType":"267","messageId":"268","endLine":6,"endColumn":12},{"ruleId":"265","severity":1,"message":"325","line":7,"column":3,"nodeType":"267","messageId":"268","endLine":7,"endColumn":19},{"ruleId":"265","severity":1,"message":"326","line":8,"column":3,"nodeType":"267","messageId":"268","endLine":8,"endColumn":19},{"ruleId":"265","severity":1,"message":"289","line":11,"column":10,"nodeType":"267","messageId":"268","endLine":11,"endColumn":16},{"ruleId":"265","severity":1,"message":"313","line":11,"column":18,"nodeType":"267","messageId":"268","endLine":11,"endColumn":29},"no-native-reassign",["327"],"no-negated-in-lhs",["328"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'RegistrierungForm' is defined but never used.","'Profil' is defined but never used.","'Grid' is defined but never used.","'Typography' is defined but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Link' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","'personProfil' is assigned a value but never used.","'personLernfaecher' is assigned a value but never used.","'lernfach' is assigned a value but never used.","'personLernvorliebenID' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","'Button' is defined but never used.","'withRouter' is defined but never used.","no-dupe-keys","Duplicate key 'gruppe'.","ObjectExpression","unexpected","'show' is assigned a value but never used.","'profil' is assigned a value but never used.","'lernvorlieben' is assigned a value but never used.","'gruppengroesse' is assigned a value but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'personID' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","'Card' is defined but never used.","'currentPerson' is assigned a value but never used.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","'classes' is assigned a value but never used.","'showChatVerlassenForm' is assigned a value but never used.","'withStyles' is defined but never used.","'ButtonGroup' is defined but never used.","'gruppeName' is assigned a value but never used.","'profilID' is assigned a value but never used.","'showProfil' is assigned a value but never used.","'lernfaecherValidationFailed' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'lerngruppeID' is assigned a value but never used.","'showAnfrageForm' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","no-global-assign","no-unsafe-negation"]