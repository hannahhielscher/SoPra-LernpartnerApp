[{"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/index.js":"1","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/App.js":"2","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js":"3","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/Theme.js":"4","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/About.js":"5","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/Profil.js":"6","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js":"7","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js":"8","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js":"9","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js":"10","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js":"11","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js":"12","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js":"13","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js":"14","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js":"15","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js":"16","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js":"17","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js":"18","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js":"19","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js":"20","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenForm.js":"21","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageEingangForm.js":"22","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js":"23","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js":"24","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js":"25","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js":"26","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js":"27","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js":"28","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js":"29","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js":"30","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js":"31","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js":"32","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js":"33","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/index.js":"34","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js":"35","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js":"36","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenBearbeitenForm.js":"37","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js":"38","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js":"39","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageEingangFormEintrag.js":"40","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MultiSelectLernfaecher.js":"41","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ChatVerlassenForm.js":"42","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageForm.js":"43","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListe.js":"44","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListeEintrag.js":"45","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageAusstehendEintrag.js":"46","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfilDialog.js":"47","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfilLoeschenForm.js":"48","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/Signin.js":"49"},{"size":146,"mtime":1620224527838,"results":"50","hashOfConfig":"51"},{"size":6455,"mtime":1625423356573,"results":"52","hashOfConfig":"51"},{"size":579,"mtime":1624392897666,"results":"53","hashOfConfig":"51"},{"size":1798,"mtime":1625387790765,"results":"54","hashOfConfig":"51"},{"size":844,"mtime":1625355382212,"results":"55","hashOfConfig":"51"},{"size":8136,"mtime":1625403445671,"results":"56","hashOfConfig":"51"},{"size":1961,"mtime":1625301507891,"results":"57","hashOfConfig":"51"},{"size":5520,"mtime":1625158227974,"results":"58","hashOfConfig":"51"},{"size":2113,"mtime":1622130118194,"results":"59","hashOfConfig":"51"},{"size":862,"mtime":1622130118194,"results":"60","hashOfConfig":"51"},{"size":22784,"mtime":1625337024421,"results":"61","hashOfConfig":"51"},{"size":4800,"mtime":1625403445683,"results":"62","hashOfConfig":"51"},{"size":1877,"mtime":1625423356575,"results":"63","hashOfConfig":"51"},{"size":7467,"mtime":1625403445666,"results":"64","hashOfConfig":"51"},{"size":13580,"mtime":1625391603064,"results":"65","hashOfConfig":"51"},{"size":51675,"mtime":1625431334044,"results":"66","hashOfConfig":"51"},{"size":3435,"mtime":1625397343334,"results":"67","hashOfConfig":"51"},{"size":4942,"mtime":1625403445673,"results":"68","hashOfConfig":"51"},{"size":8853,"mtime":1625403445664,"results":"69","hashOfConfig":"51"},{"size":1501,"mtime":1625397343320,"results":"70","hashOfConfig":"51"},{"size":20516,"mtime":1625403445772,"results":"71","hashOfConfig":"51"},{"size":9373,"mtime":1625430145091,"results":"72","hashOfConfig":"51"},{"size":1391,"mtime":1625397343323,"results":"73","hashOfConfig":"51"},{"size":22308,"mtime":1625403445685,"results":"74","hashOfConfig":"51"},{"size":2690,"mtime":1625397343322,"results":"75","hashOfConfig":"51"},{"size":1632,"mtime":1625397343327,"results":"76","hashOfConfig":"51"},{"size":4120,"mtime":1625397343319,"results":"77","hashOfConfig":"51"},{"size":1670,"mtime":1625397343325,"results":"78","hashOfConfig":"51"},{"size":900,"mtime":1625388617249,"results":"79","hashOfConfig":"51"},{"size":1171,"mtime":1625397343326,"results":"80","hashOfConfig":"51"},{"size":1043,"mtime":1625388617250,"results":"81","hashOfConfig":"51"},{"size":869,"mtime":1625388617249,"results":"82","hashOfConfig":"51"},{"size":5762,"mtime":1625429680894,"results":"83","hashOfConfig":"51"},{"size":435,"mtime":1625388617251,"results":"84","hashOfConfig":"51"},{"size":11508,"mtime":1625403445674,"results":"85","hashOfConfig":"51"},{"size":4186,"mtime":1625403445678,"results":"86","hashOfConfig":"51"},{"size":16148,"mtime":1625403445680,"results":"87","hashOfConfig":"51"},{"size":774,"mtime":1625388617248,"results":"88","hashOfConfig":"51"},{"size":375,"mtime":1622130118189,"results":"89","hashOfConfig":"51"},{"size":10935,"mtime":1625429265218,"results":"90","hashOfConfig":"51"},{"size":2582,"mtime":1625397343332,"results":"91","hashOfConfig":"51"},{"size":3891,"mtime":1625235221003,"results":"92","hashOfConfig":"51"},{"size":12278,"mtime":1625415229283,"results":"93","hashOfConfig":"51"},{"size":9735,"mtime":1625431547102,"results":"94","hashOfConfig":"51"},{"size":5573,"mtime":1625429737174,"results":"95","hashOfConfig":"51"},{"size":7404,"mtime":1625403445661,"results":"96","hashOfConfig":"51"},{"size":10519,"mtime":1625350020717,"results":"97","hashOfConfig":"51"},{"size":7859,"mtime":1625403445687,"results":"98","hashOfConfig":"51"},{"size":1877,"mtime":1625423356575,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1h9qmix",{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"102"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/index.js",[],["218","219"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/App.js",["220","221","222"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/Theme.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/About.js",["223"],"import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n */\n\n\nfunction About() {\n\n    const classes = useStyles();\n  \n    return (\n      <Paper elevation={0} className={classes.root}>\n        <div className={classes.content}>\n          <Typography variant='h6'>\n            App zum Auffinden von Lernpartnern\n          </Typography>\n          <Typography variant='body2'>\n            © Hochschule der Medien 2020, all rights reserved.\n          </Typography>\n        </div>\n      </Paper>\n    )\n  }\n  \n  export default About;","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/Profil.js",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Button, Paper, Link, Grid } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport {LernpartnerAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Es wird das Profil einer Gruppe oder Person angezeigt.\n */\n\nclass Profil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            user: props.user,\n            profil: null,\n            lernvorlieben: null,\n            gruppe: false,\n            tageszeiten: null,\n            tage: null,\n            frequenz: null,\n            lernart: null,\n            gruppengroesse: null,\n            lernort: null,\n            gruppe: null,\n            personVorname: null,\n            personName: null,\n            personSemester: 0,\n            personStudiengang: null,\n            lerngruppe: false,\n            personProfilID: null,\n            gruppenLernfaecher: null,\n            lernfaechernamen: [],\n            personLernvorliebenID: null,\n            teilnahmenGruppen: [],\n            teilnehmerAnzahl: null, \n            loadingInProgress: false,\n            loadingError: null,\n        };\n    }\n\n\n\n/**   showVorschlagButtonClick = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showVorschlag: true\n      });\n    }**/\n\n\n\n/**\n    // API Anbindung um Profil vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n*/\n\n    // API Anbindung um die Person vom Backend zu bekommen\n    getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.user.profil)\n    .then(profilBO =>\n      this.setState({\n            profil: profilBO,\n            gruppe: profilBO.gruppe,\n            //profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).then(() => {\n        if (this.state.gruppe !== true){\n          this.getTeilnahmen();\n        }\n      }\n      ).then(() => {\n        this.getLernfaecher();\n      }).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          gruppe: null,\n          //profilLernfaecher: null,\n          profilLernvorliebenID: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  // API Anbindung um die Lernfächer der Person vom Backend zu bekommen\n  getLernfaecher = () => {\n    LernpartnerAPI.getAPI().getLernfaecherByProfil(this.state.profil.id)\n    .then(lernfaecherBOs =>\n      this.setState({\n            gruppenLernfaecher: lernfaecherBOs,\n            lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          personLernfaecher: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n  \n\n    // API Anbindung um die Lernvorlieben der Person vom Backend zu bekommen\n    getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(this.props.user.profil)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            tageszeiten: lernvorliebenBO.tageszeiten_bez,\n            tage: lernvorliebenBO.tage_bez,\n            frequenz: lernvorliebenBO.frequenz_bez,\n            lernart: lernvorliebenBO.lernart_bez,\n            gruppengroesse: lernvorliebenBO.gruppengroesse_bez,\n            lernort: lernvorliebenBO.lernort_bez,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n    // API Anbindung um die Teilnahmen der Person an einer Gruooe vom Backend zu bekommen\n    getTeilnahmen = () => {\n\n    LernpartnerAPI.getAPI().getTeilnahmeGruppeByGruppe(this.state.user.id)\n    .then(teilnahmeGruppeBOs =>\n      this.setState({\n            teilnahmenGruppen: teilnahmeGruppeBOs,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          teilnahmenGruppen: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n\n  /** Lifecycle method, welche aufgerufen wird, wenn die Komponente in den DOM eingefügt wird */\n    componentDidMount() {\n        this.getProfil();\n        this.getLernvorlieben();\n  }\n\n\n    /** Rendern der Komponente */\n  render() {\n    const { classes, show } = this.props;\n    // Use the states customer\n    const { user, teilnahmenGruppen, profil, lernvorlieben, tageszeiten, tage, frequenz, lernart, lernort, gruppengroesse, gruppe, personLernvorliebenID, gruppenLernfaecher, lernfaechernamen, loadingInProgress, error} = this.state;\n    console.log(user)\n    console.log(profil)\n    console.log(gruppe)\n    console.log(teilnahmenGruppen)\n    console.log(teilnahmenGruppen.length)\n    console.log(lernfaechernamen)\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n            {\n            gruppe ?\n                <>\n                    <b> Profilinformationen: </b> <br /><br />\n                    Tageszeiten: {tageszeiten}<br />\n                    Tage: {tage}<br />\n                    Frequenz: {frequenz}<br />\n                    Lernart: {lernart}<br />\n                    Lernort: {lernort}<br/> <br/>\n                    Lernfächer:\n\n                              {\n                                lernfaechernamen.map(lernfach =>\n                                  <li>{lernfach}</li>\n                                  )\n\n                              }\n                    <br/>\n\n                </>\n\n                :\n                <>\n                    <b> {user.vorname} {user.name} </b> <br />\n                    <b>Semester: </b> {user.semester} <br />\n                    <b>Studiengang: </b> {user.studiengang} <br />\n                    <b>Alter: </b> {user.alter} <br />\n                    <b>Geschlecht: </b> {user.geschlecht} <br />\n                </>\n           }\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\n\n/**Spezifische Styles*/\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n});\n\n\n/** PropTypes */\nProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(Profil);\n\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js",["240","241"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paper, Typography, Tabs, Tab, AppBar, Toolbar, Box } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\nimport logo from './Logo.png';\n\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      tabindex: 0\n    };\n  }\n\n  /** Handles onChange events of the Tabs component */\n handleTabChange = (e, newIndex) => {\n    // console.log(newValue)\n    this.setState({\n      tabindex: newIndex\n    })\n  };\n\n  /** Renders the component */\n  render() {\n    const { user, currentPerson } = this.props;\n\n    return (\n    <div style={{ width: '100%'}}>\n      <AppBar style={{ backgroundColor: '#cdb79e'}}>\n      <Toolbar>\n        <img src={logo} alt=\"Easy Learn\" style={{ width : 150, margin: 5}}/>\n\n        {\n          user ?\n        <>\n        <Box display=\"flex\" flexDirection=\"row-reverse\" justifyContent=\"flex-end\" p={1} marginLeft={40}>\n            <Tabs indicatorColor='primary' textColor='tab' variant=\"fullWidth\" onChange={this.handleTabChange} right>\n              <Tab label='Profil' component={RouterLink} to={`/meinprofil`}/>\n              <Tab label='Lerngruppen' component={RouterLink} to={`/meinelerngruppen`}/>\n              <Tab label='Vorschläge' component={RouterLink} to={`/meinevorschlaege`}/>\n              <Tab label='Chats' component={RouterLink} to={`/meinechats`}/>\n              <Tab label='About' component={RouterLink} to={`/about`} />\n            </Tabs>\n         </Box>\n         <ProfileDropDown user={currentPerson} />\n         </>\n         : null\n          \n\n          }\n\n\n      </Toolbar>\n      </AppBar>\n      <Toolbar />\n      </div>\n    )\n  }\n}\n\n/** PropTypes */\nHeader.propTypes = {\n  /** The logged in firesbase currentPerson */\n  currentPerson: PropTypes.object,\n}\n\nexport default Header;","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js",["242","243","244","245","246","247"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport GruppenListeEintrag from './GruppenListeEintrag';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\n\n/**\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\n *\n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\n *\n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\n *\n */\n\n\nclass GruppenListe extends Component {\n\n    constructor(props){\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandLerngruppe) {\n          expandedID = this.props.location.expandLerngruppe.getID();\n        }\n\n        // Init an empty state\n        this.state = {\n          lerngruppen: [],\n          error: null,\n          loadingInProgress: false,\n          expandedLerngruppeID: expandedID,\n          //showCustomerForm: false\n        };\n\n    }\n\n    /** Fetches all LerngruppenBOs from the backend */\n    getLerngruppen = () => {\n        LernpartnerAPI.getAPI().getLerngruppe(this.props.currentPerson.id)\n            .then(lerngruppeBOs =>\n                this.setState({               // Set new state when LerngruppeBOs have been fetched\n                    lerngruppen: lerngruppeBOs,\n                    //name: lerngruppeBO.name\n                    loadingInProgress: false,   // disable loading indicator\n                    error: null\n                })).catch(e =>\n                    this.setState({             // Reset state with error from catch\n                        lerngruppen: [],\n                        loadingInProgress: false, // disable loading indicator\n                        error: e\n                    })\n                );\n\n        // set loading to true\n        this.setState({\n            loadingInProgress: true,\n            error: null\n        });\n    }\n\n    /**\n     * Handles onExpandedStateChange events from the GruppeListeEintrag component. Toggels the expanded state of\n     * the GruppeListeEintrag of the given LerngruppeBO.\n     *\n     * @param {lerngruppe} LerngruppeBO of the GruppeListeEintrag to be toggeled\n     */\n    onExpandedStateChange = lerngruppe => {\n        // console.log(vorschlagID);\n        // Set expandend Lerngruppe Eintrag to null by default\n        let newID = null;\n\n        // If same lerngruppe entry is clicked, collapse it else expand a new one\n        if (lerngruppe.getID() !== this.state.expandedLerngruppeID) {\n        // Expand the lerngruppe entry with lerngruppeID\n        newID = lerngruppe.getID();\n        }\n        // console.log(newID);\n        this.setState({\n        expandedLerngruppeID: newID,\n        });\n    }\n\n   /**\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\n   */\n    lerngruppeVerlassen = () => {\n        this.getLerngruppen();\n        this.setState({\n            lerngruppen: this.state.lerngruppen,\n            //showCustomerForm: false\n        });\n    }\n\n    /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getLerngruppen();\n    }\n\n    render() {\n        const { classes, currentPerson } = this.props;\n        const { lerngruppen, personID, expandedLerngruppeID, loadingInProgress, error }  = this.state;\n        console.log(lerngruppen)\n\n        return (\n            <div className={classes.root}>\n                <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item >\n                        <Typography>\n                            <h1>Lerngruppen</h1>\n                        </Typography>\n                    </Grid>\n                </Grid>\n                {\n                    lerngruppen.map(lerngruppe =>\n                    <GruppenListeEintrag key={lerngruppe.getID()} lerngruppe={lerngruppe} currentPerson={currentPerson} expandedState={expandedLerngruppeID === lerngruppe.getID()}\n                      onExpandedStateChange={this.onExpandedStateChange}\n                      onTeilnahmeGruppeDeleted={this.lerngruppeVerlassen}\n                    />)\n                }\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Lerngruppen konnten nicht geladen werden!`} onReload={this.getLerngruppen} />\n            </div>\n        );\n      }\n    }\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n      width: '100%',\n  },\n  content: {\n      margin: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nGruppenListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\n\nexport default withRouter(withStyles(styles)(GruppenListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js",["248","249","250","251","252"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport MultiSelectLernfaecher from './MultiSelectLernfaecher';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass RegistrierungForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Init the state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: [],\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n\n            gruppe: 0,\n            profil: null,\n            personLernvorliebenID: null,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n            \n            \n        };\n        // save this state for canceling\n        this.baseState = this.state;\n\n        //Binding der handleChange Methoden an die Komponente\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        this.handleChangeGeschlecht = this.handleChangeGeschlecht.bind(this);\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.onChangeLernfaecher = this.onChangeLernfaecher.bind(this);\n        }\n    \n\n    /** Updaten der Person. Über Security Decorator wurde bereits ein Person, Profil und\n     * Lernvorlieben Objekt erstellt, weswegen die \"Registrierung\" hier ein Update ist\n     */\n    updatenPerson = () => {\n        let person = this.props.currentPerson;\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call erfolgreich\n            // Initialisiert State neu\n            this.setState(this.baseState);\n            this.props.onClose(person); // Ruft parent Komponente auf mit neuem Person-Objekt aus Backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator \n                updatingError: e              // show error message\n            })\n        );\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n    // API Anbindung um das Profil der Person vom Backend zu bekommen, um dieses dann zu updaten\n   getProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n            profil: profilBO,\n            personLernvorliebenID: profilBO.lernvorlieben_id,\n            error: null,\n            loadingInProgress: false,\n          })).catch(e =>\n            this.setState({\n              profil: null,\n              personLernvorliebenID: null,\n              error: e,\n              loadingInProgress: false,\n            }));\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n  /** Updaten des Profils mit den ausgewählten Daten */\n  updatenProfil = () => {\n    LernpartnerAPI.getAPI().updateProfil(this.state.profil.id, this.state.gruppe, this.state.lernfaecher, this.state.personLernvorliebenID\n    ).then(profil => {\n        // Backend call erfolgreich\n        // Initialisiert State neu für nächste Registrierung\n        this.setState(this.baseState);\n    }).catch(e =>\n        this.setState({\n            updatingInProgress: false,    // disable loading indicator\n            updatingError: e              // show error message\n        })\n    );\n\n    // set loading to true\n    this.setState({\n        updatingInProgress: true,       // show loading indicator\n        updatingError: null             // disable error message\n  });\n}\n\n  /** Updaten der zugehörigen Lervorlieben über ID aus Profil */\n    updatenLernvorlieben = () => {\n        LernpartnerAPI.getAPI().updateLernvorlieben(this.state.personLernvorliebenID, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call erfolgreich\n            // Initialisiert State neu für nächste Registrierung\n            this.setState(this.baseState);\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t \n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    //Handle Change des Studiengang-Dropdowns\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    //Handle Change des Lerngruppen-Dropdowns\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n    //Handle Change des Geschlecht-Dropdowns\n    handleChangeGeschlecht(event) {\n      this.setState({geschlecht: event.target.value});\n    }\n\n    //Handle Change des Tageszeiten-Dropdowns\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    //Handle Change des Tage-Dropdowns\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    //Handle Change des Frequenz-Dropdowns\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    //Handle Change des Lernart-Dropdowns\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    //Handle Change des Gruppengroesse-Dropdowns\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    //Handle Change des Lernort-Dropdowns\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    //Handle Change des Lernfaecher-Dropdowns\n    onChangeLernfaecher(newLernfaecher) {\n      console.log(newLernfaecher)\n      this.setState({\n        lernfaecher: newLernfaecher\n      \n    })\n  }\n\n  \n\t/** Rendert den Dialog, wenn CurrentPerson Vorname gleich null, sprich die Person neu im System ist */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, } = this.props;\n        const { \n          profil, \n          personLernvorliebenID, \n          name, \n          nameValidationFailed, \n          vorname, \n          vornameValidationFailed, \n          semester, \n          semesterValidationFailed, \n          studiengang, \n          studiengangValidationFailed,\n          alter, \n          alterValidationFailed, \n          geschlecht, \n          geschlechtValidationFailed, \n          lerngruppe, \n          lerngruppeValidationFailed, \n          tageszeiten,\n          tageszeitenValidationFailed, \n          tage, \n          tageValidationFailed, \n          frequenz, \n          frequenzValidationFailed, \n          lernart, \n          lernartValidationFailed, \n          gruppengroesse, \n          gruppengroesseValidationFailed,\n          lernort, \n          lernortValidationFailed,\n          lernfach, \n          lernfaecherValidationFailed, \n          addingInProgress,\n          updatingInProgress, \n          updatingError} = this.state;\n    \n        console.log(profil)\n        console.log(personLernvorliebenID)\n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\n        let header = 'Bitte gib deine Daten ein:';\n    \n        return (\n            show ?\n            <Dialog open={show} onEnter={this.getProfil}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  \n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname} \n                    onChange={this.textFieldValueChange} error={vornameValidationFailed} \n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n                  \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \n                    onChange={this.numberValueChange} error={semesterValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \n                    \n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select  error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                                <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\n                            </Select>\n                   </FormControl>\n                   \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \n                    onChange={this.numberValueChange} error={alterValidationFailed} \n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n  \n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Geschlecht:</InputLabel>\n                             <Select  error={geschlechtValidationFailed} value={geschlecht} onChange={this.handleChangeGeschlecht}>\n                                <MenuItem value='weiblich'>Weiblich</MenuItem>\n                                <MenuItem value='männlich'>Männlich</MenuItem>\n                                <MenuItem value='divers'>Divers</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                  <FormControl required fullWidth className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n                  <br/><br/>\n                  <b>Deine Lernvorlieben:</b><br/>\n                  <FormControl required fullWidth margin='normal'className={classes.formControl}>\n                            <InputLabel >Welche Tageszeit präferierst du? </InputLabel>\n                             <Select error={tageszeitenValidationFailed} value={tageszeiten}\n                             onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/> \n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                        <MultiSelectLernfaecher lernfaecher = {lernfach} onChangeLernfaecher = {this.onChangeLernfaecher}/>\n                    </FormControl>\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Du konntest leider nicht registriert werden :/`}\n                      onReload={() => {this.updatenPerson(); this.updatenProfil(); this.updatenLernvorlieben();}} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={() => {this.updatenPerson(); this.updatenProfil(); this.updatenLernvorlieben();}} color='primary'>\n                          Jetzt registrieren\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nRegistrierungForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n  \n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(RegistrierungForm));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js",["253","254","255","256","257","258"],"import React, { Component } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { LernpartnerAPI } from '../../api';\nimport VorschlagListe from '../VorschlagListe';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\n/**\n * Dieses Form zeigt ein Dialog zur Auswahl eines Lernfachs an. Es werden danach die Matches generiert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass LernfaecherForm extends Component {\n  \n  constructor(props){\n    super(props);\n\n    // initiiere einen leeren state\n    this.state = {\n        profil: null,\n        lernfaecher: [],\n        lernfach: null,\n        showVorschlagListe: false,\n        loadingInProgress: false,\n        error: null\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({lernfach: event.target.value});\n    \n  }\n\n    // API Anbindung um das Profil ihm Backend zu bekommen\n    getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n    .then(profilBO =>\n        this.setState({\n          profil: profilBO,\n          lernfaecher: profilBO.lernfaecher,\n          loadingInProgress: false,\n          error: null,\n        }))\n        .catch(e =>\n            this.setState({\n              profil: null,\n              lernfaecher: null,\n              loadingInProgress: false,\n              error: e,\n            }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n  }\n\n    // API Anbindung um die Lernfaecher ihm Backend zu bekommen\n    getLernfaecher = () => {\n    LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n    .then(lernfaecherBOs =>\n      this.setState({\n            lernfaecher: lernfaecherBOs,\n            lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung),\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernfaecher: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  //Handles the onClick event of the show profil button\n  bestaetigenButtonClicked = (event) => {\n    this.setState({\n      showVorschlagListe: true\n    });\n  }\n\n    /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n    this.getLernfaecher();\n  }\n\n  render() {\n    const { classes, currentPerson } = this.props;\n    const { profil, lernfaecher, lernfach, showVorschlagListe, loadingInProgress, error } = this.state;\n    \n    console.log(profil)\n    console.log(showVorschlagListe)\n    return (\n      <div className={classes.page}>\n        <h2 style={{ marginTop: '40px'}} >Wähle ein Lernfach, für das du einen neuen Lern Buddy suchst.</h2>\n        <FormControl className={classes.formControl}>\n          <Select\n            native\n            value= {lernfach}\n            onChange={this.handleChange}\n            className={classes.selectEmpty}\n          >\n           {lernfaecher.map(lernfach =>\n            <option key={lernfach.id} value={lernfach.id}>{lernfach.bezeichnung}</option>\n          )};\n           \n          </Select>\n        </FormControl>\n        <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick= {this.bestaetigenButtonClicked}>Bestätigen</Button>\n        <VorschlagListe show={showVorschlagListe} currentPerson={currentPerson} lernfach={lernfach} />\n        <LoadingProgress show={loadingInProgress}></LoadingProgress>\n        <ContextErrorMessage error={error} contextErrorMsg = {'Hier ist ein Fehler aufgetreten'} onReload={this.getProfil} />\n      </div>\n    );\n  } \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  formControl: {\n    marginBottom: '10px',\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(1),\n  },\n  page: {\n    marginTop: '17px'\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    marginLeft: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n});\n\n\nexport default withRouter(withStyles(styles)(LernfaecherForm));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js",["259","260"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Badge} from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport KonversationListeEintrag from './KonversationListeEintrag';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport AnfrageEingangForm from './dialogs/AnfrageEingangForm';\n\n\n/**\n * Es werden alle Konversationen des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [KonversationListeEintrag]](#konversationlisteeintrag)\n * \n * Hierfür werden alle Konversationen des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\nclass KonversationListe extends Component {\n    constructor(props){\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandKonversation) {\n        expandedID = this.props.location.expandKonversation.getID();\n        }\n        \n       \n        // initiiere einen leeren state\n        this.state = {\n            konversationen : [],\n\n            anfrage: null,\n\n            teilnahmenChat: [],\n            teilnahmenChatGefiltert: [],\n            anfragenAnzahl: 0,\n\n            showAnfrageEingangForm: false,\n\n            error: null,\n            loadingInProgress: false, \n            expandedKonversationID: expandedID,\n        };\n\n      }\n\n      // API Anbindung um Konversationen des Students vom Backend zu bekommen \n    getKonversation = () => {\n      LernpartnerAPI.getAPI().getangenommeneKonversationenByPerson(this.props.currentPerson.getID())\n      .then(konversationenBOs =>\n          this.setState({\n              konversationen: konversationenBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  konversationen: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingKonversationenError: null\n      });\n    }\n\n /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {konversation} KonversationBO of the KonversationListeEintrag to be toggeled\n   */\n     \n  onExpandedStateChange = konversation => {\n    // console.log(konversationID);\n    // Set expandend Konversation Eintrag to null by default\n    let newID = null;\n\n    // If same konversation entry is clicked, collapse it else expand a new one\n    if (konversation.getID() !== this.state.expandedKonversationID) {\n    // Expand the konservation entry with konversationID\n    newID = konversation.getID();\n    }\n    // console.log(newID);\n    this.setState({\n    expandedKonversationID: newID,\n    });\n}\n\n    /** Handles the onClick event of the delete customer button */\n    getAnfrageEingangForm = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showAnfrageEingangForm: true\n        });\n    }\n\n  /** Handles the onClose event of the CustomerForm */\n  anfrageEingangFormFormClosed = (anfrage) => {\n    this.getKonversation();\n    // customer is not null and therefor changed\n    if (anfrage) {\n      this.setState({\n        anfrage: anfrage,\n        showAnfrageEingangForm: false\n      });\n    } else {\n      this.setState({\n        showAnfrageEingangForm: false\n      });\n    }\n  }\n/**\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\n   */\n  chatVerlassen = () => {\n    this.getKonversation();\n    this.setState({\n        konversationen: this.state.konversationen,\n        //showCustomerForm: false\n    });\n}\n\n    // API Anbindung um die Teilnahme des Chats des Students vom Backend zu bekommen\n    getTeilnahmenChat = () => {\n      LernpartnerAPI.getAPI().getTeilnahmeChatByPersonByStatus(this.props.currentPerson.id, 0)\n      .then(teilnahmenChatBOs =>\n          this.setState({\n              teilnahmenChat: teilnahmenChatBOs,\n              error: null,\n              loadingInProgress: false,\n            })).then(() => {\n                  this.filterTeilnahmenChat();\n            }).catch(e =>\n              this.setState({\n                  error: e,\n                  loadingInProgress: false,\n              }));\n\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingKonversationenError: null\n      });\n    }\n\n  filterTeilnahmenChat = () => {\n    for (var teilnahme in this.state.teilnahmenChat){\n        if (this.state.teilnahmenChat.[teilnahme]['anfrage_sender'] !== this.props.currentPerson.id){\n            this.state.teilnahmenChatGefiltert.push(this.state.teilnahmenChat.[teilnahme])\n         }\n    }\n    if (this.state.teilnahmenChatGefiltert.length < 1) {\n        this.setState({\n            anfragenAnzahl: '0'\n        });\n    }else{\n        this.setState({\n            anfragenAnzahl: this.state.teilnahmenChatGefiltert.length\n        });\n    }\n  }\n\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getKonversation();\n  this.getTeilnahmenChat();\n}\n\n\nrender() {\n  const { classes, currentPerson } = this.props;\n        const { konversationen, anfragenAnzahl, teilnahmenChatGefiltert, showAnfrageEingangForm, expandedKonversationID, error, loadingInProgress}  = this.state;\n\n        return(\n          <div className={classes.root}>\n            <Button variant='contained' onClick={this.getAnfrageEingangForm} color='primary' className={classes.button}>\n            <Badge badgeContent={anfragenAnzahl} color=\"secondary\" className={classes.badge}>\n             </Badge>\n                  Anfragen\n             </Button>\n           \n            { \n              // Show the list of KonversationListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              konversationen.map(konversation =>\n                <KonversationListeEintrag key={konversation.getID()} currentPerson= {currentPerson} konversation={konversation} expandedState={expandedKonversationID === konversation.getID()}\n                onExpandedStateChange={this.onExpandedStateChange}\n                onTeilnahmeChatDeleted={this.chatVerlassen}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Chats nicht geladen werden!`} onReload={this.getKonversation} />\n\n            <AnfrageEingangForm show={showAnfrageEingangForm} currentPerson={currentPerson} onClose={this.anfrageEingangFormFormClosed} />\n\n          </div>\n\n        );\n\n      }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: '15px'\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  badge: {\n    marginRight: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nKonversationListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(KonversationListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid, Container } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport RegistrierungForm from './dialogs/RegistrierungForm';\nimport MeinProfilForm from './dialogs/MeinProfilForm';\nimport ProfilLoeschenForm from './dialogs/ProfilLoeschenForm';\nimport { LernpartnerAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\n/**\n* Es wird das eigene Profil mit den persönlichen Daten, Lernfächern und Lernvorlieben angezeigt.\n* Die Daten werden bei der Registrierung oder der Bearbeitung des Profils eingegeben.\n*\n* @see See MeinProfilForm [Dialog] (https://material-ui.com/components/dialogs)\n*/\n\nclass MeinProfil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            person: null,\n            \n            personVorname: null,\n            personName: this.props.personName,\n            personSemester: null,\n            personAlter: null,\n            personStudiengang: null,\n            lerngruppe: false,\n\n            personProfilID: null,\n            personLernfaecher: [],\n            lernfaechernamen: [],\n\n            personLernvorliebenID: null,\n            profil: null,\n            teilnahmeGruppe: null,\n            lernvorlieben: null,\n\n            lernvorliebentageszeiten: null,\n            lernvorliebentage: null,\n            lernvorliebenfrequenz: null,\n            lernvorliebenlernart: null,\n            lernvorliebengruppengroesse: null,\n            lernvorliebenlernort: null,\n\n            gruppe: false,\n            showMeinProfilForm: false,\n            showProfilLoeschenForm: false,\n            showRegistrierungForm: false,\n            loadingInProgress: false,\n            loadingError: null,\n            \n            \n        };\n    }\n\n    // API Anbindung um die persönlichen Daten der Person vom Backend zu bekommen\n    getPerson = () => {\n    LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.currentPerson.getgoogle_user_id())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personAlter: personBO.alter,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.profil,\n            loadingInProgress: false,\n            error: null,\n          })).then(() => {\n            if (this.state.personName === 'Null'){\n              this.setState({\n                showRegistrierungForm: true\n              })\n            }\n          })\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n    \n    // API Anbindung um das Profil der Person vom Backend zu bekommen\n   getProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n            profil: profilBO,\n            personLernvorliebenID: profilBO.lernvorlieben_id,\n            error: null,\n            loadingInProgress: false,\n          })).then(() => {\n            this.getLernvorlieben();\n           \n          }).catch(e =>\n            this.setState({\n              profil: null,\n              personLernfaecher: null,\n              error: e,\n              loadingInProgress: false,\n            }));\n\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    // API Anbindung um die Lernfächer der Person vom Backend zu bekommen\n    getLernfaecher = () => {\n      LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n      .then(lernfaecherBOs =>\n        this.setState({\n              personLernfaecher: lernfaecherBOs,\n              lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\n              loadingInProgress: false,\n              error: null\n        }))\n        .catch(e =>\n          this.setState({ // Reset state with error from catch\n            personLernfaecher: null,\n            loadingInProgress: false,\n            error: e,\n          })\n        );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    getalleLernfaecher = () => {\n      LernpartnerAPI.getAPI().getLernfaecher()\n      .then(lernfaecherBOs =>\n        this.setState({\n              lernfaechergesamt: lernfaecherBOs,\n              lernfaecher_id: lernfaecherBOs.map(lernfach => lernfach.id),\n              lernfaecher_bez: lernfaecherBOs.map(lernfach => lernfach.bezeichnung),\n              loadingInProgress: false,\n              error: null\n        }))\n        .catch(e =>\n          this.setState({ // Reset state with error from catch\n            lernfaechergesamt: null,\n            lernfaechertest: null,\n            loadingInProgress: false,\n            error: e,\n          })\n        );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    // API Anbindung um die Lernvorlieben der Person vom Backend zu bekommen\n    getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.personLernvorliebenID)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            lernvorliebentageszeiten: lernvorliebenBO.tageszeiten_bez,\n            lernvorliebentage: lernvorliebenBO.tage_bez,\n            lernvorliebenfrequenz: lernvorliebenBO.frequenz_bez,\n            lernvorliebenlernart: lernvorliebenBO.lernart_bez,\n            lernvorliebengruppengroesse: lernvorliebenBO.gruppengroesse_bez,\n            lernvorliebenlernort: lernvorliebenBO.lernort_bez,\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n    // API Anbindung um die Lernvorlieben der Person vom Backend zu bekommen\n    getTeilnahmeGruppen = () => {\n        LernpartnerAPI.getAPI().getTeilnahmeGruppeById(this.state.currentPerson.getID())\n            .then(teilnahmeGruppeBO =>\n                this.setState({\n                    teilnahmeGruppe: teilnahmeGruppeBO,\n                    loadingInProgress: false,\n                    error: null\n                }))\n            .catch(e =>\n                this.setState({ // Reset state with error from catch\n                    teilnahmeGruppe: null,\n                    loadingInProgress: false,\n                    error: e,\n                })\n            );\n\n        // set loading to true\n        this.setState({\n            loadingInProgress: true,\n            loadingError: null\n        });\n    }\n  \n  \n  //Wird aufgerufen, wenn der Mein Profil bearbeiten Button gedrückt wird\n  bearbeitenButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showMeinProfilForm: true\n    });\n  }\n\n  loeschenButtonClicked = (event) => {\n        event.stopPropagation();\n      this.setState({\n          showProfilLoeschenForm: true\n      });\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  userFormClosed = (person) => {\n    this.getPerson();\n    this.getLernfaecher();\n    if (person) {\n        this.setState({\n            person: person,\n            showRegistrierungForm: false,\n        });\n    } else {\n        this.setState({\n          showRegistrierungForm: false\n        })\n      \n    }\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  bearbeitenFormClosed = (person) => {\n    this.getPerson();\n    if (person) {\n        this.setState({\n            person: person,\n            showMeinProfilForm: false,\n        });\n    } else {\n        this.setState({\n          showMeinProfilForm: false\n        })\n      \n    }\n  }\n\n    loeschenFormClosed = (person) => {\n        this.getPerson();\n        if (person) {\n            this.setState({\n                person: person,\n                showProfilLoeschenForm: false,\n            });\n        } else {\n            this.setState({\n                showProfilLoeschenForm: false\n            })\n\n        }\n    }\n\n  lernfaecherOptions = (arr1, arr2, sep) => {\n    arr1.map(function (num, idx) {\n      return num.toString().concat(sep, (arr2[idx]).toString())\n    })\n  }\n\n  /** Lifecycle method, wird aufgerufen wenn component in den DOM eingesetzt wird*/\n  componentDidMount(){\n    this.getPerson();\n    this.getProfil();\n    this.getLernfaecher();\n    this.getalleLernfaecher();\n  }\n\n\n   /** Rendern der Komponente */\n    render() {\n      const { classes , currentPerson } = this.props;\n      // Use the states customer\n      console.log(currentPerson)\n\n      const { test, lernfaecher_id, lernfaecher_bez, lernfaechernamen, profil, personProfil, personName, personVorname, personSemester, personAlter, personStudiengang, personLernfaecher, lernfach, lernfaechergesamt, personLernvorliebenID, lernvorlieben, lernvorliebentageszeiten, lernvorliebentage, lernvorliebenfrequenz, lernvorliebenlernart, lernvorliebengruppengroesse, lernvorliebenlernort, showRegistrierungForm, showMeinProfilForm, showProfilLoeschenForm, teilnahmeGruppe, loadingInProgress, error} = this.state;\n      console.log(teilnahmeGruppe)\n      return (\n        <div className={classes.root}>\n        <RegistrierungForm show={showRegistrierungForm} currentPerson = {currentPerson} onClose={this.userFormClosed}/>\n\n        <Button variant=\"contained\" color=\"primary\"  onClick= {this.bearbeitenButtonClicked}>Mein Profil bearbeiten</Button>\n        <Button variant=\"contained\" style={{backgroundColor: \"#cd5b45\"}} color=\"secondary\" className={classes.button} onClick= {this.loeschenButtonClicked}>Mein Profil löschen</Button>\n        <br/>\n        <Paper className={classes.inhalt}>\n        <h2>Meine Daten:</h2>\n\n        <Typography variant='body1' color={'textSecondary'}>\n\n                              <b>Name: </b>{personVorname} {personName}<br />\n                              <b>Alter: </b> {personAlter} <br />\n                              <b>Semester: </b> {personSemester} <br />\n                              <b>Studiengang: </b>{personStudiengang}<br />\n\n                              </Typography>\n                              </Paper>\n\n                              <Paper className={classes.inhalt}>\n                              <h2>Meine Lernfächer:</h2>\n\n                              <Typography variant='body1' color={'textSecondary'}>\n\n                              {\n                                lernfaechernamen.map(lernfach =>\n                                  <li>{lernfach}</li>\n                                  )\n\n                              }\n                              </Typography>\n                              </Paper>\n\n\n                              <Paper className={classes.inhalt}>\n\n                              <h2> Meine Lernvorlieben: </h2>\n                              <Typography variant='body1' color={'textSecondary'}>\n                              <b>Tageszeit: </b>{lernvorliebentageszeiten}<br />\n                              <b>Tage: </b>{lernvorliebentage}<br />\n                              <b>Frequenz: </b>{lernvorliebenfrequenz}<br />\n                              <b>Lernart: </b>{lernvorliebenlernart}<br />\n                              <b>Gruppengröße: </b>{lernvorliebengruppengroesse}<br />\n                              <b>Lernort: </b>{lernvorliebenlernort}<br />\n\n        </Typography>\n        </Paper>\n        <MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson} currentProfil={profil} lernfaechergesamt = {lernfaechergesamt} lernvorlieben={lernvorlieben} onClose={this.bearbeitenFormClosed}/>\n        <ProfilLoeschenForm show={showProfilLoeschenForm} currentPerson={currentPerson} currentProfil={profil} lernvorlieben={lernvorlieben} onClose={this.loeschenFormClosed}/>\n\n        </div>\n      );\n    }\n}\n//<MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson}/>\n\n\n\n/**Spezifische Styles*/\n  const styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: '20px',\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n\n  inhalt: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n  },\n  button: {\n      marginLeft: 473,\n  }\n  });\n\n\n/** PropTypes */\nMeinProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  currentPerson: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withRouter(withStyles(styles)(MeinProfil));\n\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js",["281"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js",["282","283","284","285","286","287"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport VorschlagListeEintrag from './VorschlagListeEintrag';\n\n/**\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [VorschlagListe](#vorschagliste)\n */\n\n\nclass VorschlagListe extends Component {\n\n    constructor(props){\n        super(props);\n\n        // console.log(props);\n        let expandedID = null;\n\n        if (this.props.location.expandVorschlag) {\n        expandedID = this.props.location.expandVorschlag.getID();\n        }\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlaege : [],\n            //currentPersonName: null,\n            error: null,\n            loadingInProgress: false, \n            expandedVorschlagID: expandedID,\n            test: false,\n        };\n    }\n\n\n    // API Anbindung um Vorschläge des Students vom Backend zu bekommen \n    getVorschlaege = () => {\n            LernpartnerAPI.getAPI().getVorschlaegeByPersonByLernfach(this.props.currentPerson.id, this.props.lernfach)\n            .then(vorschlagBOs =>\n                this.setState({\n                    vorschlaege: vorschlagBOs,\n                    error: null,\n                    loadingInProgress: false,\n                })).then(() => {\n                  if (this.state.vorschlaege === null){\n                    this.setState({\n                      test: true,\n                    })\n                    \n                  }\n                })\n                .catch(e =>\n                    this.setState({\n                        vorschlaege: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n            this.setState({\n                error: null,\n                loadingInProgress: true,\n                loadingVorschlaegeError: null\n            });\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        \n\n    }\n    \n    /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {vorschlag} VorschlagBO of the VorschlagListeEintrag to be toggeled\n     */\n    onExpandedStateChange = vorschlag => {\n        // console.log(vorschlagID);\n        // Set expandend Vorschlag Eintrag to null by default\n        let newID = null;\n\n        // If same vorschlag entry is clicked, collapse it else expand a new one\n        if (vorschlag.getID() !== this.state.expandedVorschlagID) {\n        // Expand the customer entry with customerID\n        newID = vorschlag.getID();\n        }\n        // console.log(newID);\n        this.setState({\n        expandedVorschlagID: newID,\n        });\n    }\n\n    render() {\n        const { show, classes, currentPerson, lernfach } = this.props;\n        const { vorschlaege, expandedVorschlagID, error, loadingInProgress}  = this.state;\n        //console.log(lernfach)\n        return (\n          show ?\n          <div className={classes.root}>\n            <h2 style={{ marginTop: '30px'}}>Generiere deine neuen Matches:</h2>\n            <Button style={{ marginBottom: '40px'}} variant=\"contained\" color=\"primary\" onClick= {this.getVorschlaege}>Matches generieren</Button>\n            { \n              // Show the list of VorschlagListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              vorschlaege.map(vorschlag =>\n                <VorschlagListeEintrag key={vorschlag.getID()} vorschlag={vorschlag} currentPerson={currentPerson} expandedState={expandedVorschlagID === vorschlag.getID()}\n                  onExpandedStateChange={this.onExpandedStateChange}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Vorschläge konnten nicht geladen werden!`} onReload={this.getVorschlaege} />\n          </div>\n          : null\n        );\n      }\n    }\n\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n      width: '100%',\n    },\n    customerFilter: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n    }\n  });\n\n/** PropTypes */\nVorschlagListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(VorschlagListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js",["288","289","290","291","292","293","294","295","296","297","298","299"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//import LernpartnerAPI from '../api/LernpartnerAPI'\nimport Profil from './Profil';\nimport { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid, List, ListItem } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport GruppeVerlassenDialog from './dialogs/GruppeVerlassenDialog';\nimport GruppenBearbeitenForm from './dialogs/GruppenBearbeitenForm';\n\n//import LernpartnerAPI from '../api/LernpartnerAPI'\nimport { LernpartnerAPI } from '../api';\n\n\n/**\n * Es werden die Informationen einer Gruppe im Lergruppen Accordion angezeigt.\n */\n\nclass GruppenListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            lerngruppe: this.props.lerngruppe,\n            profil: null,\n            lernvorlieben: null,\n            gruppeName: this.props.lerngruppe.name,\n            teilnahmeGruppe: null,\n            profilID: this.props.lerngruppe.profil,\n            gruppeLernvorliebenID: null,\n            showProfil: false,\n            showLerngruppeVerlassenDialog: false,\n            //showTeilnehmer: false,\n            //showNachrichtenListe: false,\n            showGruppenBearbeitenForm: false,\n            loadingInProgress: false,\n            error: null,\n            showLerngruppeForm: false\n        };\n    }\n\n    /** Handles onChange events of the underlying ExpansionPanel */\n    expansionPanelStateChanged = () => {\n        this.props.onExpandedStateChange(this.props.lerngruppe);\n    }\n\n    /** Event beim Klicken auf den Profil ansehen Button wird definiert */\n    showProfilButtonClicked = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showProfil: true\n        });\n    }\n\n  /** TeilnahmeGruppe holen fürs Verlassen */\n  getTeilnahmeGruppe = () => {\n    LernpartnerAPI.getAPI().getTeilnahmeGruppeByPersonByGruppe(this.props.currentPerson.getID(), this.props.lerngruppe.id)\n    .then(teilnahmeGruppeBO => {\n      this.setState({\n        teilnahmeGruppe: teilnahmeGruppeBO,              // disable loading indicator                 // no error message\n      });\n    }).catch(e =>\n      this.setState({\n        teilnahmeGruppe: null,              // disable loading indicator                     // show error message\n      })\n    );\n    }\n\n    getGruppenProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.state.profilID)\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n                    profil: profilBO,\n                    gruppeLernvorliebenID: profilBO.lernvorlieben_id,\n                    error: null,\n                    loadingInProgress: false,\n                })).then (()=> {\n                    this.getGruppenLernvorlieben();\n                })\n                .catch(e =>\n                    this.setState({\n                        profil: null,\n                        gruppeLernvorliebenID: null,\n                        error: e,\n                        loadingInProgress: false,\n                 }));\n\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n        /** Lernvorlieben der Gruppe holen */\n   getGruppenLernvorlieben = () => {\n   //console.log(profil)\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.gruppeLernvorliebenID)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n\n\n    /**Event beim Klicken auf den Gruppe verlassen Button wird definiert*/\n    verlasseLerngruppeButtonClicked = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showLerngruppeVerlassenDialog: true\n        });\n    }\n\n\n    /** Event beim schließen de */\n    verlasseLerngruppeDialogClosed = (teilnahmeGruppe) => {\n        // if customer is not null, delete it\n        if (teilnahmeGruppe) {\n            this.props.onTeilnahmeGruppeDeleted(teilnahmeGruppe);\n        };\n\n        // Don´t show the dialog\n        this.setState({\n            showLerngruppeVerlassenDialog: false\n        });\n    }\n\n    /** Aufrufen des GruppenBearbeitenForm beim Klicken des Gruppenprofil bearbeiten Button */\n  bearbeitenButtonClicked = (event) => {\n    this.setState({\n      showGruppenBearbeitenForm: true\n    });\n  }\n\n    /** Aufrufen des Profils, nachdem das GruppenBeaarbeitenForm geschlossen wurde*/\n  bearbeitenFormClosed = (profil) => {\n    this.getGruppenProfil();\n    if (profil) {\n        this.setState({\n            profil: profil,\n            showGruppenBearbeitenForm: false,\n        });\n    } else {\n        this.setState({\n          showGruppenBearbeitenForm: false\n        })\n\n    }\n  }\n\n\n\n     /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n   componentDidMount() {\n       this.getTeilnahmeGruppe();\n       this.getGruppenProfil();\n   }\n\n  \n    render(){\n\n          const { classes, expandedState, currentPerson } = this.props;\n          //const { lerngruppe, gruppeName, profilID, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog, showLerngruppeForm } = this.state;\n\n\n          const { lerngruppe, lernvorlieben, gruppeName, profilID, profil, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog, showGruppenBearbeitenForm, showLerngruppeForm, loadingInProgress, error } = this.state;\n            console.log(lerngruppe)\n            console.log(profil)\n            console.log(lernvorlieben)\n            console.log(profilID)\n\n          return (\n            <div>\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  id={`lerngruppe${lerngruppe.getID()}accountpanel-header`}>\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                  <Grid item>\n                    <Typography variant='body1'>\n                        {lerngruppe.getname()}\n                    </Typography>\n                  </Grid>\n                    <Grid item>\n\n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                      <Typography variant='body2' color={'textSecondary'}>Mehr sehen</Typography>\n                    </Grid>\n                  </Grid>\n                  </AccordionSummary>\n                 <AccordionDetails style={{ width : 250, backgroundColor: '#faf0e6', width: '100%'}}>\n                  <List>\n                  <ListItem>\n                  <Profil user={lerngruppe}/>\n                  </ListItem>\n                  <ListItem>\n                  <Button style={{ marginTop: -20, marginLeft: 8}} variant=\"contained\" size=\"small\" color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Gruppenprofil bearbeiten</Button>\n                  <Button style={{ marginTop: -20, marginLeft: 8, width : 250, color: \"#cd5b45\"}} color='secondary' onClick={this.verlasseLerngruppeButtonClicked}>\n                    Gruppe verlassen\n                  </Button>\n                  </ListItem>\n                  </List>\n                </AccordionDetails>\n              </Accordion>\n              \n              <GruppeVerlassenDialog show={showLerngruppeVerlassenDialog} teilnahmeGruppe={teilnahmeGruppe} currentPerson={currentPerson} onClose={this.verlasseLerngruppeDialogClosed}/>\n              <GruppenBearbeitenForm show={showGruppenBearbeitenForm} lerngruppe={lerngruppe} currentProfil ={profil} lernvorlieben={lernvorlieben}  onClose={this.bearbeitenFormClosed}/>\n\n            </div>\n          );\n        }\n}\n\n/** PropTypes */\nGruppenListeEintrag.propTypes = {\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  expandedState: PropTypes.bool.isRequired,\n  onExpandedStateChange: PropTypes.func.isRequired,\n  onTeilnahmeGruppeDeleted: PropTypes.func.isRequired\n}\n\n\nexport default (GruppenListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenForm.js",["300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Typography\n    } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TeachingbeeAPI, GroupBO } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LerngruppeBO from '../../api/LerngruppeBO';\nimport LernvorliebenBO from '../../api/LernvorliebenBO';\nimport TeilnahmeGruppeBO from '../../api/TeilnahmeGruppeBO';\nimport ProfilBO from '../../api/ProfilBO';\nimport KonversationBO from '../../api/KonversationBO';\nimport TeilnahmeChatBO from '../../api/TeilnahmeChatBO';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\nimport GruppenListeEintrag from '../GruppenListeEintrag';\n\n/**\n * Dieses Form zeigt ein Dialog zum Anlegen einer neuen Lerngruppe an.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass GruppenForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lernvorlieben: null,\n            profil: null,\n            lerngruppe: null,\n            konversation: null,\n            teilnahmeChat: null,\n\n            gruppenName: null,\n            gruppenNameValidationFailed: null,\n            gruppenNameEdited: null,\n\n            gruppe: 1,\n\n            person: null,\n\n            lernfaecher: null,\n            lernfachListe: [],\n            lernfaecherValidationFailed: null,\n            lernfaecherNameEdited: null,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: null,\n            tageszeitenEdited: null,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: null,\n\n            frequenz: null,\n            frequenzValidationFailed: null,\n            frequenzEdited: null,\n\n            gruppengroesse: 4,\n\n            lernart: null,\n            lernartValidationFailed: null,\n            lernartEdited: null,\n\n            lernort: null,\n            lernortValidationFailed: null,\n            lernortEdited: null,\n\n            addingInProgress: false,\n            updatingInProgress: false,\n            addingError: null,\n            updatingError: null\n\n        };\n\n        // save this state for canceling\n        this.baseState = this.state;\n        this.lernfaecherSelectionChange = this.lernfaecherSelectionChange.bind(this);\n        this.tageszeitenSelectionChange = this.tageszeitenSelectionChange.bind(this);\n        this.tageSelectionChange = this.tageSelectionChange.bind(this);\n        this.frequenzSelectionChange = this.frequenzSelectionChange.bind(this);\n        this.lernartSelectionChange = this.lernartSelectionChange.bind(this);\n        this.lernortSelectionChange = this.lernortSelectionChange.bind(this);\n    }\n\n    // API Anbindung um die Lernvorliebne der Gruppe ihm Backend hinzuzufügen\n  addLernvorlieben = () => {\n    let newLernvorlieben = new LernvorliebenBO(this.state.tageszeiten, 'null', this.state.tage, 'null', this.state.frequenz, 'null', this.state.lernart, 'null', this.state.gruppengroesse, 'null', this.state.lernort, 'null');\n    LernpartnerAPI.getAPI().addLernvorlieben(newLernvorlieben)\n    .then(lernvorliebenBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n        this.setState({\n            lernvorlieben: lernvorliebenBO,\n            lernfachListe: [this.state.lernfaecher]\n        })).then(() => {\n            this.addProfil();\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n    // API Anbindung um das Profil der Gruppe ihm Backend hinzuzufügen\n  addProfil = () => {\n    let newProfil = new ProfilBO(this.state.gruppe, this.state.lernfachListe, this.state.lernvorlieben.id)\n    console.log(this.state.gruppe)\n    console.log(this.state.lernfachListe)\n    console.log(this.state.lernvorlieben.id)\n    console.log(typeof(this.state.gruppe))\n    console.log(typeof(this.state.lernfachListe))\n    console.log(typeof(this.state.lernvorlieben.id))\n    LernpartnerAPI.getAPI().addProfil(newProfil)\n    .then(profilBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState({\n        profil: profilBO\n      })).then(() => {\n            this.addLerngruppe();\n            //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n    // API Anbindung um die Lerngruppe ihm Backend hinzuzufügen\n  addLerngruppe = () => {\n    let newLerngruppe = new LerngruppeBO();\n    newLerngruppe.setID(0)\n    newLerngruppe.setname(this.state.gruppenName)\n    newLerngruppe.setprofil(this.state.profil.id)\n    LernpartnerAPI.getAPI().addLerngruppe(newLerngruppe)\n    .then(lerngruppeBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState({\n        lerngruppe: lerngruppeBO\n      })).then(() => {\n            this.getPerson();\n            //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n    // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByName(this.props.name)\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            loadingInProgress: false,\n            error: null,\n      })).then(() => {\n            this.addTeilnahmeGruppePartner();\n            //console.log(this.state.profil.id)\n    }).catch(e =>\n              this.setState({\n                person: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n  /** Add Teilnahme Partner an Lerngruppe */\n  addTeilnahmeGruppePartner = () => {\n    let newTeilnahmeGruppe = new TeilnahmeGruppeBO(this.state.person.id, this.state.lerngruppe.id);\n    LernpartnerAPI.getAPI().addTeilnahmeGruppe(newTeilnahmeGruppe)\n    .then(teilnahmeGruppeBO => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.addTeilnahmeGruppe(); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n   }\n\n    // API Anbindung um die Teilnahme an der Gruppe des Students ihm Backend hinzuzufügen\n  addTeilnahmeGruppe = () => {\n    let newTeilnahmeGruppe = new TeilnahmeGruppeBO(this.props.currentPerson.id, this.state.lerngruppe.id);\n    LernpartnerAPI.getAPI().addTeilnahmeGruppe(newTeilnahmeGruppe)\n    .then(teilnahmeGruppeBO => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.addKonversationGruppe(); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  /** Add Konversation der Lerngruppe */\n  addKonversationGruppe = () => {\n    let newTeilnahmeGruppe = new KonversationBO();\n    newTeilnahmeGruppe.id = 0\n    newTeilnahmeGruppe.name = this.state.lerngruppe.name\n    newTeilnahmeGruppe.anfragestatus = true\n    LernpartnerAPI.getAPI().addKonversation(newTeilnahmeGruppe)\n    .then(konversationBO =>\n      this.setState({\n        konversation: konversationBO,\n      })).then(() => {\n        this.addTeilnahmeChatPartner();\n        //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        konversation: null,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n   }\n\n   /** Add TeilnahmeChat */\n  addTeilnahmeChatPartner = () => {\n    let newTeilnahmeChat = new TeilnahmeChatBO()\n    newTeilnahmeChat.id = 0\n    newTeilnahmeChat.teilnehmer = this.state.person.id\n    newTeilnahmeChat.anfrage_sender = this.props.currentPerson.id\n    newTeilnahmeChat.status = true\n    newTeilnahmeChat.konversation = this.state.konversation.id\n    LernpartnerAPI.getAPI().addTeilnahmeChat(newTeilnahmeChat)\n    .then(teilnahmeChatBO =>\n      this.setState({\n        teilnahmeChat: teilnahmeChatBO\n      })).then(() => {\n        this.addTeilnahmeChat();\n        //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Add TeilnahmeChatPartner */\n  addTeilnahmeChat = () => {\n    let newTeilnahmeChat = new TeilnahmeChatBO()\n    newTeilnahmeChat.id = 0\n    newTeilnahmeChat.teilnehmer = this.props.currentPerson.id\n    newTeilnahmeChat.anfrage_sender = this.props.currentPerson.id\n    newTeilnahmeChat.status = true\n    newTeilnahmeChat.konversation = this.state.konversation.id\n    LernpartnerAPI.getAPI().addTeilnahmeChat(newTeilnahmeChat)\n    .then(teilnahmeChatBO => {\n      this.setState(this.baseState);\n      this.props.onClose(teilnahmeChatBO); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  //Setzen der Werte aus der Validierung\n  setStateValueChange(event, error) {\n    this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Handles value changes of the customer select textfield */\n  lernfaecherSelectionChange = (event) => {\n      this.setState({lernfaecher: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  tageszeitenSelectionChange = (event) => {\n      this.setState({tageszeiten: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  tageSelectionChange = (event) => {\n      this.setState({tage: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  frequenzSelectionChange = (event) => {\n      this.setState({frequenz: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  lernartSelectionChange = (event) => {\n      this.setState({lernart: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  lernortSelectionChange = (event) => {\n      this.setState({lernort: event.target.value});\n  }\n\n\n  /** Renders the component */\n  render() {\n    const { classes, show, name } = this.props;\n    const { lernvorlieben, profil, lerngruppe, gruppenName, gruppenNameValidationFailed, gruppenNameEdited, person, lernfaecher, lernfachListe, lernfaecherValidationFailed, lernfaecherNameEdited, tageszeiten, tageszeitenValidationFailed, tageszeitenEdited, tage, tageValidationFailed, tageEdited,\n    frequenz, frequenzValidationFailed, frequenzEdited, lernart, lernartValidationFailed, lernartEdited, lernort, lernortValidationFailed, lernortEdited, addingInProgress, addingError,\n    updatingInProgress, updatingError } = this.state;\n    //console.log(lernfaecher)\n    //console.log(typeof(lernfaecher))\n    //parseInt(lernfaecher, 10)\n    //console.log(parseInt(\"lernfaecher\", 10))\n    //console.log(typeof(lernfaecher))\n    //console.log(profil)\n    //console.log(lernvorlieben.getID())\n    console.log(lernfachListe)\n    console.log(person)\n    console.log(name)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle>Neue Lerngruppe anlegen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          \n          <DialogContent>\n            <b>Bitte fülle für deine neue Lerngruppe folgende Profilinformationen mit euren Präferenzen vollständig aus.</b>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='gruppenName' label='Gruppenname:' value={gruppenName}\n                onChange={this.textFieldValueChange} error={gruppenNameValidationFailed}\n                helperText={gruppenNameValidationFailed ? 'Der Gruppenname muss mindestens ein Zeichen enthalten' : ' '} />\n              \n              <b>Wähle das Lernfach aus, für welches ihr gemeinsam lernt: </b>\n              <br/>\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                \n                <InputLabel>Lernfach:</InputLabel>\n                \n                <Select error={lernfaecherValidationFailed} value={lernfaecher} onChange={this.lernfaecherSelectionChange}>\n                <MenuItem value={1}>Software Entwicklung</MenuItem>\n                <MenuItem value={2}>Data Science</MenuItem>\n                <MenuItem value={3}>Führungsorientiertes Rechnungswesen</MenuItem>\n                <MenuItem value={4}>Medienrecht</MenuItem>\n                <MenuItem value={5}>Crossmedia-Konzeption</MenuItem>\n                <MenuItem value={6}>Web-Technologie</MenuItem>\n                <MenuItem value={7}>Datenbanken</MenuItem>\n                <MenuItem value={8}>IT-Security</MenuItem>\n                <MenuItem value={10}>Naturwissenschaften 1</MenuItem>\n                <MenuItem value={11}>Usability Engineering</MenuItem>\n                <MenuItem value={12}>User Interface Design</MenuItem>\n                <MenuItem value={13}>Informationspsychologie</MenuItem>\n                <MenuItem value={14}>Angewandte Mathematik</MenuItem>\n                <MenuItem value={15}>Data Literacy</MenuItem>\n                <MenuItem value={16}>Anwendungssicherheit</MenuItem>\n                <MenuItem value={17}>Organisation</MenuItem>\n                <MenuItem value={18}>Künstliche Intelligenz</MenuItem>\n                <MenuItem value={19}>Darstellungstechnik</MenuItem>\n                <MenuItem value={20}>Werkstoffprüfung</MenuItem>\n                <MenuItem value={21}>Grundlagen Logistik</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Tageszeiten:</InputLabel>\n                <Select error={tageszeitenValidationFailed} value={tageszeiten} onChange={this.tageszeitenSelectionChange}>\n                <MenuItem value={1}>Morgens</MenuItem>\n                <MenuItem value={2}>Mittags</MenuItem>\n                <MenuItem value={3}>Abends</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Tage:</InputLabel>\n                <Select error={tageValidationFailed} value={tage} onChange={this.tageSelectionChange}>\n                <MenuItem value={1}>Unter der Woche</MenuItem>\n                <MenuItem value={2}>Am Wochenende</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Frequenz:</InputLabel>\n                <Select error={frequenzValidationFailed} value={frequenz} onChange={this.frequenzSelectionChange}>\n                <MenuItem value={1}>Mehrmals die Woche</MenuItem>\n                <MenuItem value={2}>Wöchentlich</MenuItem>\n                <MenuItem value={3}>Alle zwei Wochen</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Lernart:</InputLabel>\n                <Select error={lernartValidationFailed} value={lernart} onChange={this.lernartSelectionChange}>\n                <MenuItem value={1}>Visuell</MenuItem>\n                <MenuItem value={2}>Auditiv</MenuItem>\n                <MenuItem value={3}>Motorisch</MenuItem>\n                <MenuItem value={4}>Kommunikativ</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel >Lernort:</InputLabel>\n                <Select error={lernortValidationFailed} value={lernort} onChange={this.lernortSelectionChange}>\n                <MenuItem value={1}>Remote</MenuItem>\n                <MenuItem value={2}>Hochschule</MenuItem>\n                <MenuItem value={3}>Bibliothek</MenuItem>\n                <MenuItem value={4}>Cafe</MenuItem>\n                </Select>\n              </FormControl>\n            </form>\n            <LoadingProgress show={addingInProgress} />\n\n                <ContextErrorMessage error={addingError} contextErrorMsg={`Die Gruppe konnte nicht angelegt werden.`} onReload={this.addLernvorlieben} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button disabled={gruppenNameValidationFailed || !gruppenNameEdited || !lernfaecher || !tageszeiten || !tage || !frequenz || !lernart || !lernort} variant='contained' onClick={this.addLernvorlieben} color='primary'>\n                Gruppe erstellen\n            </Button>\n\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  formControl: {\n    marginBottom: theme.spacing(1),\n    minWidth: 120,\n  },\n  content: {\n    margin: theme.spacing(1),\n    }\n});\n\n/** PropTypes */\nGruppenForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppenForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageEingangForm.js",["318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js",["344","345","346","347","348","349","350","351","352","353","354","355"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport MultiSelectLernfaecher from './MultiSelectLernfaecher';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n\n/**\n * Dieses Form zeigt ein Dialog zum updaten des eigenen Profils. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass MeinProfilForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere den state\n        this.state = {\n            name: null,\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: [],\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n            \n            updatingError: null,\n            updatingInProgress: false,\n\n            gruppe: 0,\n\n            selectedValue: null,\n            setSelectedValue: null,\n\n        };\n        // State speichern falls cancel\n        this.baseState = this.state;\n        this.handleChangeGeschlecht = this.handleChangeGeschlecht.bind(this);\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.onChangeLernfaecher = this.onChangeLernfaecher.bind(this);\n \n    }\n\n\n    // API Anbindung um eine Person ihm Backend zu aktualisieren\n    updatenPerson = () => {\n        let person = this.props.currentPerson;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n    // API Anbindung um das Profil der Person ihm Backend zu aktualisieren\n    updatenProfil = () => {\n        let profil = this.props.currentProfil;\n        LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\n        ).then(profil => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(profil); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n    // API Anbindung um die Lernvorlieben der Person ihm Backend zu aktualisieren\n    updatenLernvorlieben = () => {\n        let lernvorlieben = this.props.lernvorlieben;\n        lernvorlieben.tageszeiten = this.state.tageszeiten\n        lernvorlieben.tage = this.state.tage\n        lernvorlieben.frequenz = this.state.frequenz\n        lernvorlieben.lernart = this.state.lernart\n        lernvorlieben.gruppengroesse = this.state.gruppengroesse\n        lernvorlieben.lernort = this.state.lernort\n\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            // call the parent with the customer object from backend\n            this.setState(this.baseState);\n            this.props.onClose(lernvorlieben);\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n\n\t/**\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n      handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    handleChangeGeschlecht(event) {\n      this.setState({geschlecht: event.target.value});\n    }\n\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    onChangeLernfaecher(newLernfaecher) {\n      console.log(newLernfaecher)\n      this.setState({\n        lernfaecher: newLernfaecher\n      \n    })\n  }\n\n    \n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, currentProfil, lernvorlieben, lernfaechergesamt } = this.props;\n        const { selectedValue, setSelectedValue, data, lernfaecher_id, lernfaecher_bez, lernfaecherauswahl, profil, name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, tageszeiten,\n          tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\n          lernort, lernortValidationFailed, lernfach, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\n\n        console.log(currentProfil)\n        console.log(currentPerson)\n\n        let title = 'Profil bearbeiten';\n        let header = 'Bitte gib deine neuen Daten ein:';\n\n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname}\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed}\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\n                    onChange={this.numberValueChange} error={semesterValidationFailed}\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} />\n\n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                             <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter}\n                    onChange={this.numberValueChange} error={alterValidationFailed}\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Geschlecht:</InputLabel>\n                             <Select  error={geschlechtValidationFailed} value={geschlecht} onChange={this.handleChangeGeschlecht}>\n                                <MenuItem value='weiblich'>Weiblich</MenuItem>\n                                <MenuItem value='männlich'>Männlich</MenuItem>\n                                <MenuItem value='divers'>Divers</MenuItem>\n                            </Select>\n                   </FormControl>\n                  <br/>\n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select  error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n                  <br/>\n                   <FormControl required fullWidth margin='normal'className={classes.formControl}>\n                            <InputLabel >Welche Tageszeit präferierst du? </InputLabel>\n                             <Select error={tageszeitenValidationFailed} value={tageszeiten}\n                             onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/> \n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                        <MultiSelectLernfaecher lernfaecher = {lernfach} onChangeLernfaecher = {this.onChangeLernfaecher}/>\n                    \n                    \n                    </FormControl>\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\n                      onReload={this.updatenPerson} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={ () => {this.updatenPerson(); this.updatenProfil(); this.updatenLernvorlieben();}} color='primary'>\n                          Änderungen abschließen\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n    margin: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nMeinProfilForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/**\n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MeinProfilForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js",["356","357","358","359","360"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/index.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js",["361","362","363","364","365","366","367","368","369","370"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport Profil from './Profil';\n//import { withStyles } from '@material-ui/core';\n//import { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\n//import ContextErrorMessage from './dialogs/ContextErrorMessage';\n//import LoadingProgress from './dialogs/LoadingProgress';\nimport AnfrageForm from './dialogs/AnfrageForm';\nimport ProfilDialog from './dialogs/ProfilDialog';\n\n/**\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\n */\n\nclass VorschlagListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlag: props.vorschlag,\n            currentPerson: props.currentPerson,\n\n            //match: null,\n\n            profil: null,\n            gruppe: null,\n\n            person: null,\n            currentPersonName: \" und \" + props.currentPerson.vorname + \" \" + props.currentPerson.name,\n\n            nameGes: null,\n            nameNeu: null,\n\n            status: null,\n\n            namePerson: null,\n\n            lerngruppe: null,\n\n            chatPartner: null,\n            chatPartnerProfil: props.vorschlag.match_profil_id,\n\n            teilnahmeChat: null,\n            \n            konversation: null,\n            iskonversation: false,\n            konversationStatus: null,\n\n            showProfilDialog: false,\n            showAnfrageForm: false,\n\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    /** Handles onChange events of the underlying ExpansionPanel */\n    expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.vorschlag);\n    }\n\n    //Handles the onClick event of the show profil button\n    showProfilButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showProfilDialog: true\n      });\n    }\n\n    /** Handles the onClick event of the send Anfrage button */\n    sendAnfrageButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showAnfrageForm: true\n      });\n    }\n\n    //API Call für Profil aus dem Backend\n    getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.vorschlag.match_profil_id)\n    .then(profilBO =>\n      this.setState({\n            profil: profilBO,\n            gruppe: profilBO.gruppe,\n            //profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).then(() => {\n            this.getPartner();\n            \n        }).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          gruppe: null,\n          //profilLernfaecher: null,\n          profilLernvorliebenID: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n    // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByProfil(this.state.vorschlag.match_profil_id)\n      .then(personBO =>\n          this.setState({\n            chatPartner: personBO,\n            namePerson: personBO.vorname+ \" \" + personBO.name,\n            nameGes: personBO.vorname+ \" \" + personBO.name + \" und \" + this.props.currentPerson.vorname+ \" \" + this.props.currentPerson.name,\n            loadingInProgress: false,\n            error: null,\n      })).then(() => {\n            this.getKonversation();\n        }).catch(e =>\n              this.setState({\n                chatPartner: null,\n                nameGes: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um Lerngruppe vom Backend zu bekommen\n    getLerngruppe = () => {\n      LernpartnerAPI.getAPI().getLerngruppeByProfil(this.state.vorschlag.match_profil_id)\n      .then(lerngruppeBO =>\n          this.setState({\n            chatPartner: lerngruppeBO,\n            nameGes: lerngruppeBO.name,\n            loadingInProgress: false,\n            error: null,\n      })).then(() => {\n            this.getKonversation();\n        }).catch(e =>\n              this.setState({\n                chatPartner: null,\n                nameGes: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    //Überprüfen, ob Person oder Gruppe\n    getPartner = () => {\n        if (this.state.gruppe === true){\n            this.getLerngruppe();\n        }else{\n            this.getPerson();\n        }\n    }\n\n  /** API Call Konversation aus Backend */\n  getKonversation = () => {\n    LernpartnerAPI.getAPI().getKonversationByName(this.state.nameGes)\n    .then(konversationBO =>\n      this.setState({\n        konversation: konversationBO,              // disable loading indicator                 // no error message\n        konversationStatus: konversationBO.anfragestatus\n      })).then(() => {\n        this.nameAnpassen();\n        this.getTeilnahme();\n      }).catch(e =>\n      this.setState({\n        konversationBO: false,\n        konversationStatus: false,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  /** API Call TeilnahmeChat aus Backend */\n  getTeilnahme = () => {\n    LernpartnerAPI.getAPI().getTeilnahmeChatByKonversationAndPerson(this.state.konversation.id, this.state.currentPerson.id)\n    .then(teilnahmeChatBO =>\n      this.setState({\n        teilnahmeChat: teilnahmeChatBO,              // disable loading indicator                 // no error message\n        status: teilnahmeChatBO.status,\n      })).catch(e =>\n      this.setState({\n        teilnahmeChat: false,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  //Namen anpassen, in dem Name currentPerson rausgeworfen wird\n  nameAnpassen = () => {\n    this.setState({\n        nameNeu: this.state.konversation.name.replace(this.state.currentPersonName,''),\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  anfrageFormClosed = () => {\n    // customer is not null and therefor changed\n      this.setState({\n        showAnfrageForm: false\n      });\n\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  profilDialogClosed = (profil) => {\n    // customer is not null and therefor changed\n    if (profil) {\n      this.setState({\n        \n        showProfilDialog: false\n      });\n    } else {\n      this.setState({\n        showProfilDialog: false\n      });\n    }\n  }\n\n    componentDidMount() {\n      // load Profil\n      this.getProfil();\n    }\n\n    render(){\n          const { classes, expandedState } = this.props;\n          const { nameNeu, teilnahmeChat, vorschlag, profil, currentPerson, gruppe, person, nameGes, namePerson, status, lerngruppe, chatPartner, chatPartnerProfil, iskonversation, konversation, konversationStatus, showProfil, showProfilDialog, showAnfrageForm } = this.state;\n          \n          return (\n            <div>\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  id={`vorschlag${vorschlag.getID()}accountpanel-header`}>\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item>\n                    {\n                    gruppe ?\n                        <Typography variant='body1' className={classes.heading}>{nameGes}\n                        </Typography>\n                      :\n                        <Typography variant='body1' className={classes.heading}>{namePerson}\n                        </Typography>\n                    }\n\n                    <Typography variant='body1' className={classes.heading}>Matchquote: {vorschlag.getmatch_quote()}%\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                    \n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                      <Typography variant='body2' color={'textSecondary'}>Mehr sehen</Typography>\n                    </Grid>\n                  </Grid>\n                </AccordionSummary>\n                <AccordionDetails>\n                       {\n                       status === 0?\n                        <>\n                            <Button variant=\"contained\" color='secondary' size=\"small\" className={classes.button} onClick={this.showProfilButtonClicked}>\n                              Profil ansehen\n                            </Button>\n                            <h4 style={{ marginLeft : 25, color: \"#bfbfbf\"}}>\n                            Du bist bereits mit {nameNeu} in Kontakt oder es steht bereits eine Kontaktanfrage aus.\n                            </h4>\n                        </>\n                        :\n                        <>\n                            <Button  variant=\"contained\" color='secondary' size=\"small\" className={classes.button} onClick={this.showProfilButtonClicked}>\n                              Profil ansehen\n                            </Button>\n                            <Button  variant=\"contained\" color='secondary' size=\"small\" className={classes.button} onClick={this.sendAnfrageButtonClicked}>\n                              Kontaktanfrage\n                            </Button>\n                        </>\n                       }\n                    </AccordionDetails>\n              </Accordion>\n              <AnfrageForm show={showAnfrageForm} currentPerson={currentPerson} chatPartner={chatPartner} chatPartnerProfil={chatPartnerProfil} onClose={this.anfrageFormClosed} />\n              <ProfilDialog show={showProfilDialog} chatPartner={chatPartner} onClose={this.profilDialogClosed}/>\n            </div>\n          );\n        }\n}\n\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n  button: {\n      margin: theme.spacing(1),\n      },\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n/** PropTypes */\nVorschlagListeEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(VorschlagListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js",["371"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI'\n\n/**\n * Dieses Form zeigt ein Dialog zum Verlassen einer  Lerngruppe an.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\nclass GruppeVerlassenDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      verlassenInProgress: false,\n      verlassenError: null\n    };\n  }\n\n  // API Anbindung um eine Lerngruppe zu verlassen und ihm Backend zu löschen\n  verlasseGruppe = () => {\n    LernpartnerAPI.getAPI().deleteTeilnahmeGruppe(this.props.teilnahmeGruppe.getID())\n    .then(teilnahmeGruppe => {\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: null                     // no error message\n      });\n      this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      verlassenInProgress: true,                 // show loading indicator\n      verlassenError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, teilnahmeGruppe, lerngruppeID, show } = this.props;\n    const { verlassenInProgress, verlassenError } = this.state;\n    //console.log(verlassenInProgress)\n    console.log(teilnahmeGruppe)\n    //console.log(teilnahmeGruppe.id)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Gruppe verlassen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <p>Möchtest du wirklich die Gruppe verlassen?</p>\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du die Gruppe verlässt, verlässt du auch automatisch den Chat!!!</p>\n            </DialogContentText>\n            <LoadingProgress show={verlassenInProgress} />\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Die Gruppe konnte nicht verlassen werden.`}\n              onReload={this.verlasseGruppe} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button variant='contained' onClick={this.verlasseGruppe} color='primary'>\n              Verlassen\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nGruppeVerlassenDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  teilnahmeGruppe: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *\n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppeVerlassenDialog);\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenBearbeitenForm.js",["372","373","374","375","376","377"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport MultiSelectLernfaecher from './MultiSelectLernfaecher';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass GruppenBearbeitenForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere den state\n        this.state = {\n\n            lerngruppe: this.props.lerngruppe,\n            lernvorlieben: this.props.lernvorlieben,\n            name: null,\n            nameValidationFailed: false,\n            nameEdited: false,\n\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: [],\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n\n            gruppe: 1,\n\n            updatingError: null,\n            updatingInProgress: false,\n\n\n        };\n        // State speichern falls cancel\n        this.baseState = this.state;\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.onChangeLernfaecher = this.onChangeLernfaecher.bind(this);\n\n    }\n\n\n\n    // API Anbindung um die Lerngruppe des Students ihm Backend zu aktualisieren\n    updatenGruppe = () => {\n        let lerngruppe = this.props.lerngruppe;\n        lerngruppe.id = this.state.lerngruppe.id\n        lerngruppe.name = this.state.name\n        lerngruppe.profil = this.state.lerngruppe.profil\n\n        LernpartnerAPI.getAPI().updateLerngruppe(this.state.lerngruppe.id, this.state.name, this.state.lerngruppe.profil).then(lerngruppe => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(lerngruppe); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n    // API Anbindung um das Profil ihm Backend zu aktualisieren\n    updatenProfil = () => {\n      let profil = this.props.currentProfil;\n      LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\n      ).then(profil => {\n          // Backend call sucessfull\n          // reinit the dialogs state for a new empty customer\n          this.setState(this.baseState);\n          this.props.onClose(profil); // call the parent with the customer object from backend\n      }).catch(e =>\n          this.setState({\n              updatingInProgress: false,    // disable loading indicator\n              updatingError: e              // show error message\n          })\n      );\n\n      // set loading to true\n      this.setState({\n          updatingInProgress: true,       // show loading indicator\n          updatingError: null             // disable error message\n    });\n    }\n\n\n    // API Anbindung um die Lernvorlieben der Lerngruppe ihm Backend zu aktualisieren\n    updatenLernvorlieben = () => {\n        let lernvorlieben = this.props.lernvorlieben;\n        lernvorlieben.tageszeiten_id = this.state.tageszeiten\n        lernvorlieben.tage_id = this.state.tage\n        lernvorlieben.frequenz_id = this.state.frequenz\n        lernvorlieben.lernart_id = this.state.lernart\n        lernvorlieben.gruppengroesse_id = this.state.gruppengroesse\n        lernvorlieben.lernort_id = this.state.lernort\n\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(lernvorlieben); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n\n\t/**\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n      handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    onChangeLernfaecher(newLernfaecher) {\n      console.log(newLernfaecher)\n      this.setState({\n        lernfaecher: newLernfaecher\n      \n    })\n  }\n\n\n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentProfil, currentPerson, lerngruppe, lernvorlieben } = this.props;\n        console.log(currentProfil)\n        const { name, nameValidationFailed, tageszeiten, tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\n          lernort, lernortValidationFailed, lernfaecher, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\n\n\n        let title = 'Gruppenprofil bearbeiten';\n        let header = 'Bitte gib die neuen Daten ein:';\n\n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Gruppenname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n                  <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tageszeit präferierst du?</InputLabel>\n                             <Select required error={tageszeitenValidationFailed} value={tageszeiten} onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select required error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select required error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select required error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select required error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select required error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                        <MultiSelectLernfaecher onChangeLernfaecher = {this.onChangeLernfaecher}/>\n                    \n                    </FormControl>\n                   <br/>\n\n\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\n                      onReload={this.updatenGruppe} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || tageszeitenValidationFailed || tageValidationFailed || frequenzValidationFailed || lernartValidationFailed || gruppengroesseValidationFailed || lernortValidationFailed || lernfaecherValidationFailed } variant='contained'\n                          onClick={ () => {this.updatenGruppe(); this.updatenProfil(); this.updatenLernvorlieben();}} color='primary'>\n                          Änderungen abschließen\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t},\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    }\n});\n\n/** PropTypes */\nGruppenBearbeitenForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/**\n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppenBearbeitenForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageEingangFormEintrag.js",["378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MultiSelectLernfaecher.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ChatVerlassenForm.js",["404"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\n\n\nclass ChatVerlassenForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      verlassenInProgress: false,\n      verlassenError: null\n    };\n  }\n\n  /** Chat verlassen */\n  verlasseChat = () => {\n    LernpartnerAPI.getAPI().deleteTeilnahmeChat(this.props.teilnahmeChat.getID())\n    .then(teilnahmeChat => {\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: null                     // no error message\n      });\n      this.props.onClose(this.props.teilnahmeChat);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      verlassenInProgress: true,                 // show loading indicator\n      verlassenError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, teilnahmeChat, konversationID, show } = this.props;\n    const { verlassenInProgress, verlassenError } = this.state;\n    //console.log(verlassenInProgress)\n    console.log(teilnahmeChat)\n    //console.log(teilnahmeChat.id)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Chat verlassen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <p>Möchtest du wirklich den Chat verlassen?</p>\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du den Chat verlässt, kannst du nicht mehr an der Konversation teilnehmen!!!</p>\n            </DialogContentText>\n            <LoadingProgress show={verlassenInProgress} />\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Der Chat konnte nicht verlassen werden.`}\n              onReload={this.verlasseChat} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button variant='contained' onClick={this.verlasseChat} color='primary'>\n              Verlassen\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nChatVerlassenForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  teilnahmeChat: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *\n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ChatVerlassenForm);\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageForm.js",["405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListe.js",["428","429","430","431","432","433","434","435","436"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListeEintrag.js",["437","438","439","440","441"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageAusstehendEintrag.js",["442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport Profil from './Profil';\nimport { withStyles, Button, ButtonGroup, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card, Grid,\n    Accordion, AccordionSummary, AccordionDetails,\n    List, ListItem, ListItemText, ListItemSecondaryAction,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Typography\n    } from '@material-ui/core';\n//import { withStyles } from '@material-ui/core';\n//import { withRouter } from 'react-router-dom';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\n//import ContextErrorMessage from './dialogs/ContextErrorMessage';\n//import LoadingProgress from './dialogs/LoadingProgress';\nimport AnfrageForm from './dialogs/AnfrageForm';\nimport ProfilDialog from './dialogs/ProfilDialog';\n\n/**\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\n *\n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\n *\n */\n\nclass AnfrageAusstehendEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n\n            teilnahmenChatAusstehend: props.teilnahmenChatAusstehend,\n            teilnahmenChatAusstehendID: props.teilnahmenChatAusstehend.id,\n\n            teilnahmen: [],\n            chatPartner: null,\n\n            konversation: null,\n            konversationID: null,\n            konversationName: null,\n            konversationAnfragestatus: null,\n\n            testVar: false,\n\n            currentPersonName: \" und \" + props.currentPerson.vorname + \" \" + props.currentPerson.name,\n            nameNeu: null,\n\n            showProfilDialog: false,\n            showAnfrageForm: false,\n\n            loadingInProgress: false,\n            error: null\n        };\n        this.baseState = this.state;\n    }\n\n    // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.state.teilnahmenChatAusstehend.teilnehmer)\n      .then(personBO =>\n        this.setState({\n          chatPartner: personBO,              // disable loading indicator                 // no error message\n          nameNeu: this.state.konversation.name.replace(this.state.currentPersonName,'')\n        })).catch(e =>\n        this.setState({\n          chatPartner: null,\n          updatingInProgress: false,    // disable loading indicator\n          updatingError: e              // show error message\n        })\n      );\n    }\n\n    // API Anbindung um Lerngruppe vom Backend zu bekommen\n    getLerngruppe = () => {\n      LernpartnerAPI.getAPI().getLerngruppe(this.state.teilnahmenChatAusstehend.teilnehmer)\n      .then(lerngruppeBO =>\n          this.setState({\n            chatPartner: lerngruppeBO,\n            nameNeu: this.state.konversation.name,\n      })).catch(e =>\n      this.setState({\n          name: null,\n          loadingInProgress: false,\n          error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n  \n  /** Konversation holen */\n  getKonversation = () => {\n    LernpartnerAPI.getAPI().getKonversation(this.state.teilnahmenChatAusstehend.konversation)\n    .then(konversationBO =>\n      this.setState({\n        konversation: konversationBO,              // disable loading indicator                 // no error message\n        konversationID: konversationBO.id,\n        konversationName: konversationBO.name,\n        konversationAnfragestatus: konversationBO.anfragestatus\n      })).then(() => {\n        this.nameAnpassen();\n        this.getTeilnahmeChats();\n    }).catch(e =>\n      this.setState({\n        konversation: null,\n        konversationID: null,\n        konversationName: null,\n        konversationAnfragestatus: null,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  getTeilnahmeChats = () => {\n    LernpartnerAPI.getAPI().getTeilnahmeChatByStatusByKonversation(0, this.state.konversationID)\n    .then(teilnahmeChatBOs =>\n      this.setState({\n        teilnahmen: teilnahmeChatBOs,              // disable loading indicator                 // no error message\n      })).catch(e =>\n      this.setState({\n        teilnahmen: null,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  nameAnpassen = () => {\n    if (this.state.konversation.name.includes(this.state.currentPersonName)){\n        this.getPerson();\n    }else{\n        this.getLerngruppe();\n     }\n  }\n\n  //Handles the onClick event of the show profil button\n  showProfilButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showProfilDialog: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  profilDialogClosed = (profil) => {\n    // customer is not null and therefor changed\n    if (profil) {\n      this.setState({\n        showProfilDialog: false\n      });\n    } else {\n      this.setState({\n        showProfilDialog: false\n      });\n    }\n  }\n\n  //Setzen des Status, bei schließen des Dialogs\n  handleClose = () => {\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n    this.getKonversation();\n  }\n\n    render(){\n          const { classes, show, expandedState } = this.props;\n          const { teilnahmenChatAusstehend, teilnahmenChatAusstehendID, teilnahmen, nameNeu, konversation, konversationID, konversationAnfragestatus, chatPartner, showProfilDialog } = this.state;\n          console.log(chatPartner)\n          console.log(konversationID)\n          console.log(teilnahmenChatAusstehend)\n          console.log(teilnahmenChatAusstehendID)\n          console.log(konversationAnfragestatus)\n\n          return (\n            <div>\n            <div className={classes.list}>\n               <List>\n                <ListItem>\n                  <ListItemText primary={nameNeu} className={classes.name}/>\n                    <Button color='secondary' onClick={this.showProfilButtonClicked}>\n                        Profil ansehen\n                    </Button>\n                  </ListItem>\n               </List>\n             </div>\n            <ProfilDialog show={showProfilDialog} chatPartner={chatPartner} onClose={this.profilDialogClosed}/>\n          </div>\n          );\n        }\n}\n\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  buttonAnnehmen: {\n    margin: theme.spacing(1),\n    },\n  buttonAblehnen: {\n    margin: theme.spacing(1),\n    backgroundColor: '#CC3333'\n  },\n  list: {\n    backgroundColor: theme.palette.grey[100],\n  }\n  });\n\n/** PropTypes */\nAnfrageAusstehendEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  expandedState: PropTypes.bool.isRequired,\n}\n\nexport default withStyles(styles)(AnfrageAusstehendEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfilDialog.js",["468","469","470","471"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI'\n\nclass ProfilDialog extends Component {\n\n    constructor(props) {\n      super(props);\n  \n      // Init the state\n      this.state = {\n            person: null,\n            profil: null,\n            \n            lernvorlieben: null,\n            \n            tageszeiten: null,\n            tage: null,\n            frequenz: null,\n            lernart: null,\n            gruppengroesse: null,\n            lernort: null,\n            gruppe: null,\n            personVorname: null,\n            personName: null,\n            personAlter: null,\n            personGeschlecht: null,\n            personSemester: 0,\n            personStudiengang: null,\n            lerngruppe: false,\n            lerngruppeName: null,\n            personProfilID: null,\n            lernfaecher: [],\n            lernfaechernamen: [],\n            personLernvorliebenID: null,\n            profilError: null,\n            loadingInProgress: false,\n            loadingError: null,\n      };\n    }\n  \n    getProfil = () => {\n        console.log('Test')\n        LernpartnerAPI.getAPI().getProfil(this.props.chatPartner.profil)\n        .then(profilBO =>\n          this.setState({\n                profil: profilBO,\n                gruppe: profilBO.gruppe,\n                lernfaecher: profilBO.lernfaecher,\n                loadingInProgress: false,\n                error: null\n          })).then(() => {\n            this.getPartner();\n            this.getLernfaecher();\n            //console.log(this.state.profil.id)\n        }).catch(e =>\n            this.setState({ // Reset state with error from catch\n              gruppeProfil: null,\n              loadingInProgress: false,\n              error: e,\n            })\n          );\n        }\n\n    getLernvorlieben = () => {\n        LernpartnerAPI.getAPI().getLernvorlieben(this.state.profil.lernvorlieben_id)\n        .then(lernvorliebenBO =>\n          this.setState({\n                lernvorlieben: lernvorliebenBO,\n                tageszeiten: lernvorliebenBO.tageszeiten_bez,\n                tage: lernvorliebenBO.tage_bez,\n                frequenz: lernvorliebenBO.frequenz_bez,\n                lernart: lernvorliebenBO.lernart_bez,\n                gruppengroesse: lernvorliebenBO.gruppengroesse_bez,\n                lernort: lernvorliebenBO.lernort_bez,\n                loadingInProgress: false,\n                error: null\n          })).catch(e =>\n            this.setState({ // Reset state with error from catch\n              lernvorlieben: null,\n              loadingInProgress: false,\n              error: e,\n            })\n          );\n    \n        // set loading to true\n        this.setState({\n          loadingInProgress: true,\n          loadingError: null\n        });\n      }\n\n      // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n        \n        LernpartnerAPI.getAPI().getPersonByProfil(this.props.chatPartner.profil)\n        .then(personBO =>\n            this.setState({\n              person: personBO,\n              personName: personBO.name,\n              personVorname: personBO.vorname,\n              personAlter: personBO.alter,\n              personGeschlecht: personBO.geschlecht,\n              personStudiengang: personBO.studiengang,\n              personSemester: personBO.semester,\n              loadingInProgress: false,\n              error: null,\n        })).then(() => {\n            this.getLernvorlieben();\n        }).catch(e =>\n                this.setState({\n                  person: null,\n                  personName: null,\n                  personVorname: null,\n                  loadingInProgress: false,\n                  error: e,\n                }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n      }\n  \n      // API Anbindung um Lerngruppe vom Backend zu bekommen\n      getLerngruppe = () => {\n        console.log('testGruppe')\n        LernpartnerAPI.getAPI().getLerngruppeByProfil(this.props.chatPartner.profil)\n        .then(lerngruppeBO =>\n            this.setState({\n              lerngruppe: lerngruppeBO,\n              lerngruppeName: lerngruppeBO.name,\n              loadingInProgress: false,\n              error: null,\n        })).then(() => {\n            this.getLernvorlieben();\n        }).catch(e =>\n                this.setState({\n                  lerngruppe: null,\n                  lerngruppeName: null,\n                  loadingInProgress: false,\n                  error: e,\n                }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n      }\n\n    // API Anbindung um die Lernfächer der Person vom Backend zu bekommen\n    getLernfaecher = () => {\n        LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.chatPartner.profil)\n        .then(lernfaecherBOs =>\n          this.setState({\n                personLernfaecher: lernfaecherBOs,\n                lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\n                loadingInProgress: false,\n                error: null\n          }))\n          .catch(e =>\n            this.setState({ // Reset state with error from catch\n              personLernfaecher: null,\n              loadingInProgress: false,\n              error: e,\n            })\n          );\n    \n        // set loading to true\n        this.setState({\n          loadingInProgress: true,\n          loadingError: null\n        });\n      }\n\n    getPartner = () => {\n        if (this.state.gruppe === true){\n            console.log('test1')\n            this.getLerngruppe();\n        } else {\n            console.log('test2')\n            this.getPerson();\n        }\n    }\n\n    getInfos = () => {\n        console.log('Bin da')\n        // load initial balance\n        this.getProfil();\n        \n      }\n    \n    /** Handles the close / cancel button click event */\n    handleClose = () => {\n        // Reset the state\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n    \n  \n    /** Renders the component */\n    render() {\n      const { classes, teilnahmeGruppe, chatPartner, show } = this.props;\n      const { personName, personVorname, personAlter, personGeschlecht, personStudiengang, personSemester, lernfaecher, lernfaechernamen, gruppe, lerngruppeName, profil, tageszeiten, lernort, lernart, frequenz, gruppengroesse, tage, verlassenInProgress, profilError } = this.state;\n      //console.log(verlassenInProgress)\n      console.log(teilnahmeGruppe)\n      console.log(chatPartner)\n      \n      console.log(gruppe)\n      console.log(lerngruppeName)\n      //console.log(teilnahmeGruppe.id)\n  \n      return (\n        \n        show ?\n          <Dialog open={show} onEnter={this.getInfos} onClose={this.handleClose}>\n            <DialogTitle id='profil-dialog-title'>Profil anzeigen\n              <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                <CloseIcon />\n              </IconButton>\n            </DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                  \n            {\n            gruppe ?\n                <>\n                    \n                    <b> Gruppenname: </b>{chatPartner.name}<br /><br />\n                    <b>Lernfächer:</b>\n                    {\n                        lernfaechernamen.map(lernfach => \n                          <li>{lernfach}</li>\n                        )\n                                 \n                    }\n                    <br/>\n                    <b>Lernvorlieben:</b><br/>\n                    Tageszeiten: {tageszeiten}<br />\n                    Tage: {tage}<br />\n                    Frequenz: {frequenz}<br />\n                    Lernart: {lernart}<br />\n                    Lernort: {lernort}\n                </>\n\n                :\n                <>\n                    <p>Profil von {chatPartner.vorname} {chatPartner.name} </p>\n                    \n                    <b>Alter: </b> {personAlter}<br/>\n                    <b>Semester: </b> {personSemester}<br/>\n                    <b>Studiengang: </b>{personStudiengang}<br/>\n                    <b>Geschlecht: </b> {personGeschlecht}<br/>\n                    <b>Lernfächer: </b> \n                    {\n                        lernfaechernamen.map(lernfach => \n                          <li>{lernfach}</li>\n                        )\n                                 \n                    }\n                    <br/>\n                    <b>Lernvorlieben:</b><br/>\n                    Tageszeiten: {tageszeiten}<br />\n                    Tage: {tage}<br />\n                    Frequenz: {frequenz}<br />\n                    Lernart: {lernart}<br />\n                    Gruppengröße: {gruppengroesse}<br/>\n                    Lernort: {lernort}\n                   \n                </>\n           }    \n              </DialogContentText>\n              <LoadingProgress show={verlassenInProgress} />\n              <ContextErrorMessage error={profilError} contextErrorMsg={`Die Gruppe konnte nicht verlassen werden.`}\n                 />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.handleClose} color='secondary'>\n                Abbrechen\n              </Button>\n              \n            </DialogActions>\n          </Dialog>\n          : null\n        \n      );\n    }\n  }\n  \n  \n  /** Component specific styles */\n  const styles = theme => ({\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    }\n  });\n  \n  /** PropTypes */\n  ProfilDialog.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** The CustomerBO to be deleted */\n    chatPartner: PropTypes.object.isRequired,\n    /** If true, the dialog is rendered */\n    show: PropTypes.bool.isRequired,\n    /**\n     * Handler function which is called, when the dialog is closed.\n     * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n     *\n     * Signature: onClose(CustomerBO customer);\n     */\n    onClose: PropTypes.func.isRequired,\n  }\n  \n  export default withStyles(styles)(ProfilDialog);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfilLoeschenForm.js",["472","473","474"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\nimport firebase from 'firebase/app';\n\n/**\n * Dieses Form zeigt ein Dialog zum Löschen des eigenen Profils an.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass ProfilLoeschenForm extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n        loeschenInProgress: false,\n        loeschenError: null\n        };\n    }\n\n    // API Anbindung um eine Person ihm Backend zu löschen\n    loeschenPerson = () => {\n        LernpartnerAPI.getAPI().deletePerson(this.props.currentPerson.getID())\n            .then(person => {\n                this.setState({\n                    loeschenInProgress: false,              // disable loading indicator\n                    loeschenError: null                     // no error message\n                });\n                this.props.onClose(this.props.currentPerson);  // call the parent with the deleted customer\n            }).then(() => {\n                firebase.auth().signOut();\n            }).catch(e =>\n            this.setState({\n                loeschenInProgress: false,              // disable loading indicator\n                loeschenError: e                        // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            verlassenInProgress: true,                 // show loading indicator\n            verlassenError: null                       // disable error message\n        });\n    }\n\n    // API Anbindung um ein Lernvorlieben ihm Backend zu löschen\n    loeschenLernvorlieben = () => {\n        LernpartnerAPI.getAPI().deleteLernvorlieben(this.props.lernvorlieben.getID())\n            .then(lernvorlieben => {\n                this.setState({\n                    loeschenInProgress: false,              // disable loading indicator\n                    loeschenError: null                     // no error message\n                });\n                this.props.onClose(this.props.lernvorlieben);  // call the parent with the deleted customer\n            }).catch(e =>\n            this.setState({\n                loeschenInProgress: false,              // disable loading indicator\n                loeschenError: e                        // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            verlassenInProgress: true,                 // show loading indicator\n            verlassenError: null                       // disable error message\n        });\n    }\n\n    // API Anbindung um die Teilnahme in Gruppen ihm Backend zu löschen\n    loeschenTeilnahmeGruppe = () => {\n        LernpartnerAPI.getAPI().deleteTeilnahmeGruppe(this.props.currentPerson.getID())\n            .then(teilnahmeGruppe => {\n                this.setState({\n                    verlassenInProgress: false,              // disable loading indicator\n                    verlassenError: null                     // no error message\n                });\n                this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\n            }).then(() => {\n                this.loeschenTeilnahmeChat();\n            }).catch(e =>\n            this.setState({\n                verlassenInProgress: false,              // disable loading indicator\n                verlassenError: e                        // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            verlassenInProgress: true,                 // show loading indicator\n            verlassenError: null                       // disable error message\n        });\n    }\n\n    // API Anbindung um die Teilnahme in einem Chat ihm Backend zu löschen\n    loeschenTeilnahmeChat = () => {\n        LernpartnerAPI.getAPI().deleteTeilnahmeChatByPerson(this.props.currentPerson.getID())\n            .then(teilnahmeGruppe => {\n                this.setState({\n                    verlassenInProgress: false,              // disable loading indicator\n                    verlassenError: null                     // no error message\n                });\n                this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\n            }).then(() => {\n                this.loeschenPerson();\n            }).catch(e =>\n            this.setState({\n                verlassenInProgress: false,              // disable loading indicator\n                verlassenError: e                        // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            verlassenInProgress: true,                 // show loading indicator\n            verlassenError: null                       // disable error message\n        });\n    }\n\n    /** Handles the close / cancel button click event */\n    handleClose = () => {\n        // console.log(event);\n        this.props.onClose(null);\n    }\n\n    /** Renders the component */\n    render() {\n        const { classes, show, currentPerson, currentProfil, lernvorlieben, teilnahmeGruppe } = this.props;\n        const { loeschenInProgress, loeschenError } = this.state;\n        console.log(teilnahmeGruppe)\n        return (\n            show ?\n                <Dialog open={show} onClose={this.handleClose}>\n                    <DialogTitle id='delete-dialog-title'>Profil löschen\n                        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            <p>Möchtest du wirklich dein Profil löschen?</p>\n                            <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du dein Profil löscht, dann werden alle deine Daten gelöscht!!!</p>\n                        </DialogContentText>\n                        <LoadingProgress show={loeschenInProgress} />\n                        <ContextErrorMessage error={loeschenError} contextErrorMsg={`Dein Profil konnte nicht gelöscht werden.`}\n                                             onReload={ () => {this.loeschenTeilnahmeGruppe(); this.loeschenPerson(); this.loeschenProfil(); this.loeschenLernvorlieben();}} />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={ () => {this.handleClose()}} color='secondary'>\n                            Abbrechen\n                        </Button>\n                        <Button variant='contained' onClick={this.loeschenTeilnahmeGruppe} color='primary'>\n                            Profil löschen\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                : null\n        );\n    }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    }\n});\n\n/** PropTypes */\nProfilLoeschenForm.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired,\n    /**\n     * Handler function, which is called if the user wants to sign in.\n     */\n\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ProfilLoeschenForm);\n\n\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/Signin.js",[],{"ruleId":"475","replacedBy":"476"},{"ruleId":"477","replacedBy":"478"},{"ruleId":"479","severity":1,"message":"480","line":1,"column":17,"nodeType":"481","messageId":"482","endLine":1,"endColumn":26},{"ruleId":"479","severity":1,"message":"483","line":13,"column":8,"nodeType":"481","messageId":"482","endLine":13,"endColumn":25},{"ruleId":"479","severity":1,"message":"484","line":19,"column":8,"nodeType":"481","messageId":"482","endLine":19,"endColumn":14},{"ruleId":"479","severity":1,"message":"485","line":2,"column":41,"nodeType":"481","messageId":"482","endLine":2,"endColumn":45},{"ruleId":"479","severity":1,"message":"486","line":3,"column":22,"nodeType":"481","messageId":"482","endLine":3,"endColumn":32},{"ruleId":"479","severity":1,"message":"487","line":3,"column":34,"nodeType":"481","messageId":"482","endLine":3,"endColumn":40},{"ruleId":"479","severity":1,"message":"488","line":3,"column":42,"nodeType":"481","messageId":"482","endLine":3,"endColumn":47},{"ruleId":"479","severity":1,"message":"485","line":3,"column":49,"nodeType":"481","messageId":"482","endLine":3,"endColumn":53},{"ruleId":"479","severity":1,"message":"489","line":3,"column":55,"nodeType":"481","messageId":"482","endLine":3,"endColumn":59},{"ruleId":"479","severity":1,"message":"490","line":4,"column":10,"nodeType":"481","messageId":"482","endLine":4,"endColumn":20},{"ruleId":"479","severity":1,"message":"491","line":6,"column":8,"nodeType":"481","messageId":"482","endLine":6,"endColumn":27},{"ruleId":"479","severity":1,"message":"492","line":7,"column":8,"nodeType":"481","messageId":"482","endLine":7,"endColumn":23},{"ruleId":"493","severity":1,"message":"494","line":30,"column":13,"nodeType":"495","messageId":"496","endLine":30,"endColumn":19},{"ruleId":"479","severity":1,"message":"497","line":217,"column":22,"nodeType":"481","messageId":"482","endLine":217,"endColumn":26},{"ruleId":"479","severity":1,"message":"498","line":219,"column":46,"nodeType":"481","messageId":"482","endLine":219,"endColumn":59},{"ruleId":"479","severity":1,"message":"499","line":219,"column":108,"nodeType":"481","messageId":"482","endLine":219,"endColumn":122},{"ruleId":"479","severity":1,"message":"500","line":219,"column":132,"nodeType":"481","messageId":"482","endLine":219,"endColumn":153},{"ruleId":"479","severity":1,"message":"501","line":219,"column":155,"nodeType":"481","messageId":"482","endLine":219,"endColumn":173},{"ruleId":"479","severity":1,"message":"502","line":219,"column":193,"nodeType":"481","messageId":"482","endLine":219,"endColumn":210},{"ruleId":"479","severity":1,"message":"503","line":219,"column":212,"nodeType":"481","messageId":"482","endLine":219,"endColumn":217},{"ruleId":"479","severity":1,"message":"488","line":3,"column":10,"nodeType":"481","messageId":"482","endLine":3,"endColumn":15},{"ruleId":"479","severity":1,"message":"486","line":3,"column":17,"nodeType":"481","messageId":"482","endLine":3,"endColumn":27},{"ruleId":"479","severity":1,"message":"487","line":4,"column":22,"nodeType":"481","messageId":"482","endLine":4,"endColumn":28},{"ruleId":"479","severity":1,"message":"504","line":4,"column":30,"nodeType":"481","messageId":"482","endLine":4,"endColumn":39},{"ruleId":"479","severity":1,"message":"505","line":4,"column":41,"nodeType":"481","messageId":"482","endLine":4,"endColumn":55},{"ruleId":"479","severity":1,"message":"506","line":4,"column":57,"nodeType":"481","messageId":"482","endLine":4,"endColumn":67},{"ruleId":"479","severity":1,"message":"488","line":16,"column":8,"nodeType":"481","messageId":"482","endLine":16,"endColumn":13},{"ruleId":"479","severity":1,"message":"507","line":116,"column":30,"nodeType":"481","messageId":"482","endLine":116,"endColumn":38},{"ruleId":"479","severity":1,"message":"506","line":3,"column":30,"nodeType":"481","messageId":"482","endLine":3,"endColumn":40},{"ruleId":"479","severity":1,"message":"508","line":3,"column":123,"nodeType":"481","messageId":"482","endLine":3,"endColumn":127},{"ruleId":"479","severity":1,"message":"509","line":12,"column":8,"nodeType":"481","messageId":"482","endLine":12,"endColumn":17},{"ruleId":"479","severity":1,"message":"510","line":314,"column":32,"nodeType":"481","messageId":"482","endLine":314,"endColumn":45},{"ruleId":"479","severity":1,"message":"511","line":345,"column":11,"nodeType":"481","messageId":"482","endLine":345,"endColumn":38},{"ruleId":"479","severity":1,"message":"512","line":2,"column":10,"nodeType":"481","messageId":"482","endLine":2,"endColumn":20},{"ruleId":"479","severity":1,"message":"513","line":4,"column":8,"nodeType":"481","messageId":"482","endLine":4,"endColumn":18},{"ruleId":"479","severity":1,"message":"514","line":5,"column":8,"nodeType":"481","messageId":"482","endLine":5,"endColumn":22},{"ruleId":"479","severity":1,"message":"515","line":8,"column":8,"nodeType":"481","messageId":"482","endLine":8,"endColumn":20},{"ruleId":"493","severity":1,"message":"516","line":150,"column":3,"nodeType":"495","messageId":"496","endLine":150,"endColumn":14},{"ruleId":"493","severity":1,"message":"517","line":154,"column":3,"nodeType":"495","messageId":"496","endLine":154,"endColumn":14},{"ruleId":"479","severity":1,"message":"518","line":9,"column":18,"nodeType":"481","messageId":"482","endLine":9,"endColumn":29},{"ruleId":"479","severity":1,"message":"519","line":180,"column":49,"nodeType":"481","messageId":"482","endLine":180,"endColumn":72},{"ruleId":"479","severity":1,"message":"520","line":3,"column":34,"nodeType":"481","messageId":"482","endLine":3,"endColumn":48},{"ruleId":"479","severity":1,"message":"521","line":3,"column":50,"nodeType":"481","messageId":"482","endLine":3,"endColumn":55},{"ruleId":"479","severity":1,"message":"522","line":3,"column":57,"nodeType":"481","messageId":"482","endLine":3,"endColumn":66},{"ruleId":"479","severity":1,"message":"523","line":3,"column":68,"nodeType":"481","messageId":"482","endLine":3,"endColumn":77},{"ruleId":"479","severity":1,"message":"524","line":3,"column":86,"nodeType":"481","messageId":"482","endLine":3,"endColumn":94},{"ruleId":"479","severity":1,"message":"525","line":3,"column":96,"nodeType":"481","messageId":"482","endLine":3,"endColumn":105},{"ruleId":"479","severity":1,"message":"485","line":3,"column":107,"nodeType":"481","messageId":"482","endLine":3,"endColumn":111},{"ruleId":"479","severity":1,"message":"489","line":3,"column":113,"nodeType":"481","messageId":"482","endLine":3,"endColumn":117},{"ruleId":"479","severity":1,"message":"526","line":3,"column":119,"nodeType":"481","messageId":"482","endLine":3,"endColumn":128},{"ruleId":"479","severity":1,"message":"491","line":9,"column":8,"nodeType":"481","messageId":"482","endLine":9,"endColumn":27},{"ruleId":"479","severity":1,"message":"492","line":10,"column":8,"nodeType":"481","messageId":"482","endLine":10,"endColumn":23},{"ruleId":"479","severity":1,"message":"527","line":318,"column":15,"nodeType":"481","messageId":"482","endLine":318,"endColumn":19},{"ruleId":"479","severity":1,"message":"528","line":318,"column":21,"nodeType":"481","messageId":"482","endLine":318,"endColumn":35},{"ruleId":"479","severity":1,"message":"529","line":318,"column":37,"nodeType":"481","messageId":"482","endLine":318,"endColumn":52},{"ruleId":"479","severity":1,"message":"530","line":318,"column":80,"nodeType":"481","messageId":"482","endLine":318,"endColumn":92},{"ruleId":"479","severity":1,"message":"531","line":318,"column":169,"nodeType":"481","messageId":"482","endLine":318,"endColumn":186},{"ruleId":"479","severity":1,"message":"532","line":318,"column":188,"nodeType":"481","messageId":"482","endLine":318,"endColumn":196},{"ruleId":"479","severity":1,"message":"500","line":318,"column":217,"nodeType":"481","messageId":"482","endLine":318,"endColumn":238},{"ruleId":"479","severity":1,"message":"502","line":318,"column":480,"nodeType":"481","messageId":"482","endLine":318,"endColumn":497},{"ruleId":"479","severity":1,"message":"503","line":318,"column":499,"nodeType":"481","messageId":"482","endLine":318,"endColumn":504},{"ruleId":"533","severity":1,"message":"534","line":633,"column":9,"nodeType":"535","messageId":"496","endLine":640,"endColumn":10},{"ruleId":"479","severity":1,"message":"504","line":4,"column":30,"nodeType":"481","messageId":"482","endLine":4,"endColumn":39},{"ruleId":"479","severity":1,"message":"505","line":4,"column":41,"nodeType":"481","messageId":"482","endLine":4,"endColumn":55},{"ruleId":"479","severity":1,"message":"506","line":4,"column":57,"nodeType":"481","messageId":"482","endLine":4,"endColumn":67},{"ruleId":"479","severity":1,"message":"489","line":4,"column":69,"nodeType":"481","messageId":"482","endLine":4,"endColumn":73},{"ruleId":"479","severity":1,"message":"486","line":4,"column":75,"nodeType":"481","messageId":"482","endLine":4,"endColumn":85},{"ruleId":"479","severity":1,"message":"532","line":99,"column":47,"nodeType":"481","messageId":"482","endLine":99,"endColumn":55},{"ruleId":"479","severity":1,"message":"490","line":5,"column":10,"nodeType":"481","messageId":"482","endLine":5,"endColumn":20},{"ruleId":"479","severity":1,"message":"536","line":6,"column":10,"nodeType":"481","messageId":"482","endLine":6,"endColumn":20},{"ruleId":"479","severity":1,"message":"518","line":7,"column":18,"nodeType":"481","messageId":"482","endLine":7,"endColumn":29},{"ruleId":"479","severity":1,"message":"491","line":13,"column":8,"nodeType":"481","messageId":"482","endLine":13,"endColumn":27},{"ruleId":"479","severity":1,"message":"492","line":14,"column":8,"nodeType":"481","messageId":"482","endLine":14,"endColumn":23},{"ruleId":"479","severity":1,"message":"537","line":187,"column":19,"nodeType":"481","messageId":"482","endLine":187,"endColumn":26},{"ruleId":"479","severity":1,"message":"538","line":191,"column":46,"nodeType":"481","messageId":"482","endLine":191,"endColumn":56},{"ruleId":"479","severity":1,"message":"539","line":191,"column":93,"nodeType":"481","messageId":"482","endLine":191,"endColumn":103},{"ruleId":"479","severity":1,"message":"540","line":191,"column":163,"nodeType":"481","messageId":"482","endLine":191,"endColumn":181},{"ruleId":"479","severity":1,"message":"502","line":191,"column":183,"nodeType":"481","messageId":"482","endLine":191,"endColumn":200},{"ruleId":"479","severity":1,"message":"503","line":191,"column":202,"nodeType":"481","messageId":"482","endLine":191,"endColumn":207},{"ruleId":"493","severity":1,"message":"541","line":218,"column":86,"nodeType":"495","messageId":"496","endLine":218,"endColumn":91},{"ruleId":"479","severity":1,"message":"542","line":3,"column":78,"nodeType":"481","messageId":"482","endLine":3,"endColumn":95},{"ruleId":"479","severity":1,"message":"508","line":3,"column":123,"nodeType":"481","messageId":"482","endLine":3,"endColumn":127},{"ruleId":"479","severity":1,"message":"486","line":8,"column":5,"nodeType":"481","messageId":"482","endLine":8,"endColumn":15},{"ruleId":"479","severity":1,"message":"543","line":11,"column":10,"nodeType":"481","messageId":"482","endLine":11,"endColumn":24},{"ruleId":"479","severity":1,"message":"544","line":11,"column":26,"nodeType":"481","messageId":"482","endLine":11,"endColumn":33},{"ruleId":"479","severity":1,"message":"490","line":12,"column":10,"nodeType":"481","messageId":"482","endLine":12,"endColumn":20},{"ruleId":"479","severity":1,"message":"545","line":22,"column":8,"nodeType":"481","messageId":"482","endLine":22,"endColumn":27},{"ruleId":"479","severity":1,"message":"498","line":379,"column":13,"nodeType":"481","messageId":"482","endLine":379,"endColumn":26},{"ruleId":"479","severity":1,"message":"546","line":379,"column":28,"nodeType":"481","messageId":"482","endLine":379,"endColumn":34},{"ruleId":"479","severity":1,"message":"547","line":379,"column":36,"nodeType":"481","messageId":"482","endLine":379,"endColumn":46},{"ruleId":"479","severity":1,"message":"548","line":379,"column":174,"nodeType":"481","messageId":"482","endLine":379,"endColumn":195},{"ruleId":"479","severity":1,"message":"549","line":379,"column":239,"nodeType":"481","messageId":"482","endLine":379,"endColumn":256},{"ruleId":"479","severity":1,"message":"550","line":379,"column":286,"nodeType":"481","messageId":"482","endLine":379,"endColumn":296},{"ruleId":"479","severity":1,"message":"551","line":380,"column":41,"nodeType":"481","messageId":"482","endLine":380,"endColumn":55},{"ruleId":"479","severity":1,"message":"552","line":380,"column":91,"nodeType":"481","messageId":"482","endLine":380,"endColumn":104},{"ruleId":"479","severity":1,"message":"553","line":380,"column":140,"nodeType":"481","messageId":"482","endLine":380,"endColumn":153},{"ruleId":"479","severity":1,"message":"554","line":381,"column":5,"nodeType":"481","messageId":"482","endLine":381,"endColumn":23},{"ruleId":"479","severity":1,"message":"555","line":381,"column":25,"nodeType":"481","messageId":"482","endLine":381,"endColumn":38},{"ruleId":"479","severity":1,"message":"487","line":3,"column":22,"nodeType":"481","messageId":"482","endLine":3,"endColumn":28},{"ruleId":"479","severity":1,"message":"518","line":3,"column":30,"nodeType":"481","messageId":"482","endLine":3,"endColumn":41},{"ruleId":"479","severity":1,"message":"542","line":3,"column":91,"nodeType":"481","messageId":"482","endLine":3,"endColumn":108},{"ruleId":"479","severity":1,"message":"556","line":3,"column":110,"nodeType":"481","messageId":"482","endLine":3,"endColumn":123},{"ruleId":"479","severity":1,"message":"504","line":3,"column":125,"nodeType":"481","messageId":"482","endLine":3,"endColumn":134},{"ruleId":"479","severity":1,"message":"557","line":4,"column":5,"nodeType":"481","messageId":"482","endLine":4,"endColumn":14},{"ruleId":"479","severity":1,"message":"558","line":4,"column":16,"nodeType":"481","messageId":"482","endLine":4,"endColumn":32},{"ruleId":"479","severity":1,"message":"559","line":4,"column":34,"nodeType":"481","messageId":"482","endLine":4,"endColumn":50},{"ruleId":"479","severity":1,"message":"560","line":5,"column":35,"nodeType":"481","messageId":"482","endLine":5,"endColumn":58},{"ruleId":"479","severity":1,"message":"561","line":6,"column":5,"nodeType":"481","messageId":"482","endLine":6,"endColumn":16},{"ruleId":"479","severity":1,"message":"513","line":7,"column":5,"nodeType":"481","messageId":"482","endLine":7,"endColumn":15},{"ruleId":"479","severity":1,"message":"562","line":8,"column":5,"nodeType":"481","messageId":"482","endLine":8,"endColumn":11},{"ruleId":"479","severity":1,"message":"563","line":9,"column":5,"nodeType":"481","messageId":"482","endLine":9,"endColumn":13},{"ruleId":"479","severity":1,"message":"486","line":10,"column":5,"nodeType":"481","messageId":"482","endLine":10,"endColumn":15},{"ruleId":"479","severity":1,"message":"543","line":13,"column":10,"nodeType":"481","messageId":"482","endLine":13,"endColumn":24},{"ruleId":"479","severity":1,"message":"544","line":13,"column":26,"nodeType":"481","messageId":"482","endLine":13,"endColumn":33},{"ruleId":"479","severity":1,"message":"490","line":14,"column":10,"nodeType":"481","messageId":"482","endLine":14,"endColumn":20},{"ruleId":"479","severity":1,"message":"564","line":17,"column":8,"nodeType":"481","messageId":"482","endLine":17,"endColumn":20},{"ruleId":"479","severity":1,"message":"565","line":18,"column":8,"nodeType":"481","messageId":"482","endLine":18,"endColumn":22},{"ruleId":"479","severity":1,"message":"566","line":19,"column":8,"nodeType":"481","messageId":"482","endLine":19,"endColumn":23},{"ruleId":"479","severity":1,"message":"567","line":20,"column":8,"nodeType":"481","messageId":"482","endLine":20,"endColumn":16},{"ruleId":"479","severity":1,"message":"568","line":21,"column":8,"nodeType":"481","messageId":"482","endLine":21,"endColumn":16},{"ruleId":"479","severity":1,"message":"569","line":155,"column":47,"nodeType":"481","messageId":"482","endLine":155,"endColumn":61},{"ruleId":"479","severity":1,"message":"570","line":156,"column":33,"nodeType":"481","messageId":"482","endLine":156,"endColumn":57},{"ruleId":"479","severity":1,"message":"554","line":156,"column":170,"nodeType":"481","messageId":"482","endLine":156,"endColumn":188},{"ruleId":"479","severity":1,"message":"555","line":156,"column":190,"nodeType":"481","messageId":"482","endLine":156,"endColumn":203},{"ruleId":"479","severity":1,"message":"508","line":3,"column":123,"nodeType":"481","messageId":"482","endLine":3,"endColumn":127},{"ruleId":"479","severity":1,"message":"490","line":12,"column":10,"nodeType":"481","messageId":"482","endLine":12,"endColumn":20},{"ruleId":"479","severity":1,"message":"498","line":301,"column":62,"nodeType":"481","messageId":"482","endLine":301,"endColumn":75},{"ruleId":"479","severity":1,"message":"571","line":301,"column":77,"nodeType":"481","messageId":"482","endLine":301,"endColumn":94},{"ruleId":"479","severity":1,"message":"572","line":302,"column":17,"nodeType":"481","messageId":"482","endLine":302,"endColumn":30},{"ruleId":"479","severity":1,"message":"573","line":302,"column":32,"nodeType":"481","messageId":"482","endLine":302,"endColumn":48},{"ruleId":"479","severity":1,"message":"574","line":302,"column":50,"nodeType":"481","messageId":"482","endLine":302,"endColumn":54},{"ruleId":"479","severity":1,"message":"528","line":302,"column":56,"nodeType":"481","messageId":"482","endLine":302,"endColumn":70},{"ruleId":"479","severity":1,"message":"529","line":302,"column":72,"nodeType":"481","messageId":"482","endLine":302,"endColumn":87},{"ruleId":"479","severity":1,"message":"575","line":302,"column":89,"nodeType":"481","messageId":"482","endLine":302,"endColumn":107},{"ruleId":"479","severity":1,"message":"546","line":302,"column":109,"nodeType":"481","messageId":"482","endLine":302,"endColumn":115},{"ruleId":"479","severity":1,"message":"511","line":305,"column":55,"nodeType":"481","messageId":"482","endLine":305,"endColumn":82},{"ruleId":"479","severity":1,"message":"576","line":6,"column":8,"nodeType":"481","messageId":"482","endLine":6,"endColumn":17},{"ruleId":"479","severity":1,"message":"577","line":8,"column":10,"nodeType":"481","messageId":"482","endLine":8,"endColumn":19},{"ruleId":"479","severity":1,"message":"537","line":113,"column":11,"nodeType":"481","messageId":"482","endLine":113,"endColumn":18},{"ruleId":"479","severity":1,"message":"578","line":114,"column":40,"nodeType":"481","messageId":"482","endLine":114,"endColumn":54},{"ruleId":"479","severity":1,"message":"579","line":114,"column":84,"nodeType":"481","messageId":"482","endLine":114,"endColumn":100},{"ruleId":"479","severity":1,"message":"484","line":4,"column":8,"nodeType":"481","messageId":"482","endLine":4,"endColumn":14},{"ruleId":"479","severity":1,"message":"518","line":8,"column":18,"nodeType":"481","messageId":"482","endLine":8,"endColumn":29},{"ruleId":"479","severity":1,"message":"580","line":251,"column":28,"nodeType":"481","messageId":"482","endLine":251,"endColumn":41},{"ruleId":"479","severity":1,"message":"546","line":251,"column":54,"nodeType":"481","messageId":"482","endLine":251,"endColumn":60},{"ruleId":"479","severity":1,"message":"581","line":251,"column":85,"nodeType":"481","messageId":"482","endLine":251,"endColumn":91},{"ruleId":"479","severity":1,"message":"547","line":251,"column":122,"nodeType":"481","messageId":"482","endLine":251,"endColumn":132},{"ruleId":"479","severity":1,"message":"582","line":251,"column":166,"nodeType":"481","messageId":"482","endLine":251,"endColumn":180},{"ruleId":"479","severity":1,"message":"583","line":251,"column":182,"nodeType":"481","messageId":"482","endLine":251,"endColumn":194},{"ruleId":"479","severity":1,"message":"584","line":251,"column":196,"nodeType":"481","messageId":"482","endLine":251,"endColumn":214},{"ruleId":"479","severity":1,"message":"539","line":251,"column":216,"nodeType":"481","messageId":"482","endLine":251,"endColumn":226},{"ruleId":"479","severity":1,"message":"585","line":58,"column":39,"nodeType":"481","messageId":"482","endLine":58,"endColumn":51},{"ruleId":"479","severity":1,"message":"508","line":3,"column":123,"nodeType":"481","messageId":"482","endLine":3,"endColumn":127},{"ruleId":"479","severity":1,"message":"490","line":11,"column":10,"nodeType":"481","messageId":"482","endLine":11,"endColumn":20},{"ruleId":"479","severity":1,"message":"510","line":262,"column":47,"nodeType":"481","messageId":"482","endLine":262,"endColumn":60},{"ruleId":"479","severity":1,"message":"547","line":262,"column":62,"nodeType":"481","messageId":"482","endLine":262,"endColumn":72},{"ruleId":"479","severity":1,"message":"498","line":262,"column":74,"nodeType":"481","messageId":"482","endLine":262,"endColumn":87},{"ruleId":"479","severity":1,"message":"586","line":265,"column":45,"nodeType":"481","messageId":"482","endLine":265,"endColumn":56},{"ruleId":"479","severity":1,"message":"484","line":4,"column":8,"nodeType":"481","messageId":"482","endLine":4,"endColumn":14},{"ruleId":"479","severity":1,"message":"518","line":5,"column":30,"nodeType":"481","messageId":"482","endLine":5,"endColumn":41},{"ruleId":"479","severity":1,"message":"506","line":5,"column":43,"nodeType":"481","messageId":"482","endLine":5,"endColumn":53},{"ruleId":"479","severity":1,"message":"587","line":5,"column":55,"nodeType":"481","messageId":"482","endLine":5,"endColumn":61},{"ruleId":"479","severity":1,"message":"588","line":5,"column":63,"nodeType":"481","messageId":"482","endLine":5,"endColumn":74},{"ruleId":"479","severity":1,"message":"589","line":5,"column":76,"nodeType":"481","messageId":"482","endLine":5,"endColumn":89},{"ruleId":"479","severity":1,"message":"542","line":5,"column":91,"nodeType":"481","messageId":"482","endLine":5,"endColumn":108},{"ruleId":"479","severity":1,"message":"556","line":5,"column":110,"nodeType":"481","messageId":"482","endLine":5,"endColumn":123},{"ruleId":"479","severity":1,"message":"504","line":5,"column":125,"nodeType":"481","messageId":"482","endLine":5,"endColumn":134},{"ruleId":"479","severity":1,"message":"489","line":5,"column":142,"nodeType":"481","messageId":"482","endLine":5,"endColumn":146},{"ruleId":"479","severity":1,"message":"557","line":6,"column":5,"nodeType":"481","messageId":"482","endLine":6,"endColumn":14},{"ruleId":"479","severity":1,"message":"558","line":6,"column":16,"nodeType":"481","messageId":"482","endLine":6,"endColumn":32},{"ruleId":"479","severity":1,"message":"559","line":6,"column":34,"nodeType":"481","messageId":"482","endLine":6,"endColumn":50},{"ruleId":"479","severity":1,"message":"560","line":7,"column":35,"nodeType":"481","messageId":"482","endLine":7,"endColumn":58},{"ruleId":"479","severity":1,"message":"561","line":8,"column":5,"nodeType":"481","messageId":"482","endLine":8,"endColumn":16},{"ruleId":"479","severity":1,"message":"513","line":9,"column":5,"nodeType":"481","messageId":"482","endLine":9,"endColumn":15},{"ruleId":"479","severity":1,"message":"562","line":10,"column":5,"nodeType":"481","messageId":"482","endLine":10,"endColumn":11},{"ruleId":"479","severity":1,"message":"563","line":11,"column":5,"nodeType":"481","messageId":"482","endLine":11,"endColumn":13},{"ruleId":"479","severity":1,"message":"486","line":12,"column":5,"nodeType":"481","messageId":"482","endLine":12,"endColumn":15},{"ruleId":"479","severity":1,"message":"590","line":16,"column":8,"nodeType":"481","messageId":"482","endLine":16,"endColumn":22},{"ruleId":"479","severity":1,"message":"591","line":23,"column":8,"nodeType":"481","messageId":"482","endLine":23,"endColumn":19},{"ruleId":"479","severity":1,"message":"592","line":250,"column":34,"nodeType":"481","messageId":"482","endLine":250,"endColumn":47},{"ruleId":"479","severity":1,"message":"580","line":251,"column":19,"nodeType":"481","messageId":"482","endLine":251,"endColumn":32},{"ruleId":"479","severity":1,"message":"593","line":251,"column":34,"nodeType":"481","messageId":"482","endLine":251,"endColumn":49},{"ruleId":"479","severity":1,"message":"594","line":251,"column":51,"nodeType":"481","messageId":"482","endLine":251,"endColumn":61},{"ruleId":"479","severity":1,"message":"595","line":251,"column":115,"nodeType":"481","messageId":"482","endLine":251,"endColumn":140},{"ruleId":"479","severity":1,"message":"578","line":53,"column":37,"nodeType":"481","messageId":"482","endLine":53,"endColumn":51},{"ruleId":"479","severity":1,"message":"542","line":3,"column":78,"nodeType":"481","messageId":"482","endLine":3,"endColumn":95},{"ruleId":"479","severity":1,"message":"504","line":3,"column":112,"nodeType":"481","messageId":"482","endLine":3,"endColumn":121},{"ruleId":"479","severity":1,"message":"508","line":3,"column":123,"nodeType":"481","messageId":"482","endLine":3,"endColumn":127},{"ruleId":"479","severity":1,"message":"561","line":4,"column":5,"nodeType":"481","messageId":"482","endLine":4,"endColumn":16},{"ruleId":"479","severity":1,"message":"513","line":5,"column":5,"nodeType":"481","messageId":"482","endLine":5,"endColumn":15},{"ruleId":"479","severity":1,"message":"562","line":6,"column":5,"nodeType":"481","messageId":"482","endLine":6,"endColumn":11},{"ruleId":"479","severity":1,"message":"563","line":7,"column":5,"nodeType":"481","messageId":"482","endLine":7,"endColumn":13},{"ruleId":"479","severity":1,"message":"486","line":8,"column":5,"nodeType":"481","messageId":"482","endLine":8,"endColumn":15},{"ruleId":"479","severity":1,"message":"543","line":11,"column":10,"nodeType":"481","messageId":"482","endLine":11,"endColumn":24},{"ruleId":"479","severity":1,"message":"544","line":11,"column":26,"nodeType":"481","messageId":"482","endLine":11,"endColumn":33},{"ruleId":"479","severity":1,"message":"490","line":12,"column":10,"nodeType":"481","messageId":"482","endLine":12,"endColumn":20},{"ruleId":"479","severity":1,"message":"564","line":15,"column":8,"nodeType":"481","messageId":"482","endLine":15,"endColumn":20},{"ruleId":"479","severity":1,"message":"567","line":18,"column":8,"nodeType":"481","messageId":"482","endLine":18,"endColumn":16},{"ruleId":"479","severity":1,"message":"568","line":19,"column":8,"nodeType":"481","messageId":"482","endLine":19,"endColumn":16},{"ruleId":"479","severity":1,"message":"596","line":21,"column":8,"nodeType":"481","messageId":"482","endLine":21,"endColumn":29},{"ruleId":"479","severity":1,"message":"597","line":288,"column":32,"nodeType":"481","messageId":"482","endLine":288,"endColumn":47},{"ruleId":"479","severity":1,"message":"598","line":288,"column":49,"nodeType":"481","messageId":"482","endLine":288,"endColumn":57},{"ruleId":"479","severity":1,"message":"583","line":288,"column":73,"nodeType":"481","messageId":"482","endLine":288,"endColumn":85},{"ruleId":"479","severity":1,"message":"578","line":288,"column":87,"nodeType":"481","messageId":"482","endLine":288,"endColumn":101},{"ruleId":"479","severity":1,"message":"580","line":288,"column":103,"nodeType":"481","messageId":"482","endLine":288,"endColumn":116},{"ruleId":"479","severity":1,"message":"599","line":288,"column":118,"nodeType":"481","messageId":"482","endLine":288,"endColumn":138},{"ruleId":"479","severity":1,"message":"554","line":288,"column":171,"nodeType":"481","messageId":"482","endLine":288,"endColumn":189},{"ruleId":"479","severity":1,"message":"555","line":288,"column":191,"nodeType":"481","messageId":"482","endLine":288,"endColumn":204},{"ruleId":"479","severity":1,"message":"600","line":4,"column":59,"nodeType":"481","messageId":"482","endLine":4,"endColumn":66},{"ruleId":"479","severity":1,"message":"601","line":4,"column":74,"nodeType":"481","messageId":"482","endLine":4,"endColumn":78},{"ruleId":"479","severity":1,"message":"508","line":4,"column":80,"nodeType":"481","messageId":"482","endLine":4,"endColumn":84},{"ruleId":"479","severity":1,"message":"602","line":11,"column":10,"nodeType":"481","messageId":"482","endLine":11,"endColumn":20},{"ruleId":"479","severity":1,"message":"603","line":17,"column":8,"nodeType":"481","messageId":"482","endLine":17,"endColumn":20},{"ruleId":"604","severity":1,"message":"605","line":189,"column":76,"nodeType":"606","messageId":"496","endLine":189,"endColumn":78},{"ruleId":"479","severity":1,"message":"583","line":251,"column":39,"nodeType":"481","messageId":"482","endLine":251,"endColumn":51},{"ruleId":"479","severity":1,"message":"607","line":253,"column":15,"nodeType":"481","messageId":"482","endLine":253,"endColumn":31},{"ruleId":"479","severity":1,"message":"608","line":253,"column":81,"nodeType":"481","messageId":"482","endLine":253,"endColumn":97},{"ruleId":"479","severity":1,"message":"602","line":5,"column":10,"nodeType":"481","messageId":"482","endLine":5,"endColumn":20},{"ruleId":"479","severity":1,"message":"608","line":93,"column":27,"nodeType":"481","messageId":"482","endLine":93,"endColumn":43},{"ruleId":"479","severity":1,"message":"609","line":93,"column":80,"nodeType":"481","messageId":"482","endLine":93,"endColumn":99},{"ruleId":"610","severity":1,"message":"611","line":111,"column":17,"nodeType":"612","messageId":"613","endLine":111,"endColumn":49},{"ruleId":"610","severity":1,"message":"611","line":139,"column":17,"nodeType":"612","messageId":"613","endLine":139,"endColumn":53},{"ruleId":"479","severity":1,"message":"484","line":4,"column":8,"nodeType":"481","messageId":"482","endLine":4,"endColumn":14},{"ruleId":"479","severity":1,"message":"518","line":5,"column":30,"nodeType":"481","messageId":"482","endLine":5,"endColumn":41},{"ruleId":"479","severity":1,"message":"506","line":5,"column":43,"nodeType":"481","messageId":"482","endLine":5,"endColumn":53},{"ruleId":"479","severity":1,"message":"587","line":5,"column":55,"nodeType":"481","messageId":"482","endLine":5,"endColumn":61},{"ruleId":"479","severity":1,"message":"588","line":5,"column":63,"nodeType":"481","messageId":"482","endLine":5,"endColumn":74},{"ruleId":"479","severity":1,"message":"589","line":5,"column":76,"nodeType":"481","messageId":"482","endLine":5,"endColumn":89},{"ruleId":"479","severity":1,"message":"542","line":5,"column":91,"nodeType":"481","messageId":"482","endLine":5,"endColumn":108},{"ruleId":"479","severity":1,"message":"556","line":5,"column":110,"nodeType":"481","messageId":"482","endLine":5,"endColumn":123},{"ruleId":"479","severity":1,"message":"504","line":5,"column":125,"nodeType":"481","messageId":"482","endLine":5,"endColumn":134},{"ruleId":"479","severity":1,"message":"508","line":5,"column":136,"nodeType":"481","messageId":"482","endLine":5,"endColumn":140},{"ruleId":"479","severity":1,"message":"489","line":5,"column":142,"nodeType":"481","messageId":"482","endLine":5,"endColumn":146},{"ruleId":"479","severity":1,"message":"557","line":6,"column":5,"nodeType":"481","messageId":"482","endLine":6,"endColumn":14},{"ruleId":"479","severity":1,"message":"558","line":6,"column":16,"nodeType":"481","messageId":"482","endLine":6,"endColumn":32},{"ruleId":"479","severity":1,"message":"559","line":6,"column":34,"nodeType":"481","messageId":"482","endLine":6,"endColumn":50},{"ruleId":"479","severity":1,"message":"560","line":7,"column":35,"nodeType":"481","messageId":"482","endLine":7,"endColumn":58},{"ruleId":"479","severity":1,"message":"561","line":8,"column":5,"nodeType":"481","messageId":"482","endLine":8,"endColumn":16},{"ruleId":"479","severity":1,"message":"513","line":9,"column":5,"nodeType":"481","messageId":"482","endLine":9,"endColumn":15},{"ruleId":"479","severity":1,"message":"562","line":10,"column":5,"nodeType":"481","messageId":"482","endLine":10,"endColumn":11},{"ruleId":"479","severity":1,"message":"563","line":11,"column":5,"nodeType":"481","messageId":"482","endLine":11,"endColumn":13},{"ruleId":"479","severity":1,"message":"486","line":12,"column":5,"nodeType":"481","messageId":"482","endLine":12,"endColumn":15},{"ruleId":"479","severity":1,"message":"590","line":16,"column":8,"nodeType":"481","messageId":"482","endLine":16,"endColumn":22},{"ruleId":"479","severity":1,"message":"591","line":23,"column":8,"nodeType":"481","messageId":"482","endLine":23,"endColumn":19},{"ruleId":"479","severity":1,"message":"497","line":181,"column":28,"nodeType":"481","messageId":"482","endLine":181,"endColumn":32},{"ruleId":"479","severity":1,"message":"592","line":181,"column":34,"nodeType":"481","messageId":"482","endLine":181,"endColumn":47},{"ruleId":"479","severity":1,"message":"594","line":182,"column":73,"nodeType":"481","messageId":"482","endLine":182,"endColumn":83},{"ruleId":"479","severity":1,"message":"583","line":182,"column":94,"nodeType":"481","messageId":"482","endLine":182,"endColumn":106},{"ruleId":"479","severity":1,"message":"614","line":206,"column":15,"nodeType":"481","messageId":"482","endLine":206,"endColumn":25},{"ruleId":"479","severity":1,"message":"615","line":206,"column":27,"nodeType":"481","messageId":"482","endLine":206,"endColumn":40},{"ruleId":"479","severity":1,"message":"586","line":206,"column":108,"nodeType":"481","messageId":"482","endLine":206,"endColumn":119},{"ruleId":"479","severity":1,"message":"546","line":206,"column":163,"nodeType":"481","messageId":"482","endLine":206,"endColumn":169},{"ruleId":"479","severity":1,"message":"510","line":133,"column":32,"nodeType":"481","messageId":"482","endLine":133,"endColumn":45},{"ruleId":"479","severity":1,"message":"616","line":133,"column":47,"nodeType":"481","messageId":"482","endLine":133,"endColumn":60},{"ruleId":"479","severity":1,"message":"498","line":133,"column":62,"nodeType":"481","messageId":"482","endLine":133,"endColumn":75},"no-native-reassign",["617"],"no-negated-in-lhs",["618"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'RegistrierungForm' is defined but never used.","'Profil' is defined but never used.","'Link' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'withRouter' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","no-dupe-keys","Duplicate key 'gruppe'.","ObjectExpression","unexpected","'show' is assigned a value but never used.","'lernvorlieben' is assigned a value but never used.","'gruppengroesse' is assigned a value but never used.","'personLernvorliebenID' is assigned a value but never used.","'gruppenLernfaecher' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'personID' is assigned a value but never used.","'Card' is defined but never used.","'CloseIcon' is defined but never used.","'currentPerson' is assigned a value but never used.","'lernfaecherValidationFailed' is assigned a value but never used.","'makeStyles' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","Duplicate key 'formControl'.","Duplicate key 'selectEmpty'.","'ButtonGroup' is defined but never used.","'teilnahmenChatGefiltert' is assigned a value but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Container' is defined but never used.","'test' is assigned a value but never used.","'lernfaecher_id' is assigned a value but never used.","'lernfaecher_bez' is assigned a value but never used.","'personProfil' is assigned a value but never used.","'personLernfaecher' is assigned a value but never used.","'lernfach' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","'withStyles' is defined but never used.","'classes' is assigned a value but never used.","'gruppeName' is assigned a value but never used.","'showProfil' is assigned a value but never used.","'showLerngruppeForm' is assigned a value but never used.","Duplicate key 'width'.","'DialogContentText' is defined but never used.","'TeachingbeeAPI' is defined but never used.","'GroupBO' is defined but never used.","'GruppenListeEintrag' is defined but never used.","'profil' is assigned a value but never used.","'lerngruppe' is assigned a value but never used.","'lernfaecherNameEdited' is assigned a value but never used.","'tageszeitenEdited' is assigned a value but never used.","'tageEdited' is assigned a value but never used.","'frequenzEdited' is assigned a value but never used.","'lernartEdited' is assigned a value but never used.","'lernortEdited' is assigned a value but never used.","'updatingInProgress' is assigned a value but never used.","'updatingError' is assigned a value but never used.","'DialogActions' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'LerngruppeBO' is defined but never used.","'KonversationBO' is defined but never used.","'TeilnahmeChatBO' is defined but never used.","'ProfilBO' is defined but never used.","'PersonBO' is defined but never used.","'konversationen' is assigned a value but never used.","'teilnahmenChatAusstehend' is assigned a value but never used.","'lernfaechergesamt' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'setSelectedValue' is assigned a value but never used.","'data' is assigned a value but never used.","'lernfaecherauswahl' is assigned a value but never used.","'Nachricht' is defined but never used.","'useParams' is defined but never used.","'konversationID' is assigned a value but never used.","'showKonversation' is assigned a value but never used.","'teilnahmeChat' is assigned a value but never used.","'person' is assigned a value but never used.","'iskonversation' is assigned a value but never used.","'konversation' is assigned a value but never used.","'konversationStatus' is assigned a value but never used.","'lerngruppeID' is assigned a value but never used.","'lernfaecher' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'AnfrageForm' is defined but never used.","'expandedState' is assigned a value but never used.","'teilnahmeChatID' is assigned a value but never used.","'teilnahmen' is assigned a value but never used.","'konversationAnfragestatus' is assigned a value but never used.","'VorschlagListeEintrag' is defined but never used.","'currentPersonID' is assigned a value but never used.","'konvName' is assigned a value but never used.","'teilnahmeChatPartner' is assigned a value but never used.","'Divider' is defined but never used.","'Pape' is defined but never used.","'MessageBox' is defined but never used.","'ProfilDialog' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'konversationName' is assigned a value but never used.","'nachricht_inhalt' is assigned a value but never used.","'expandedNachrichtID' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'personName' is assigned a value but never used.","'personVorname' is assigned a value but never used.","'currentProfil' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]