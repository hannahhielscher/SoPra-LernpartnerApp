[{"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/index.js":"1","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/App.js":"2","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js":"3","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/Theme.js":"4","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/About.js":"5","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/Profil.js":"6","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js":"7","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js":"8","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js":"9","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js":"10","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js":"11","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js":"12","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js":"13","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js":"14","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js":"15","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js":"16","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js":"17","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js":"18","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js":"19","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js":"20","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenForm.js":"21","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageEingangForm.js":"22","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js":"23","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js":"24","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js":"25","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js":"26","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js":"27","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js":"28","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js":"29","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js":"30","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js":"31","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js":"32","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js":"33","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/index.js":"34","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js":"35","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js":"36","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenBearbeitenForm.js":"37","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js":"38","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js":"39","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageEingangFormEintrag.js":"40","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MultiSelectLernfaecher.js":"41","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ChatVerlassenForm.js":"42","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageForm.js":"43","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListe.js":"44","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListeEintrag.js":"45","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageAusstehendEintrag.js":"46"},{"size":146,"mtime":1620224527838,"results":"47","hashOfConfig":"48"},{"size":6455,"mtime":1625235220998,"results":"49","hashOfConfig":"48"},{"size":579,"mtime":1624392897666,"results":"50","hashOfConfig":"48"},{"size":1811,"mtime":1625301671554,"results":"51","hashOfConfig":"48"},{"size":844,"mtime":1624392897665,"results":"52","hashOfConfig":"48"},{"size":6022,"mtime":1624890732791,"results":"53","hashOfConfig":"48"},{"size":1961,"mtime":1625301507891,"results":"54","hashOfConfig":"48"},{"size":5520,"mtime":1625158227974,"results":"55","hashOfConfig":"48"},{"size":2113,"mtime":1622130118194,"results":"56","hashOfConfig":"48"},{"size":862,"mtime":1622130118194,"results":"57","hashOfConfig":"48"},{"size":12593,"mtime":1625062846330,"results":"58","hashOfConfig":"48"},{"size":4098,"mtime":1625302191250,"results":"59","hashOfConfig":"48"},{"size":1816,"mtime":1623504199846,"results":"60","hashOfConfig":"48"},{"size":5919,"mtime":1625295198799,"results":"61","hashOfConfig":"48"},{"size":11248,"mtime":1625235221000,"results":"62","hashOfConfig":"48"},{"size":47618,"mtime":1625257753814,"results":"63","hashOfConfig":"48"},{"size":3271,"mtime":1622574851849,"results":"64","hashOfConfig":"48"},{"size":5203,"mtime":1625008995755,"results":"65","hashOfConfig":"48"},{"size":8375,"mtime":1625229852665,"results":"66","hashOfConfig":"48"},{"size":1315,"mtime":1624392897654,"results":"67","hashOfConfig":"48"},{"size":15256,"mtime":1625235221005,"results":"68","hashOfConfig":"48"},{"size":6909,"mtime":1625332476774,"results":"69","hashOfConfig":"48"},{"size":1373,"mtime":1625054949792,"results":"70","hashOfConfig":"48"},{"size":21586,"mtime":1625235221006,"results":"71","hashOfConfig":"48"},{"size":2525,"mtime":1624571756636,"results":"72","hashOfConfig":"48"},{"size":1447,"mtime":1624890675484,"results":"73","hashOfConfig":"48"},{"size":3591,"mtime":1624890732789,"results":"74","hashOfConfig":"48"},{"size":1488,"mtime":1625253887348,"results":"75","hashOfConfig":"48"},{"size":813,"mtime":1624890675475,"results":"76","hashOfConfig":"48"},{"size":1034,"mtime":1624890732790,"results":"77","hashOfConfig":"48"},{"size":1027,"mtime":1624890732788,"results":"78","hashOfConfig":"48"},{"size":766,"mtime":1624890675477,"results":"79","hashOfConfig":"48"},{"size":5635,"mtime":1625243666977,"results":"80","hashOfConfig":"48"},{"size":433,"mtime":1624890732790,"results":"81","hashOfConfig":"48"},{"size":10691,"mtime":1625302191247,"results":"82","hashOfConfig":"48"},{"size":3919,"mtime":1624568920996,"results":"83","hashOfConfig":"48"},{"size":15769,"mtime":1625229852671,"results":"84","hashOfConfig":"48"},{"size":761,"mtime":1621760028845,"results":"85","hashOfConfig":"48"},{"size":375,"mtime":1622130118189,"results":"86","hashOfConfig":"48"},{"size":9399,"mtime":1625336163576,"results":"87","hashOfConfig":"48"},{"size":1769,"mtime":1625158228059,"results":"88","hashOfConfig":"48"},{"size":3891,"mtime":1625235221003,"results":"89","hashOfConfig":"48"},{"size":11352,"mtime":1625302191318,"results":"90","hashOfConfig":"48"},{"size":7732,"mtime":1625327227630,"results":"91","hashOfConfig":"48"},{"size":5092,"mtime":1625328009571,"results":"92","hashOfConfig":"48"},{"size":5520,"mtime":1625335752107,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1h9qmix",{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"96"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"96"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"96"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"96"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"96"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"96"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/index.js",[],["209","210"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/App.js",["211","212","213"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport Header from './components/layout/Header';\nimport KonversationListe from './components/KonversationListe';\n//import VorschlagListe from './components/VorschlagListe';\nimport LernpartnerAPI from './api/LernpartnerAPI';\nimport About from './components/pages/About';\nimport Theme from './Theme';\nimport SignIn from './components/pages/SignIn';\nimport RegistrierungForm from './components/dialogs/RegistrierungForm';\nimport MeinProfil from './components/MeinProfil';\nimport LoadingProgress from './components/dialogs/LoadingProgress';\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\nimport firebaseConfig from './firebaseconfig';\nimport LernfaecherForm from './components/dialogs/LernfaecherForm';\nimport Profil from './components/Profil';\nimport GruppenListe from './components/GruppenListe';\nimport NachrichtListe from './components/NachrichtListe';\n\nclass App extends React.Component {\n\n\t/** Constructor of the app, which initializes firebase  */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Init an empty state\n\t\tthis.state = {\n\t\t\tcurrentUser: null,\n\t\t\tpersonName: null,\n\t\t\tpersonneu: false,\n\t\t\tappError: null,\n\t\t\tauthError: null,\n\t\t\tauthLoading: false,\n\t\t\tUserneu: null,\n\t\t\tcurrentPerson: null,\n\t\t\t\n\t\t};\n\t}\n\n\t/** \n\t * Create an error boundary for this app and recieve all errors from below the component tree.\n\t * \n\t * @See See Reacts [Error Boundaries](https://reactjs.org/docs/error-boundaries.html)\n \t */\n\tstatic getDerivedStateFromError(error) {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { appError: error };\n\t}\n\n\t/** Handles firebase users logged in state changes  */\n\thandleAuthStateChange = user => {\n\t\tif (user) {\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n\t\t\t});\n\t\t\t// The user is signed in\n\t\t\tuser.getIdToken().then(token => {\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\n\t\t\t\t// able to verify the token against the API.\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\n\t\t\t\t// user information.\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\n\n\t\t\t\t// Set the user not before the token arrived \n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentUser: user,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t\n\t\t\t\t})}).then(() => {\n\t\t\t\tthis.getPersonByGoogleID()\n\t\t\t}).catch(e => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tauthError: e,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// User has logged out, so clear the id token\n\t\t\tdocument.cookie = 'token=;path=/';\n\n\t\t\t// Set the logged out user to null\n\t\t\tthis.setState({\n\t\t\t\tcurrentUser: null,\n\t\t\t\tauthLoading: false\n\t\t\t});\n\t\t}\n\t}\n\n  /** \n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\n\t */\n\thandleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\n\t\tfirebase.auth().signInWithRedirect(provider);\n\t}\n\n\t//aktuell eingeloggten Student vom Backend abfragen\n\t\n\tgetPersonByGoogleID = () => {\n\t\tLernpartnerAPI.getAPI().getPersonByGoogleID(this.state.currentUser.uid)\n\t\t\t.then(personBO =>\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentPerson: personBO,\n\t\t\t\t\tpersonName: personBO.getvorname(),\n\t\t\t\t\terror: null,\n\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t}))\n\t\t\t\t.catch(e =>\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentPerson: null,\n\t\t\t\t\t\terror: e,\n\t\t\t\t\t\tloadingInProgress: false,\n\t\t\t\t\t}));\n\t\t\tthis.setState({\n\t\t\t\terror: null,\n\t\t\t\tloadingInProgress: true\n\t\t\t});\n\t\t\n\t\tsetTimeout(()=>{\n\t\t  console.log(this.state);\n\t\t},1000);\n\t\t}\n\t\n\t/**\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\n\t * Initializes the firebase SDK.\n\t * \n\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\n\t */\n\tcomponentDidMount() {\n\t\tfirebase.initializeApp(firebaseConfig);\n\t\tfirebase.auth().languageCode = 'en';\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n\t\n\t}\n\n\t/** Renders the whole app */\n\trender() {\n\t\tconst { currentUser, currentPerson, personneu, personName, appError, authError, authLoading} = this.state;\n\t\tconsole.log(personName)\n\t\tconsole.log(personneu)\n\t\treturn (\n\t\t\t<ThemeProvider theme={Theme}>\n\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\n\t\t\t\t<CssBaseline />\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\n\t\t\t\t\t\t<Header user={currentUser} currentPerson={currentPerson}/>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is a user signed in?\n\t\t\t\t\t\t\tcurrentUser && (currentPerson) ?\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='meinProfil'/>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<Route exact path='/meinprofil' component={MeinProfil}>\n\t\t\t\t\t\t\t\t\t\t<MeinProfil currentPerson={currentPerson}/>\n\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t<Route path='/meinelerngruppen'>\n                                    \t<GruppenListe currentPerson={currentPerson}/>\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<Route path='/meinevorschlaege'>\n\t\t\t\t\t\t\t\t\t\t<LernfaecherForm currentPerson={currentPerson}/>\n\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t<Route path='/meinechats'>\n\t\t\t\t\t\t\t\t\t\t<KonversationListe currentPerson={currentPerson} />\n\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t<Route path='/chat'>\n\t\t\t\t\t\t\t\t\t\t<NachrichtListe currentPerson={currentPerson} />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t// else show the sign in page\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sign in process.`} onReload={this.handleSignIn} />\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\n\t\t\t\t\t</Container>\n\t\t\t\t\n\t\t\t\t</Router>\n\t\t\t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/Theme.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/About.js",["214"],"import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n */\n\n\nfunction About() {\n\n    const classes = useStyles();\n  \n    return (\n      <Paper elevation={0} className={classes.root}>\n        <div className={classes.content}>\n          <Typography variant='h6'>\n            App zum Auffinden von Lernpartnern\n          </Typography>\n          <Typography variant='body2'>\n            © Hochschule der Medien 2020, all rights reserved.\n          </Typography>\n        </div>\n      </Paper>\n    )\n  }\n  \n  export default About;","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/Profil.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Button, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport {LernpartnerAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n\nclass Profil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            user: props.user,\n            profil: null,\n            lernvorlieben: null,\n            gruppe: false,\n            tageszeiten: null,\n            tage: null,\n            frequenz: null,\n            lernart: null,\n            gruppengroesse: null,\n            lernort: null,\n            gruppe: null,\n            personVorname: null,\n            personName: null,\n            personSemester: 0,\n            personStudiengang: null,\n            lerngruppe: false,\n            personProfilID: null,\n            personLernfaecher: null,\n            personLernvorliebenID: null,\n            loadingInProgress: false,\n            loadingError: null,\n        };\n    }\n\n\n\n/**   showVorschlagButtonClick = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showVorschlag: true\n      });\n    }**/\n\n\n\n/**\n    // API Anbindung um Profil vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n*/\n\n     getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.user.id).then(profilBO =>\n      this.setState({\n            profil: profilBO,\n            gruppe: profilBO.gruppe,\n            //profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          gruppe: null,\n          //profilLernfaecher: null,\n          profilLernvorliebenID: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n     getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(this.props.user.profil).then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            tageszeiten: lernvorliebenBO.tageszeiten_bez,\n            tage: lernvorliebenBO.tage_bez,\n            frequenz: lernvorliebenBO.frequenz_bez,\n            lernart: lernvorliebenBO.lernart_bez,\n            gruppengroesse: lernvorliebenBO.gruppengroesse_bez,\n            lernort: lernvorliebenBO.lernort_bez,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getProfil();\n        this.getLernvorlieben();\n  }\n\n\n   /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n    // Use the states customer\n    const { user, profil, lernvorlieben, tageszeiten, tage, frequenz, lernart, lernort, gruppengroesse, gruppe, personLernvorliebenID, loadingInProgress, error} = this.state;\n    console.log(user)\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n            {\n            gruppe ?\n                <>\n                    <b> {user.vorname} {user.name} </b> <br />\n                    <b>Semester: </b> {user.semester} <br />\n                    <b>Studiengang: </b> {user.studiengang} <br />\n                    <b>Alter: </b> {user.alter} <br />\n                    <b>Geschlecht: </b> {user.geschlecht} <br />\n\n                </>\n\n                :\n                <>\n                    <b> Profilinformationen: </b> <br /><br />\n                    Tageszeiten: {tageszeiten}<br />\n                    Tage: {tage}<br />\n                    Frequenz: {frequenz}<br />\n                    Lernart: {lernart}<br />\n                    Lernort: {lernort}\n                </>\n           }\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n});\n\n\n/** PropTypes */\nProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(Profil);\n\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js",["237","238"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paper, Typography, Tabs, Tab, AppBar, Toolbar, Box } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\nimport logo from './Logo.png';\n\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      tabindex: 0\n    };\n  }\n\n  /** Handles onChange events of the Tabs component */\n handleTabChange = (e, newIndex) => {\n    // console.log(newValue)\n    this.setState({\n      tabindex: newIndex\n    })\n  };\n\n  /** Renders the component */\n  render() {\n    const { user, currentPerson } = this.props;\n\n    return (\n    <div style={{ width: '100%'}}>\n      <AppBar style={{ backgroundColor: '#cdb79e'}}>\n      <Toolbar>\n        <img src={logo} alt=\"Easy Learn\" style={{ width : 150, margin: 5}}/>\n\n        {\n          user ?\n        <>\n        <Box display=\"flex\" flexDirection=\"row-reverse\" justifyContent=\"flex-end\" p={1} marginLeft={40}>\n            <Tabs indicatorColor='primary' textColor='tab' variant=\"fullWidth\" onChange={this.handleTabChange} right>\n              <Tab label='Profil' component={RouterLink} to={`/meinprofil`}/>\n              <Tab label='Lerngruppen' component={RouterLink} to={`/meinelerngruppen`}/>\n              <Tab label='Vorschläge' component={RouterLink} to={`/meinevorschlaege`}/>\n              <Tab label='Chats' component={RouterLink} to={`/meinechats`}/>\n              <Tab label='About' component={RouterLink} to={`/about`} />\n            </Tabs>\n         </Box>\n         <ProfileDropDown user={currentPerson} />\n         </>\n         : null\n          \n\n          }\n\n\n      </Toolbar>\n      </AppBar>\n      <Toolbar />\n      </div>\n    )\n  }\n}\n\n/** PropTypes */\nHeader.propTypes = {\n  /** The logged in firesbase currentPerson */\n  currentPerson: PropTypes.object,\n}\n\nexport default Header;","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js",["239","240","241","242","243","244"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport GruppenListeEintrag from './GruppenListeEintrag';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\n\n/**\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\n *\n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\n *\n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\n *\n */\n\n\nclass GruppenListe extends Component {\n\n    constructor(props){\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandLerngruppe) {\n          expandedID = this.props.location.expandLerngruppe.getID();\n        }\n\n        // Init an empty state\n        this.state = {\n          lerngruppen: [],\n          error: null,\n          loadingInProgress: false,\n          expandedLerngruppeID: expandedID,\n          //showCustomerForm: false\n        };\n\n    }\n\n    /** Fetches all LerngruppenBOs from the backend */\n    getLerngruppen = () => {\n        LernpartnerAPI.getAPI().getLerngruppe(this.props.currentPerson.id)\n            .then(lerngruppeBOs =>\n                this.setState({               // Set new state when LerngruppeBOs have been fetched\n                    lerngruppen: lerngruppeBOs,\n                    //name: lerngruppeBO.name\n                    loadingInProgress: false,   // disable loading indicator\n                    error: null\n                })).catch(e =>\n                    this.setState({             // Reset state with error from catch\n                        lerngruppen: [],\n                        loadingInProgress: false, // disable loading indicator\n                        error: e\n                    })\n                );\n\n        // set loading to true\n        this.setState({\n            loadingInProgress: true,\n            error: null\n        });\n    }\n\n    /**\n     * Handles onExpandedStateChange events from the GruppeListeEintrag component. Toggels the expanded state of\n     * the GruppeListeEintrag of the given LerngruppeBO.\n     *\n     * @param {lerngruppe} LerngruppeBO of the GruppeListeEintrag to be toggeled\n     */\n    onExpandedStateChange = lerngruppe => {\n        // console.log(vorschlagID);\n        // Set expandend Lerngruppe Eintrag to null by default\n        let newID = null;\n\n        // If same lerngruppe entry is clicked, collapse it else expand a new one\n        if (lerngruppe.getID() !== this.state.expandedLerngruppeID) {\n        // Expand the lerngruppe entry with lerngruppeID\n        newID = lerngruppe.getID();\n        }\n        // console.log(newID);\n        this.setState({\n        expandedLerngruppeID: newID,\n        });\n    }\n\n   /**\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\n   */\n    lerngruppeVerlassen = () => {\n        this.getLerngruppen();\n        this.setState({\n            lerngruppen: this.state.lerngruppen,\n            //showCustomerForm: false\n        });\n    }\n\n    /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getLerngruppen();\n    }\n\n    render() {\n        const { classes, currentPerson } = this.props;\n        const { lerngruppen, personID, expandedLerngruppeID, loadingInProgress, error }  = this.state;\n        console.log(lerngruppen)\n\n        return (\n            <div className={classes.root}>\n                <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item >\n                        <Typography>\n                            <h1>Lerngruppen</h1>\n                        </Typography>\n                    </Grid>\n                </Grid>\n                {\n                    lerngruppen.map(lerngruppe =>\n                    <GruppenListeEintrag key={lerngruppe.getID()} lerngruppe={lerngruppe} currentPerson={currentPerson} expandedState={expandedLerngruppeID === lerngruppe.getID()}\n                      onExpandedStateChange={this.onExpandedStateChange}\n                      onTeilnahmeGruppeDeleted={this.lerngruppeVerlassen}\n                    />)\n                }\n                <LoadingProgress show={loadingInProgress} />\n                <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Lerngruppen konnten nicht geladen werden!`} onReload={this.getLerngruppen} />\n            </div>\n        );\n      }\n    }\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n      width: '100%',\n  },\n  content: {\n      margin: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nGruppenListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n}\n\n\nexport default withRouter(withStyles(styles)(GruppenListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js",["245","246"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass RegistrierungForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Init the state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n            \n            \n        };\n        // save this state for canceling\n        this.baseState = this.state;\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        }\n    \n\n    /** Updates the person */\n    registrieren = () => {\n        let person = this.props.currentPerson;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator \n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t \n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n  \n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, } = this.props;\n        const { name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\n          updatingInProgress, updatingError} = this.state;\n    \n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\n        let header = 'Bitte gib deine Daten ein:';\n    \n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname} \n                    onChange={this.textFieldValueChange} error={vornameValidationFailed} \n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n                  \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \n                    onChange={this.numberValueChange} error={semesterValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \n                    \n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select  error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                                <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\n                            </Select>\n                   </FormControl>\n                   \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \n                    onChange={this.numberValueChange} error={alterValidationFailed} \n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \n                  \n                  <FormControl className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Du konntest leider nicht registriert werden :/`}\n                      onReload={this.registrieren} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={this.registrieren} color='primary'>\n                          Jetzt registrieren\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nRegistrierungForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n  \n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(RegistrierungForm));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js",["247","248","249"],"import React, { Component } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { LernpartnerAPI } from '../../api';\nimport VorschlagListe from '../VorschlagListe';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n  \nclass LernfaecherForm extends Component {\n  \n  constructor(props){\n    super(props);\n\n    // initiiere einen leeren state\n    this.state = {\n        profil: null,\n        lernfaecher: [],\n        lernfach: null,\n        showVorschlagListe: false,\n        loadingInProgress: false,\n        error: null\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({lernfach: event.target.value});\n    \n  }\n\n  getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n    .then(profilBO =>\n        this.setState({\n          profil: profilBO,\n          lernfaecher: profilBO.lernfaecher,\n          loadingInProgress: false,\n          error: null,\n        }))\n        .catch(e =>\n            this.setState({\n              profil: null,\n              lernfaecher: null,\n              loadingInProgress: false,\n              error: e,\n            }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n  }\n\n  getLernfaecher = () => {\n    LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n    .then(lernfaecherBOs =>\n      this.setState({\n            lernfaecher: lernfaecherBOs,\n            lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung),\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernfaecher: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  //Handles the onClick event of the show profil button\n  bestaetigenButtonClicked = (event) => {\n    this.setState({\n      showVorschlagListe: true\n    });\n  }\n\n  componentDidMount() {\n    this.getLernfaecher();\n  }\n\n  render() {\n    const { classes, currentPerson } = this.props;\n    const { profil, lernfaecher, lernfach, showVorschlagListe, loadingInProgress, error } = this.state;\n    \n    console.log(profil)\n    console.log(showVorschlagListe)\n    return (\n      <div>\n        <FormControl required fullWidth margin='normal' className={classes.formControl}>\n          <InputLabel htmlFor=\"age-native-simple\">Lernfach auswählen:</InputLabel>\n          <Select\n            native\n            value= {lernfach}\n            onChange={this.handleChange}\n          >\n           {lernfaecher.map(lernfach =>\n            <option key={lernfach.id} value={lernfach.id}>{lernfach.bezeichnung}</option>\n          )};\n           \n          </Select>\n        </FormControl>\n        <Button color=\"primary\" onClick= {this.bestaetigenButtonClicked}>Bestätigen</Button>\n        <VorschlagListe show={showVorschlagListe} currentPerson={currentPerson} lernfach={lernfach} />\n        <LoadingProgress show={loadingInProgress}></LoadingProgress>\n        <ContextErrorMessage error={error} contextErrorMsg = {'Hier ist ein Fehler aufgetreten'} onReload={this.getProfil} />\n      </div>\n    );\n  } \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  formControl: {\n    marginBottom: theme.spacing(1),\n    minWidth: 120,\n  }\n});\n\nexport default withRouter(withStyles(useStyles)(LernfaecherForm));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js",["250"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Badge} from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport KonversationListeEintrag from './KonversationListeEintrag';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport AnfrageEingangForm from './dialogs/AnfrageEingangForm';\n\n\n/**\n * Es werden alle Konversationen des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [KonversationListeEintrag]](#konversationlisteeintrag)\n * \n * Hierfür werden alle Konversationen des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\nclass KonversationListe extends Component {\n    constructor(props){\n        super(props);\n\n        let expandedID = null;\n\n        if (this.props.location.expandKonversation) {\n        expandedID = this.props.location.expandKonversation.getID();\n        }\n        \n       \n        // initiiere einen leeren state\n        this.state = {\n            konversationen : [],\n\n            anfrage: null,\n\n            showAnfrageEingangForm: false,\n\n            error: null,\n            loadingInProgress: false, \n            expandedKonversationID: expandedID,\n        };\n\n      }\n\n      // API Anbindung um Konversationen des Students vom Backend zu bekommen \n    getKonversation = () => {\n      LernpartnerAPI.getAPI().getKonversationenByPerson(this.props.currentPerson.getID())\n      .then(konversationenBOs =>\n          this.setState({\n              konversationen: konversationenBOs,\n              error: null,\n              loadingInProgress: false,\n          })).catch(e =>\n              this.setState({\n                  konversationen: [],\n                  error: e,\n                  loadingInProgress: false,\n              }));\n      this.setState({\n          error: null,\n          loadingInProgress: true,\n          loadingKonversationenError: null\n      });\n    }\n\n /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {konversation} KonversationBO of the KonversationListeEintrag to be toggeled\n   */\n     \n  onExpandedStateChange = konversation => {\n    // console.log(konversationID);\n    // Set expandend Konversation Eintrag to null by default\n    let newID = null;\n\n    // If same konversation entry is clicked, collapse it else expand a new one\n    if (konversation.getID() !== this.state.expandedKonversationID) {\n    // Expand the konservation entry with konversationID\n    newID = konversation.getID();\n    }\n    // console.log(newID);\n    this.setState({\n    expandedKonversationID: newID,\n    });\n}\n\n    /** Handles the onClick event of the delete customer button */\n    getAnfrageEingangForm = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showAnfrageEingangForm: true\n        });\n    }\n\n  /** Handles the onClose event of the CustomerForm */\n  anfrageEingangFormFormClosed = (anfrage) => {\n    // customer is not null and therefor changed\n    if (anfrage) {\n      this.setState({\n        anfrage: anfrage,\n        showAnfrageEingangForm: false\n      });\n    } else {\n      this.setState({\n        showAnfrageEingangForm: false\n      });\n    }\n  }\n/**\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\n   */\n  chatVerlassen = () => {\n    this.getKonversation();\n    this.setState({\n        konversationen: this.state.konversationen,\n        //showCustomerForm: false\n    });\n}\n\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getKonversation();\n}\n\n\nrender() {\n  const { classes, currentPerson } = this.props;\n        const { konversationen, showAnfrageEingangForm, expandedKonversationID, error, loadingInProgress}  = this.state;\n\n        return(\n          <div className={classes.root}>\n            <Button variant='contained' onClick={this.getAnfrageEingangForm} color='primary' className={classes.button}>\n            <Badge badgeContent={17} color=\"secondary\" className={classes.badge}>\n             </Badge>\n                  Anfragen\n             </Button>\n           \n            { \n              // Show the list of KonversationListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              konversationen.map(konversation =>\n                <KonversationListeEintrag key={konversation.getID()} currentPerson= {currentPerson} konversation={konversation} expandedState={expandedKonversationID === konversation.getID()}\n                onExpandedStateChange={this.onExpandedStateChange}\n                onTeilnahmeChatDeleted={this.chatVerlassen}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Chats nicht geladen werden!`} onReload={this.getKonversation} />\n\n            <AnfrageEingangForm show={showAnfrageEingangForm} currentPerson={currentPerson} onClose={this.anfrageEingangFormFormClosed} />\n\n          </div>\n\n        );\n\n      }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  badge: {\n    marginRight: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nKonversationListe.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(KonversationListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid, Container } from '@material-ui/core';\n//import Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport RegistrierungForm from './dialogs/RegistrierungForm';\nimport MeinProfilForm from './dialogs/MeinProfilForm';\nimport { LernpartnerAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\n\nclass MeinProfil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            person: null,\n            \n            personVorname: null,\n            personName: this.props.personName,\n            personSemester: null,\n            personAlter: null,\n            personStudiengang: null,\n            lerngruppe: false,\n\n            personProfilID: null,\n            personLernfaecher: [],\n            lernfaechernamen: [],\n\n            personLernvorliebenID: null,\n            profil: null,\n            lernvorlieben: null,\n\n            lernvorliebentageszeiten: null,\n            lernvorliebentage: null,\n            lernvorliebenfrequenz: null,\n            lernvorliebenlernart: null,\n            lernvorliebengruppengroesse: null,\n            lernvorliebenlernort: null,\n\n            gruppe: false,\n            showMeinProfilForm: false,\n            showRegistrierungForm: false,\n            loadingInProgress: false,\n            loadingError: null,\n            \n            \n        };\n    }\n\n    // API Anbindung um Profil vom Backend zu bekommen\n    \n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.currentPerson.getgoogle_user_id())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personAlter: personBO.alter,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.profil,\n            loadingInProgress: false,\n            error: null,\n          })).then(() => {\n            if (this.state.personName === 'Null'){\n              this.setState({\n                showRegistrierungForm: true\n              })\n            }\n          })\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n    \n\n   getProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n            profil: profilBO,\n            personLernvorliebenID: profilBO.lernvorlieben_id,\n            error: null,\n            loadingInProgress: false,\n          })).then(() => {\n            this.getLernvorlieben();\n           \n          }).catch(e =>\n            this.setState({\n              profil: null,\n              personLernfaecher: null,\n              error: e,\n              loadingInProgress: false,\n            }));\n\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    getLernfaecher = () => {\n      LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n      .then(lernfaecherBOs =>\n        this.setState({\n              personLernfaecher: lernfaecherBOs,\n              lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\n              loadingInProgress: false,\n              error: null\n        }))\n        .catch(e =>\n          this.setState({ // Reset state with error from catch\n            personLernfaecher: null,\n            loadingInProgress: false,\n            error: e,\n          })\n        );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    getalleLernfaecher = () => {\n      LernpartnerAPI.getAPI().getLernfaecher()\n      .then(lernfaecherBOs =>\n        this.setState({\n              lernfaechergesamt: lernfaecherBOs,\n              lernfaecher_id: lernfaecherBOs.map(lernfach => lernfach.id),\n              lernfaecher_bez: lernfaecherBOs.map(lernfach => lernfach.bezeichnung),\n              loadingInProgress: false,\n              error: null\n        }))\n        .catch(e =>\n          this.setState({ // Reset state with error from catch\n            lernfaechergesamt: null,\n            lernfaechertest: null,\n            loadingInProgress: false,\n            error: e,\n          })\n        );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n   \n    getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.personLernvorliebenID)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            lernvorliebentageszeiten: lernvorliebenBO.tageszeiten_bez,\n            lernvorliebentage: lernvorliebenBO.tage_bez,\n            lernvorliebenfrequenz: lernvorliebenBO.frequenz_bez,\n            lernvorliebenlernart: lernvorliebenBO.lernart_bez,\n            lernvorliebengruppengroesse: lernvorliebenBO.gruppengroesse_bez,\n            lernvorliebenlernort: lernvorliebenBO.lernort_bez,\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n  \n  \n  //Handles the onClick event of the show profil button\n  bearbeitenButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showMeinProfilForm: true\n    });\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  userFormClosed = (person) => {\n    this.getPerson();\n    if (person) {\n        this.setState({\n            person: person,\n            showRegistrierungForm: false,\n        });\n    } else {\n        this.setState({\n          showRegistrierungForm: false\n        })\n      \n    }\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  bearbeitenFormClosed = (person) => {\n    this.getPerson();\n    if (person) {\n        this.setState({\n            person: person,\n            showMeinProfilForm: false,\n        });\n    } else {\n        this.setState({\n          showMeinProfilForm: false\n        })\n      \n    }\n  }\n\n  lernfaecherOptions = (arr1, arr2, sep) => {\n    arr1.map(function (num, idx) {\n      return num.toString().concat(sep, (arr2[idx]).toString())\n    })\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount(){\n    this.getPerson();\n    this.getProfil();\n    this.getLernfaecher();\n    this.getalleLernfaecher();\n    \n  }\n\n\n   /** Renders the component */\n    render() {\n      const { classes , currentPerson } = this.props;\n      // Use the states customer\n      console.log(currentPerson)\n\n      const { test, lernfaecher_id, lernfaecher_bez, lernfaechernamen, profil, personProfil, personName, personVorname, personSemester, personAlter, personStudiengang, personLernfaecher, lernfach, lernfaechergesamt, personLernvorliebenID, lernvorlieben, lernvorliebentageszeiten, lernvorliebentage, lernvorliebenfrequenz, lernvorliebenlernart, lernvorliebengruppengroesse, lernvorliebenlernort, showRegistrierungForm, showMeinProfilForm, loadingInProgress, error} = this.state;\n      \n      return (\n        <div className={classes.root}>\n        <RegistrierungForm show={showRegistrierungForm} currentPerson = {currentPerson} onClose={this.userFormClosed}/>\n\n        <Button variant=\"outlined\" color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Mein Profil bearbeiten</Button>\n        <br/>\n        <Paper className={classes.inhalt}>\n        <h2>Meine Daten:</h2>\n\n        <Typography variant='body1' color={'textSecondary'}>\n        \n                              <b>Name: </b>{personVorname} {personName}<br />\n                              <b>Alter: </b> {personAlter} <br />\n                              <b>Semester: </b> {personSemester} <br />\n                              <b>Studiengang: </b>{personStudiengang}<br />\n                              \n                              </Typography>\n                              </Paper>\n\n                              <Paper className={classes.inhalt}>\n                              <h2>Meine Lernfächer:</h2>\n\n                              <Typography variant='body1' color={'textSecondary'}>\n        \n                              {\n                                lernfaechernamen.map(lernfach => \n                                  <li>{lernfach}</li>\n                                  )\n                                 \n                              }\n                              </Typography>\n                              </Paper>\n\n\n                              <Paper className={classes.inhalt}>\n\n                              <h2> Meine Lernvorlieben: </h2>\n                              <Typography variant='body1' color={'textSecondary'}>\n                              <b>Tageszeit: </b>{lernvorliebentageszeiten}<br />\n                              <b>Tage: </b>{lernvorliebentage}<br />\n                              <b>Frequenz: </b>{lernvorliebenfrequenz}<br />\n                              <b>Lernart: </b>{lernvorliebenlernart}<br />\n                              <b>Gruppengröße: </b>{lernvorliebengruppengroesse}<br />\n                              <b>Lernort: </b>{lernvorliebenlernort}<br />\n        \n        </Typography>\n        </Paper>\n        <MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson} currentProfil={profil} lernfaechergesamt = {lernfaechergesamt} lernvorlieben={lernvorlieben} onClose={this.bearbeitenFormClosed}/>\n        </div>\n      );\n    }\n}\n//<MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson}/>\n  const styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n\n  inhalt: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n  }\n\n  });\n\n\n/** PropTypes */\nMeinProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  currentPerson: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withRouter(withStyles(styles)(MeinProfil));\n\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js",["271"],"import ProfilBO from './ProfilBO';\nimport PersonBO from './PersonBO';\nimport VorschlagBO from './VorschlagBO';\nimport LerngruppeBO from './LerngruppeBO';\nimport LernvorliebenBO from './LernvorliebenBO';\nimport NachrichtBO from './NachrichtBO';\nimport KonversationBO from './KonversationBO'\nimport TeilnahmeChatBO from './TeilnahmeChatBO';\nimport TeilnahmeGruppeBO from './TeilnahmeGruppeBO';\nimport LernfachBO from './LernfachBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n */\nexport default class LernpartnerAPI {\n\n        // Singelton instance\n        static #api = null;\n\n        #lernappServerBaseURL = '/lernApp'\n        /** \n         * Get the Singelton instance \n         * \n         * @public\n         */\n        static getAPI() {\n          if (this.#api == null) {\n            this.#api = new LernpartnerAPI();\n          }\n          return this.#api;\n        }\n\n        #fetchAdvanced = (url, init) => fetch(url, init)\n          .then(res => {\n            // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n            if (!res.ok) {\n              throw Error(`${res.status} ${res.statusText}`);\n            }\n            return res.json();\n          }\n          )\n\n        //Person related\n        #getPersonenURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #addPersonURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #getPersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #getPersonByProfilURL = (profilid) => `${this.#lernappServerBaseURL}/personen-by-profil/${profilid}`;\n        #updatePersonURL = (id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe) => `${this.#lernappServerBaseURL}/personen?id=${id}&name=${name}&vorname=${vorname}&semester=${semester}&studiengang=${studiengang}&alter=${alter}&geschlecht=${geschlecht}&lerngruppe=${lerngruppe}`;\n        #deletePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #searchPersonURL = (personName) => `${this.#lernappServerBaseURL}/personen-by-name/${personName}`;\n        #getPersonByGoogleIDURL = (google_user_id) => `${this.#lernappServerBaseURL}/personbygoogle/${google_user_id}`;\n        \n        //Gruppenbezogen\n        #getLerngruppenURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #getLerngruppeByProfilURL = (profilid) => `${this.#lernappServerBaseURL}/lerngruppen-by-profil/${profilid}`;\n        #addLerngruppeURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #getLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        #updateLerngruppeURL = (id, name, profil)  => `${this.#lernappServerBaseURL}/lerngruppen?id=${id}&name=${name}&profil=${profil}`;\n        #deleteLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        \n        //Profilbezogen\n        #getProfileURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #addProfilURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #addProfileURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #getProfilURL = (id) => `${this.#lernappServerBaseURL}/profile-by-id/${id}`;\n        #updateProfilURL = (id, gruppe, lernfaecher, lernvorlieben) => `${this.#lernappServerBaseURL}/profile?id=${id}&gruppe=${gruppe}&lernfaecher=${lernfaecher}&lernvorlieben=${lernvorlieben}`;\n        //#getLernfaecherByProfilURL = (profilID) => `${this.#lernappServerBaseURL}/profil/${profilID}`;\n        #deleteProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n\n        //Lernvorliebenbezogen\n        #getLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        //#getLernvorliebenByProfilURL = () => `${this.#lernappServerBaseURL}/lervorlieben/${profilid}`;\n        //#getLernvorliebenPraeferenzURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben-praeferenz/${id}`;\n        #addLernvorliebenURL = () => `${this.#lernappServerBaseURL}/lernvorlieben`;\n        #updateLernvorliebenURL = (id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort) => `${this.#lernappServerBaseURL}/lernvorlieben?id=${id}&tageszeiten=${tageszeiten}&tage=${tage}&frequenz=${frequenz}&lernart=${lernart}&gruppengroesse=${gruppengroesse}&lernort=${lernort}`;\n        #deleteLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        //Vorschlagbezogen\n        #getVorschlaegeURL = (mainpersonID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}`;\n        //#getSelectedLernfach = () => `${this.#lernappServerBaseURL}`\n        #getVorschlaegeByPersonByLernfachURL = (mainpersonID, lernfachID) => `${this.#lernappServerBaseURL}/vorschlaege-by-person-by-lernfach/${mainpersonID}/${lernfachID}`;\n\n        //Nachrichtenbezogen\n        #getNachrichtenURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationURL = (id) => `${this.#lernappServerBaseURL}/nachricht-by-konversation/${id}`;\n        #addNachrichtURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationByPersonURL = (konversationID, person_id) => `${this.#lernappServerBaseURL}/nachricht-by-konversation-by-person/${konversationID}/${person_id}`;\n        #deleteNachrichtURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/${id}`;\n        #deleteNachrichtenByKonversationURL = (konversation_id) => `${this.#lernappServerBaseURL}/nachrichten/${konversation_id}`;\n        #getNachrichtenByPersonURL = (personID) => `${this.#lernappServerBaseURL}/nachrichten/${personID}`;\n        #getNachrichtenByInhaltURL= (nachricht_inhalt) => `${this.#lernappServerBaseURL}/nachrichten/${nachricht_inhalt}`;\n        \n        //Konversationbezogen\n        #getKonversationenURL = () => `${this.#lernappServerBaseURL}/konversationen`;\n        #getKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #getKonversationenByPersonURL = (personid) => `${this.#lernappServerBaseURL}/konversationbyperson/${personid}`;\n        #getKonversationByNameURL = (name) => `${this.#lernappServerBaseURL}/konversationen/${name}`;\n        #updateKonversationURL = (id, name, anfragestatus) => `${this.#lernappServerBaseURL}/konversationen?id=${id}&name=${name}&anfragestatus=${anfragestatus}`;\n        #setKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #addKonversationURL = () => `${this.#lernappServerBaseURL}/konversationen`;\n        #deleteKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n\n        //TeilnahmeChatbezogen\n        #getTeilnahmeChatURL = () => `${this.#lernappServerBaseURL}/teilnahmeChat`;\n        #getTeilnahmeChatByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #getTeilnahmeChatByPersonByStatusURL = (person_id, status) => `${this.#lernappServerBaseURL}/teilnahmeChat-by-person-id-status/${person_id}/${status}`;\n        #updateTeilnahmeChatURL = (id, teilnehmer, anfrage_sender, status, konversation) => `${this.#lernappServerBaseURL}/teilnahmenChat?id=${id}&teilnehmer=${teilnehmer}&anfrage_sender=${anfrage_sender}&status=${status}&konversation=${konversation}`;\n        #setTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #addTeilnahmeChatURL = () => `${this.#lernappServerBaseURL}/teilnahmenChat`;\n        #deleteTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #getTeilnahmeChatByStudentIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-student-id/${id}`;\n        #getTeilnahmeChatByKonversationByStatusURL = (status, konversation_id) => `${this.#lernappServerBaseURL}/teilnehmer-by-konversation-id-status/${status}/${konversation_id}`;\n        #getTeilnahmeChatByKonversationIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-konversation-id/${id}`;\n        #getTeilnahmeChatByKonversationAndPersonURL = (konversation_id, person_id) => `${this.#lernappServerBaseURL}/teilnahmenChat-by-konv-pers/${konversation_id}/${person_id}`;\n        #getTeilnahmeChatByAnfrageSenderURL = (anfrage_sender) => `${this.#lernappServerBaseURL}/teilnehmer-by-anfrage-sender/${anfrage_sender}`;\n\n        //TeilnahmeGruppebezogen\n        #getTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #addTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #getTeilnahmeGruppeByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\n        #getTeilnahmeGruppeByPersonByGruppeURL = (personId, lerngruppeId) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${personId}/${lerngruppeId}`;\n        \n        #deleteTeilnahmeGruppeURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\n\n        //Lernfachbezogene\n        #getLernfaecherURL = () => `${this.#lernappServerBaseURL}/lernfaecher`;\n        #getLernfachByIDURL = (id) => `${this.#lernappServerBaseURL}/lernfaecher-by-id/${id}`;\n        #getLernfaecherByProfilURL = (profilid) => `${this.#lernappServerBaseURL}/lernfaecher-by-profil/${profilid}`;\n\n        //Personenbezogene\n        /**\n           * Gibt alle Personen als BO zurück\n           * \n           * @public\n           */\n        getPersonen() {\n          return this.#fetchAdvanced(this.#getPersonenURL()).then((responseJSON) => {\n            let personenBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(customerBOs);\n            return new Promise(function (resolve) {\n              resolve(personenBOs);\n            })           \n          })\n        }\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addPerson(personBO) {\n          return this.#fetchAdvanced(this.#addPersonURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(personBO)\n          }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} personID to be retrieved\n         * @public\n         */\n        getPerson(personID) {\n          return this.#fetchAdvanced(this.#getPersonURL(personID)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let personBO = PersonBO.fromJSON(responseJSON);\n            console.info(personBO);\n            return new Promise(function (resolve) {\n              resolve(personBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} profilID to be retrieved\n         * @public\n         */\n        getPersonByProfil(profilID) {\n          return this.#fetchAdvanced(this.#getPersonByProfilURL(profilID)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let personBO = PersonBO.fromJSON(responseJSON);\n            console.info(personBO);\n            return new Promise(function (resolve) {\n              resolve(personBO);\n            })\n          })\n        }\n\n        /**\n         * Updated eine Person und gibt Promise zurück, resolves as PersonBO.\n         \n         */\n        updatePerson(id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe) {\n          return this.#fetchAdvanced(this.#updatePersonURL(id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            }\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} google_user_id to be retrieved\n         * @public\n         */\n        getPersonByGoogleID(google_user_id) {\n          return this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let personBO = PersonBO.fromJSON(responseJSON);\n            console.info(personBO);\n            return new Promise(function (resolve){\n                resolve(personBO)\n            })\n          })\n        }\n \n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        deletePerson(personID) {\n          return this.#fetchAdvanced(this.#deletePersonURL(personID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        searchPerson(personName) {\n          return this.#fetchAdvanced(this.#searchPersonURL(personName)).then((responseJSON) => {\n            let personBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(personBOs);\n            })\n          })\n        }\n        //Lerngruppenbezogene\n        /**\n           * Gibt alle Lerngruppen als BO zurück\n           * \n           * @public\n           */\n          getLerngruppen() {\n            return this.#fetchAdvanced(this.#getLerngruppenURL()).then((responseJSON) => {\n              let lerngruppenBOs = LerngruppeBO.fromJSON(responseJSON);\n              // console.info(customerBOs);\n              return new Promise(function (resolve) {\n                resolve(lerngruppenBOs);\n              })           \n            })\n          }\n\n        /**\n         * Gibt eine Lerngruppe mit einer bestimmten ID als BO zurück\n         *\n         * @param {Number} profilID to be retrieved\n         * @public\n         */\n        getLerngruppeByProfil(profilID) {\n          return this.#fetchAdvanced(this.#getLerngruppeByProfilURL(profilID)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let lerngruppeBO = LerngruppeBO.fromJSON(responseJSON);\n            console.log(lerngruppeBO);\n            return new Promise(function (resolve) {\n              resolve(lerngruppeBO);\n            })\n          })\n        }\n\n          /**\n           * Adds a lerngruppe and returns a Promise, which resolves to a new LerngruppeBO object\n           *  \n           * @param {LerngruppeBO} lerngruppeBO to be added. The ID of the new lerngruppe is set by the backend\n           * @public\n           */\n          addLerngruppe(lerngruppeBO) {\n          console.log(lerngruppeBO)\n            return this.#fetchAdvanced(this.#addLerngruppeURL(), {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n            },\n             body: JSON.stringify(lerngruppeBO)\n           }).then((responseJSON) => {\n             // We always get an array of LerngruppeBO.fromJSON, but only need one object\n             let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON);\n             return new Promise(function (resolve) {\n               resolve(responseLerngruppeBO);\n             })\n           })\n         }\n  \n          /**\n           * Gibt eine Lerngruppe mit einer bestimmten personenID als BO zurück\n           * \n           * @param {Number} personenID to be retrieved\n           * @public\n           */\n          getLerngruppe(personenID) {\n            return this.#fetchAdvanced(this.#getLerngruppeURL(personenID)).then((responseJSON) => {\n              // We get an array of LerngruppeBOs.fromJSON\n              let lerngruppeBO = LerngruppeBO.fromJSON(responseJSON);\n              //console.info(lerngruppeBO);\n              return new Promise(function (resolve) {\n                resolve(lerngruppeBO);\n              })\n            })\n          }\n  \n          /**\n           * Updated eine Lerngruppe und gibt Promise zurück, resolves as LerngruppeBO.\n           * \n           * @param {LerngruppeBO} lerngruppeBO to be updated\n           * @public\n           */\n          updateLerngruppe(id, name, profil) {\n            return this.#fetchAdvanced(this.#updateLerngruppeURL(id, name, profil), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            }\n          })\n        }\n   \n          /**\n           * Gibt Promise zurück\n           * \n           * @param {Number} lerngruppeID to be deleted\n           * @public\n           */\n          deleteLerngruppe(lerngruppeID) {\n            return this.#fetchAdvanced(this.#deleteLerngruppeURL(lerngruppeID), {\n              method: 'DELETE'\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n\n\n        //Profilbezogene\n        /**\n           * Gibt alle Profile als BO zurück\n           * \n           * @public\n           */\n          getProfile() {\n            return this.#fetchAdvanced(this.#getProfileURL()).then((responseJSON) => {\n              let profileBOs = ProfilBO.fromJSON(responseJSON);\n              // console.info(profileBOs);\n              return new Promise(function (resolve) {\n                resolve(profileBOs);\n              })           \n            })\n          }\n\n        /**\n         * Gibt ein Profil-Objekt zurück\n         * @param {Number} profilID to be retrieved\n         * @public\n          */\n         getProfil(profilID) {\n          return this.#fetchAdvanced(this.#getProfilURL(profilID)).then((responseJSON) => {\n            let profilBO = ProfilBO.fromJSON(responseJSON);\n            console.info(profilBO)\n            return new Promise(function (resolve) {\n              resolve(profilBO);\n            })\n          })\n        }\n\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addProfil(profilBO) {\n        console.log(profilBO)\n          return this.#fetchAdvanced(this.#addProfileURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n             body: JSON.stringify(profilBO)\n           }).then((responseJSON) => {\n             // We always get an array of LernvorliebenBO.fromJSON, but only need one object\n             let responseProfilBO = ProfilBO.fromJSON(responseJSON);\n             return new Promise(function (resolve) {\n               resolve(responseProfilBO);\n             })\n           })\n         }\n\n        /**\n         * Updated ein Profil und gibt Promise zurück, resolves as ProfilBO.\n         * \n         * @public\n         */\n        updateProfil(id, gruppe, lernfaecher, lernvorlieben) {\n          return this.#fetchAdvanced(this.#updateProfilURL(id, gruppe, lernfaecher, lernvorlieben), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            }\n          }) \n        }\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} profilID to be deleted\n         * @public\n         */\n        deleteProfil(profilID) {\n          return this.#fetchAdvanced(this.#deleteProfilURL(profilID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(profilBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n\n        //Lernvorliebenbezogene\n\n        /**\n         * Gibt eine Lernvorliebe mit einer bestimmten ID als BO zurück\n         * \n         * @param {Number} lernvorliebenID to be retrieved\n         * @public\n         */\n        getLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#getLernvorliebenURL(lernvorliebenID)).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            let lernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON);\n            console.info(lernvorliebenBO);\n            return new Promise(function (resolve) {\n              resolve(lernvorliebenBO);\n            })\n          })\n        }\n\n\n        //getLernvorliebenPraeferenz(lernvorliebenID) {\n          //return this.#fetchAdvanced(this.#getLernvorliebenPraeferenzURL(lernvorliebenID)).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            //let lernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON);\n            //console.info(lernvorliebenBO);\n            //return new Promise(function (resolve) {\n              //resolve(lernvorliebenBO);\n            //})\n          //})\n        //}\n\n\n\n        /**\n         * Adds a lernvorlieben and returns a Promise, which resolves to a new LernvorliebenBO object\n         *  \n         * @param {LernvorliebenBO} lernvorliebenBO to be added. The ID of the new lernvorliebe is set by the backend\n         * @public\n         */\n        addLernvorlieben(lernvorliebenBO) {\n          return this.#fetchAdvanced(this.#addLernvorliebenURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n             body: JSON.stringify(lernvorliebenBO)\n           }).then((responseJSON) => {\n             // We always get an array of LernvorliebenBO.fromJSON, but only need one object\n             let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON);\n             return new Promise(function (resolve) {\n               resolve(responseLernvorliebenBO);\n             })\n           })\n         }\n\n        /**\n         * Gibt Promise zurück\n         * \n         * @param {Number} lernvorliebenID to be deleted\n         * @public\n         */\n        deleteLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#deleteLernvorliebenURL(lernvorliebenID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(LernvorliebenBOs);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n\n        updateLernvorlieben(id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort) {\n            return this.#fetchAdvanced(this.#updateLernvorliebenURL(id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              }\n            })\n          }\n\n        //Vorschlagbezogene\n        /**\n         * Gibt alle Vorschlaege zurück\n         * @param {Number} mainpersonID to be retrieved\n         * @param {Number} lernfachID to be retrieved\n         * @public\n          */\n        getVorschlaegeByPersonByLernfach(mainpersonID, lernfachID) {\n          return this.#fetchAdvanced(this.#getVorschlaegeByPersonByLernfachURL(mainpersonID, lernfachID, {method: 'GET'})).then((responseJSON) => {\n            let vorschlaegeBOs = VorschlagBO.fromJSON(responseJSON);\n            //console.info(vorschlaegeBOs)\n            return new Promise(function (resolve) {\n              resolve(vorschlaegeBOs);\n            })\n          })\n        }\n\n      \n        //Nachrichtbezogene\n        /** \n        * Gibt alle Nachrichten einer Person zurück\n         * @param {Number} personID to be retrieved\n         * @public\n          */\n\n        getNachrichten(personID) {\n          return this.#fetchAdvanced(this.#getNachrichtenByPersonURL(personID,{method: 'GET'})).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            //console.info(nachrichtenBOs)\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })\n          })\n        }\n\n       /**\n         * Adds a Nachricht and returns a Promise, which resolves to a new NachrichtenBO object\n         *  \n         * @param {NachrichtBO} nachrichtBO to be added. The ID of the new nachricht is set by the backend\n         * @public\n         */\n\n        addNachricht(nachrichtBO) {\n          return this.#fetchAdvanced(this.#addNachrichtURL(), {\n          method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(nachrichtBO)\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtBOs.fromJSON, but only need one object\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /**\n           * Gibt alle Nachrichten als BO zurück\n           * \n           * @public\n           */\n\n        getNachrichten() {\n          return this.#fetchAdvanced(this.#getNachrichtenURL()).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\n         * @param {Number} konversationID to be retrieved\n         * @public\n          */\n    \n        getNachrichtenByKonversation(konversation_id){\n\t\t      return this.#fetchAdvanced(this.#getNachrichtenByKonversationURL(konversation_id)).then((responseJSON) => {\n\t\t\t      let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n\t\t\t      console.info(nachrichtenBOs)\n\t\t\t      return new Promise(function (resolve){\n\t\t\t  \t    resolve(nachrichtenBOs)\n\t\t\t      })\n\t\t      })\n\t      }\n\n\n          /**\n         * Gibt Promise zurück, Löscht Nachricht mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n\n\n        deleteNachricht(id) {\n          return this.#fetchAdvanced(this.#deleteNachrichtURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtenBOs.fromJSON\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /** \n         * gibt die Nachrichten mit der bestimmten konversationsID und PersonID als BO zurück\n         * @param {Number} konversation_id to be retrieved\n         * @param {Number} personID \n         * @public\n         */\n    \n          getNachrichtenByKonversationByPerson(konversation_id, person_id) {\n            return this.#fetchAdvanced(this.#getNachrichtenByKonversationByPersonURL(konversation_id, person_id, {method: 'GET'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n \n          /** \n           * löscht Nachrichten einer konversation\n           * @param {Number} konversation_id to be retrieved\n           * @param {Number} personID \n           * @public\n           */\n      \n          deleteNachrichtenByKonversation(konversation_id) {\n            return this.#fetchAdvanced(this.#deleteNachrichtenByKonversationURL(konversation_id, {method: 'DELETE'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              //console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n\n           /** \n          * gibt die Nachrichten mit dem bestimmten Inhalt als BO zurück\n          * @param {String} inhalt to be retrieved\n          * @public\n          */\n    \n        getNachrichtByInhalt(nachricht_inhalt){\n          return this.#fetchAdvanced(this.#getNachrichtenByInhaltURL(nachricht_inhalt)).then((responseJSON) => {\n          let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n          console.info(nachrichtenBOs)\n          return new Promise(function (resolve){\n            resolve(nachrichtenBOs)\n             })\n           })\n          }\n\n          //Konversations bezogen\n\n           /**\n           * Gibt alle Konversationen als BO zurück\n           * \n           * @public\n           */\n\n        getKonversationen() {\n          return this.#fetchAdvanced(this.#getKonversationenURL()).then((responseJSON) => {\n            let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(konversationenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Konversation mit der bestimmten ID als BO zurück\n         * @param {Number} id to be retrieved\n         * @public\n          */\n    \n          getKonversation(id){\n            return this.#fetchAdvanced(this.#getKonversationURL(id)).then((responseJSON) => {\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n              //console.info(konversationenBOs)\n              return new Promise(function (resolve){\n                resolve(konversationenBOs)\n              })\n            })\n          }\n\n           /**\n           * Gibt alle Konversationen einer Person als BO zurück\n           * @param {Number} personid to be retrieved\n           * @public\n           */\n\n          getKonversationenByPerson(personid) {\n            return this.#fetchAdvanced(this.#getKonversationenByPersonURL(personid)).then((responseJSON) => {\n              let konversationBO = KonversationBO.fromJSON(responseJSON);\n              console.log(konversationBO)\n              return new Promise(function (resolve) {\n                resolve(konversationBO);\n              })           \n            })\n          }\n\n         /**\n         * Gibt Promise zurück, holt Konversationen mit bestimmtem Namen\n         *\n         * @param {String} name to be retrived\n         * @public\n         */\n          getKonversationByName(name){\n            return this.#fetchAdvanced(this.#getKonversationByNameURL(name)).then((responseJSON) => {\n                let konversationBO = KonversationBO.fromJSON(responseJSON);\n                console.log(konversationBO)\n                return new Promise(function (resolve){\n                    resolve(konversationBO)\n                })\n            })\n          }\n\n          /** \n          * Adds a Konversation and returns a Promise, which resolves to a new KonversationBO object\n          *  \n          * @param {KonversationBO} konversationBO to be added. The ID of the new nachricht is set by the backend\n          * @public\n          */\n \n         addKonversation(konversationBO) {\n           return this.#fetchAdvanced(this.#addKonversationURL(), {\n           method: 'POST',\n             headers: {\n               'Accept': 'application/json, text/plain',\n               'Content-type': 'application/json',\n             },\n             body: JSON.stringify(konversationBO)\n           }).then((responseJSON) => {\n             // We always get an array of NachrichtBOs.fromJSON, but only need one object\n             let responseKonversationBO = KonversationBO.fromJSON(responseJSON);\n             console.log(responseKonversationBO);\n             return new Promise(function (resolve) {\n               resolve(responseKonversationBO);\n             })\n           })\n         }\n\n          /**\n         * Gibt Promise zurück, Löscht Konversation mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n        deleteKonversation(id) {\n          return this.#fetchAdvanced(this.#deleteKonversationURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of KonversationBOs.fromJSON\n            let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\n            // console.info(KonversationBOs);\n            return new Promise(function (resolve) {\n              resolve(responseKonversationBO);\n            })\n          })\n        }\n\n        updateKonversation(id, name, anfragestatus) {\n            return this.#fetchAdvanced(this.#updateKonversationURL(id, name, anfragestatus), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              }\n            })\n          }\n\n             //Teilnahme Chat bezogene\n\n          /**\n           * Gibt alle Teilnahmen eines Chats als BO zurück\n           * \n           * @public\n           */\n\n           getTeilnahmeChat() {\n            return this.#fetchAdvanced(this.#getTeilnahmeChatURL()).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmechatBOs);\n               })           \n              })\n            }\n\n          /** \n           * gibt die Teilnehmer mit der bestimmten ID als BO zurück\n           * @param {Number} id to be retrieved\n           * @public\n          */\n  \n          getTeilnahmeChatById(id){\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByIdURL(id)).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            //console.info(teilnahmechatBOs)\n            return new Promise(function (resolve){\n              resolve(teilnahmechatBOs)\n               })\n             })\n            }\n\n            /**\n             * setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\n             * \n             * @param {Number} id to be deleted\n             * @public\n             */\n          getTeilnahmeChatByPersonByStatus(person_id, status){\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByPersonByStatusURL(person_id, status, {method: 'GET'})).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            console.log(teilnahmechatBOs)\n            return new Promise(function (resolve){\n              resolve(teilnahmechatBOs)\n               })\n             })\n            }\n\n          getTeilnahmeChatByKonversationByStatus(status, konversation_id){\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationByStatusURL(status, konversation_id, {method: 'GET'})).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            console.log(teilnahmechatBOs)\n            return new Promise(function (resolve){\n              resolve(teilnahmechatBOs)\n               })\n             })\n            }\n\n        updateTeilnahmeChat(id, teilnehmer, anfrage_sender, status, konversation) {\n            return this.#fetchAdvanced(this.#updateTeilnahmeChatURL(id, teilnehmer, anfrage_sender, status, konversation), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              }\n            })\n          }\n\n        setTeilnahmeChat(id) {\n            return this.#fetchAdvanced(this.#setTeilnahmeChatURL(id), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              }\n            })\n          }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeChatBO object\n             *  \n             * @param {TeilnahmeChatBO} teilnahmechatBO to be added. The ID of the new teilnahemChat is set by the backend\n             * @public\n            */\n\n            addTeilnahmeChat(teilnahmechatBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeChatURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmechatBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeChatBOs.fromJSON, but only need one object\n               let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON);\n                  console.log(responseTeilnahmeChatBO);\n                  return new Promise(function (resolve) {\n                    resolve(responseTeilnahmeChatBO);\n                     })\n                   })\n               }\n\n             /** \n             * löscht Nachrichten einer konversation\n             * @param {Number} id to be retrieved\n             * @public\n             */\n    \n            deleteTeilnahmeChat(id) {\n              return this.#fetchAdvanced(this.#deleteTeilnahmeChatURL(id), {\n                method: 'DELETE'\n                }).then((responseJSON) => {\n                // We always get an array of TeilnahmeChatBOs.fromJSON\n                let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\n                // console.info(KonversationBOs);\n                return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeChatBO);\n                })\n              })\n            }\n\n             /** \n              * Gibt alle TeilnahmenChat einer Person zurück\n              * @param {Number} personid to be retrieved\n              * @public\n              */\n\n              getTeilnahmeChatByStudentId(personid) {\n                return this.#fetchAdvanced(this.#getTeilnahmeChatByStudentIdURL(personid, {method: 'GET'})).then((responseJSON) => {\n                let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n                //console.info(teilnahmechatBOs)\n                return new Promise(function (resolve) {\n                  resolve(teilnahmechatBOs);\n                  })\n                })\n              }\n              \n             /** \n              * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\n              * @param {Number} id to be retrieved\n              * @public\n             */\n  \n            getTeilnahmeChatByKonversationId(id){\n               return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationIdURL(id)).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n              //console.info(teilnahmechatBOs)\n              return new Promise(function (resolve){\n               resolve(teilnahmechatBOs)\n                })\n              })\n             }\n\n\n             /**\n              * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\n              * @param {Number} id to be retrieved\n              * @public\n             */\n            getTeilnahmeChatByAnfrageSender(id){\n               return this.#fetchAdvanced(this.#getTeilnahmeChatByAnfrageSenderURL(id)).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n              //console.info(teilnahmechatBOs)\n              return new Promise(function (resolve){\n               resolve(teilnahmechatBOs)\n                })\n              })\n             }\n\n             /** \n              * gibt die Teilnahme mit der bestimmten konversationsID und personID als BO zurück\n              * @param {Number} id to be retrieved\n              * @public\n             */\n  \n            getTeilnahmeChatByKonversationAndPerson(konversation_id, person_id){\n              return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationAndPersonURL(konversation_id, person_id)).then((responseJSON) => {\n              let teilnahmechatBO = TeilnahmeChatBO.fromJSON(responseJSON);\n              console.info(teilnahmechatBO)\n              return new Promise(function (resolve){\n                resolve(teilnahmechatBO)\n                })\n              })\n              }\n            //Teilnahme Gruppe bezogen\n\n            /**\n           * Gibt alle Teilnahmen einer Gruppe als BO zurück\n           * \n           * @public\n           */\n\n           getTeilnahmeGruppe() {\n            return this.#fetchAdvanced(this.#getTeilnahmeGruppeURL()).then((responseJSON) => {\n            let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmegruppeBOs);\n               })           \n              })\n            }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeGruppeBO object\n             *  \n             * @param {TeilnahmeGruppeBO} teilnahmegruppeBO to be added. The ID of the new teilnahemgruppe is set by the backend\n             * @public\n            */\n\n             addTeilnahmeGruppe(teilnahmegruppeBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeGruppeURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmegruppeBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeGruppeBOs.fromJSON, but only need one object\n               let responseTeilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\n               // console.info(TeilnahmeGruppeBOs);\n                 return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeGruppeBO);\n                     })\n                   })\n               }\n\n              /** \n               * gibt die Teilnehmer mit der bestimmten ID als BO zurück\n               * @param {Number} id to be retrieved\n               * @public\n              */\n              getTeilnahmeGruppeById(id){\n                return this.#fetchAdvanced(this.#getTeilnahmeGruppeByIdURL(id)).then((responseJSON) => {\n                let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n                //console.info(teilnahmegruppeBOs)\n                return new Promise(function (resolve){\n                 resolve(teilnahmegruppeBOs)\n                  })\n                })\n              }\n\n              /** \n               * gibt die Teilnehmer mit der bestimmten ID als BO zurück\n               * @param {Number} id to be retrieved\n               * @public\n              */\n             getTeilnahmeGruppeByPersonByGruppe(personId, lerngruppeId){\n              return this.#fetchAdvanced(this.#getTeilnahmeGruppeByPersonByGruppeURL(personId, lerngruppeId)).then((responseJSON) => {\n              let teilnahmegruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON);\n              console.info(teilnahmegruppeBO)\n              return new Promise(function (resolve){\n               resolve(teilnahmegruppeBO)\n                })\n              })\n            }\n\n        /**\n         * Gibt Promise zurück, Löscht Konversation mit bestimmter ID\n         *\n         * @param {Number} id to be deleted\n         * @public\n         */\n        deleteTeilnahmeGruppe(id) {\n          return this.#fetchAdvanced(this.#deleteTeilnahmeGruppeURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of TeilnahmeGruppeBOs.fromJSON\n            let teilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\n             console.info(teilnahmeGruppeBO);\n            return new Promise(function (resolve) {\n              resolve(teilnahmeGruppeBO);\n            })\n          })\n        }\n\n\n        //Lernfachspezifische Methoden\n        /**\n           * Gibt alle Lernfaecher als BO zurück\n           * \n           * @public\n           */\n          getLernfaecher() {\n            return this.#fetchAdvanced(this.#getLernfaecherURL()).then((responseJSON) => {\n              let lernfaecherBOs = LernfachBO.fromJSON(responseJSON);\n              // console.info(lernfaecherBOs);\n              return new Promise(function (resolve) {\n                resolve(lernfaecherBOs);\n              })           \n            })\n          }\n          \n          /**\n           * Gibt eine Person mit einer bestimmten ID als BO zurück\n           * \n           * @param {Number} id to be retrieved\n           * @public\n           */\n          getLernfach(id) {\n            return this.#fetchAdvanced(this.#getLernfachByIDURL(id)).then((responseJSON) => {\n              // We always get an array of PersonBOs.fromJSON, but only need one object\n              let lernfachBO = LernfachBO.fromJSON(responseJSON)[0];\n              // console.info(lernfachBO);\n              return new Promise(function (resolve) {\n                resolve(lernfachBO);\n              })\n            })\n          }\n\n          /**\n           * Gibt eine Person mit einer bestimmten ID als BO zurück\n           * \n           * @param {Number} profilid to be retrieved\n           * @public\n           */\n          getLernfaecherByProfil(profilid) {\n            return this.#fetchAdvanced(this.#getLernfaecherByProfilURL(profilid)).then((responseJSON) => {\n              // We always get an array of PersonBOs.fromJSON, but only need one object\n              let lernfaecherBOs = LernfachBO.fromJSON(responseJSON);\n              console.info(lernfaecherBOs);\n              return new Promise(function (resolve) {\n                resolve(lernfaecherBOs);\n              })\n            })\n          }\n\n\n\n\n\n}","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js",["272","273","274","275","276","277"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport VorschlagListeEintrag from './VorschlagListeEintrag';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\n//import Paper from '@material-ui/core/Paper';\n\n\n\n/**\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\n * \n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\n * \n */\n\n\nclass VorschlagListe extends Component {\n\n    constructor(props){\n        super(props);\n\n        // console.log(props);\n        let expandedID = null;\n\n        if (this.props.location.expandVorschlag) {\n        expandedID = this.props.location.expandVorschlag.getID();\n        }\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlaege : [],\n            //currentPersonName: null,\n            error: null,\n            loadingInProgress: false, \n            expandedVorschlagID: expandedID,\n        };\n    }\n\n\n    // API Anbindung um Vorschläge des Students vom Backend zu bekommen \n    getVorschlaege = () => {\n            LernpartnerAPI.getAPI().getVorschlaegeByPersonByLernfach(this.props.currentPerson.id, this.props.lernfach)\n            .then(vorschlagBOs =>\n                this.setState({\n                    vorschlaege: vorschlagBOs,\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        vorschlaege: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n            this.setState({\n                error: null,\n                loadingInProgress: true,\n                loadingVorschlaegeError: null\n            });\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        \n\n    }\n    \n    /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {vorschlag} VorschlagBO of the VorschlagListeEintrag to be toggeled\n     */\n    onExpandedStateChange = vorschlag => {\n        // console.log(vorschlagID);\n        // Set expandend Vorschlag Eintrag to null by default\n        let newID = null;\n\n        // If same vorschlag entry is clicked, collapse it else expand a new one\n        if (vorschlag.getID() !== this.state.expandedVorschlagID) {\n        // Expand the customer entry with customerID\n        newID = vorschlag.getID();\n        }\n        // console.log(newID);\n        this.setState({\n        expandedVorschlagID: newID,\n        });\n    }\n\n    render() {\n        const { show, classes, currentPerson, lernfach } = this.props;\n        const { vorschlaege, expandedVorschlagID, error, loadingInProgress}  = this.state;\n        //console.log(lernfach)\n        return (\n          show ?\n          <div className={classes.root}>\n            <h1>Hier sind alle Matches für dein ausgewähltes Lernfach:</h1>\n            <Button color=\"primary\" onClick= {this.getVorschlaege}>Matches generieren</Button>\n            { \n              // Show the list of VorschlagListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              vorschlaege.map(vorschlag =>\n                <VorschlagListeEintrag key={vorschlag.getID()} vorschlag={vorschlag} currentPerson={currentPerson} expandedState={expandedVorschlagID === vorschlag.getID()}\n                  onExpandedStateChange={this.onExpandedStateChange}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Vorschläge konnten nicht geladen werden!`} onReload={this.getVorschlaege} />\n          </div>\n          : null\n        );\n      }\n    }\n\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n      width: '100%',\n    },\n    customerFilter: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n    }\n  });\n\n/** PropTypes */\nVorschlagListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(VorschlagListe));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js",["278","279","280","281","282","283","284","285","286","287","288"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//import LernpartnerAPI from '../api/LernpartnerAPI'\nimport Profil from './Profil';\nimport { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid, List, ListItem } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport GruppeVerlassenDialog from './dialogs/GruppeVerlassenDialog';\nimport GruppenBearbeitenForm from './dialogs/GruppenBearbeitenForm';\n\n//import LernpartnerAPI from '../api/LernpartnerAPI'\nimport { LernpartnerAPI } from '../api';\n\n\n/**\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\n *\n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\n *\n */\n\nclass GruppenListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            lerngruppe: this.props.lerngruppe,\n            profil: null,\n            lernvorlieben: null,\n            gruppeName: this.props.lerngruppe.name,\n            teilnahmeGruppe: null,\n            profilID: this.props.lerngruppe.profil,\n            gruppeLernvorliebenID: null,\n            showProfil: false,\n            showLerngruppeVerlassenDialog: false,\n            //showTeilnehmer: false,\n            //showNachrichtenListe: false,\n            showGruppenBearbeitenForm: false,\n            loadingInProgress: false,\n            error: null,\n            showLerngruppeForm: false\n        };\n    }\n\n    /** Handles onChange events of the underlying ExpansionPanel */\n    expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.lerngruppe);\n    }\n\n    /** Handles the onClick event of the Profil ansehen button */\n    showProfilButtonClicked = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showProfil: true\n        });\n    }\n\n        /** TeilnahmeGruppe holen fürs Verlassen */\n  getTeilnahmeGruppe = () => {\n    LernpartnerAPI.getAPI().getTeilnahmeGruppeByPersonByGruppe(this.props.currentPerson.getID(), this.props.lerngruppe.id)\n    .then(teilnahmeGruppeBO => {\n      this.setState({\n        teilnahmeGruppe: teilnahmeGruppeBO,              // disable loading indicator                 // no error message\n      });\n    }).catch(e =>\n      this.setState({\n        teilnahmeGruppe: null,              // disable loading indicator                     // show error message\n      })\n    );\n    }\n\n    getGruppenProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.state.profilID)\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n                    profil: profilBO,\n                    gruppeLernvorliebenID: profilBO.lernvorlieben_id,\n                    error: null,\n                    loadingInProgress: false,\n                })).then (()=> {\n                    this.getGruppenLernvorlieben();\n                })\n                .catch(e =>\n                    this.setState({\n                        profil: null,\n                        gruppeLernvorliebenID: null,\n                        error: e,\n                        loadingInProgress: false,\n                 }));\n\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n   getGruppenLernvorlieben = () => {\n   //console.log(profil)\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.gruppeLernvorliebenID)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n\n\n    /** Handles the onClick event of the delete customer button */\n    verlasseLerngruppeButtonClicked = (event) => {\n        event.stopPropagation();\n        this.setState({\n            showLerngruppeVerlassenDialog: true\n        });\n    }\n\n    /** Handles the onClose event of the CustomerDeleteDialog */\n    verlasseLerngruppeDialogClosed = (teilnahmeGruppe) => {\n        // if customer is not null, delete it\n        if (teilnahmeGruppe) {\n            this.props.onTeilnahmeGruppeDeleted(teilnahmeGruppe);\n        };\n\n        // Don´t show the dialog\n        this.setState({\n            showLerngruppeVerlassenDialog: false\n        });\n    }\n\n\n  bearbeitenButtonClicked = (event) => {\n    this.setState({\n      showGruppenBearbeitenForm: true\n    });\n  }\n\n  bearbeitenFormClosed = (profil) => {\n    this.getGruppenProfil();\n    if (profil) {\n        this.setState({\n            profil: profil,\n            showGruppenBearbeitenForm: false,\n        });\n    } else {\n        this.setState({\n          showGruppenBearbeitenForm: false\n        })\n\n    }\n  }\n\n\n\n     /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n   componentDidMount() {\n       this.getTeilnahmeGruppe();\n       this.getGruppenProfil();\n   }\n\n  \n    render(){\n\n          const { classes, expandedState, currentPerson } = this.props;\n          //const { lerngruppe, gruppeName, profilID, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog, showLerngruppeForm } = this.state;\n\n\n          const { lerngruppe, lernvorlieben, gruppeName, profilID, profil, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog, showGruppenBearbeitenForm, showLerngruppeForm, loadingInProgress, error } = this.state;\n            console.log(lerngruppe)\n            console.log(profil)\n            console.log(lernvorlieben)\n            console.log(profilID)\n\n          return (\n            <div>\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  id={`lerngruppe${lerngruppe.getID()}accountpanel-header`}>\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Typography variant='body1'>\n                        {lerngruppe.getname()}\n                    </Typography>\n                  </Grid>\n                    <Button style={{ width : 250, color: \"red\"}} color='secondary' onClick={this.verlasseLerngruppeButtonClicked}>\n                        Gruppe verlassen\n                    </Button>\n                    \n                    \n                  </AccordionSummary>\n                 <AccordionDetails>\n                  <List>\n                    <ListItem>\n                  <Button color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Gruppenprofil bearbeiten</Button>\n                  </ListItem>\n                  <ListItem>\n                  <Profil user={lerngruppe}/>\n                  </ListItem>\n                  </List>\n                </AccordionDetails>\n              </Accordion>\n              \n              <GruppeVerlassenDialog show={showLerngruppeVerlassenDialog} teilnahmeGruppe={teilnahmeGruppe} currentPerson={currentPerson} onClose={this.verlasseLerngruppeDialogClosed}/>\n              <GruppenBearbeitenForm show={showGruppenBearbeitenForm} lerngruppe={lerngruppe} currentProfil ={profil} lernvorlieben={lernvorlieben}  onClose={this.bearbeitenFormClosed}/>\n\n            </div>\n          );\n        }\n}\n\n/** PropTypes */\nGruppenListeEintrag.propTypes = {\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  expandedState: PropTypes.bool.isRequired,\n  onExpandedStateChange: PropTypes.func.isRequired,\n  onTeilnahmeGruppeDeleted: PropTypes.func.isRequired\n}\n\n\nexport default (GruppenListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenForm.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Typography\n    } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TeachingbeeAPI, GroupBO } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LerngruppeBO from '../../api/LerngruppeBO';\nimport LernvorliebenBO from '../../api/LernvorliebenBO';\nimport TeilnahmeGruppeBO from '../../api/TeilnahmeGruppeBO';\nimport ProfilBO from '../../api/ProfilBO';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\nimport GruppenListeEintrag from '../GruppenListeEintrag';\n\n\nclass GruppenForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lernvorlieben: null,\n            profil: null,\n            lerngruppe: null,\n\n            gruppenName: null,\n            gruppenNameValidationFailed: null,\n            gruppenNameEdited: null,\n\n            gruppe: 1,\n\n            lernfaecher: null,\n            lernfachListe: [],\n            lernfaecherValidationFailed: null,\n            lernfaecherNameEdited: null,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: null,\n            tageszeitenEdited: null,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: null,\n\n            frequenz: null,\n            frequenzValidationFailed: null,\n            frequenzEdited: null,\n\n            gruppengroesse: 4,\n\n            lernart: null,\n            lernartValidationFailed: null,\n            lernartEdited: null,\n\n            lernort: null,\n            lernortValidationFailed: null,\n            lernortEdited: null,\n\n            addingInProgress: false,\n            updatingInProgress: false,\n            addingError: null,\n            updatingError: null\n\n        };\n\n        // save this state for canceling\n        this.baseState = this.state;\n        this.lernfaecherSelectionChange = this.lernfaecherSelectionChange.bind(this);\n        this.tageszeitenSelectionChange = this.tageszeitenSelectionChange.bind(this);\n        this.tageSelectionChange = this.tageSelectionChange.bind(this);\n        this.frequenzSelectionChange = this.frequenzSelectionChange.bind(this);\n        this.lernartSelectionChange = this.lernartSelectionChange.bind(this);\n        this.lernortSelectionChange = this.lernortSelectionChange.bind(this);\n    }\n\n  /** Add Lerngruppe */\n  addLernvorlieben = () => {\n    let newLernvorlieben = new LernvorliebenBO(this.state.tageszeiten, 'null', this.state.tage, 'null', this.state.frequenz, 'null', this.state.lernart, 'null', this.state.gruppengroesse, 'null', this.state.lernort, 'null');\n    LernpartnerAPI.getAPI().addLernvorlieben(newLernvorlieben)\n    .then(lernvorliebenBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n        this.setState({\n            lernvorlieben: lernvorliebenBO,\n            lernfachListe: [this.state.lernfaecher]\n        })).then(() => {\n            this.addProfil();\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Add Lerngruppe */\n  addProfil = () => {\n    let newProfil = new ProfilBO(this.state.gruppe, this.state.lernfachListe, this.state.lernvorlieben.id)\n    console.log(this.state.gruppe)\n    console.log(this.state.lernfachListe)\n    console.log(this.state.lernvorlieben.id)\n    console.log(typeof(this.state.gruppe))\n    console.log(typeof(this.state.lernfachListe))\n    console.log(typeof(this.state.lernvorlieben.id))\n    LernpartnerAPI.getAPI().addProfil(newProfil)\n    .then(profilBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState({\n        profil: profilBO\n      })).then(() => {\n            this.addLerngruppe();\n            //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Add Lerngruppe */\n  addLerngruppe = () => {\n    let newLerngruppe = new LerngruppeBO();\n    newLerngruppe.setID(0)\n    newLerngruppe.setname(this.state.gruppenName)\n    newLerngruppe.setprofil(this.state.profil.id)\n    LernpartnerAPI.getAPI().addLerngruppe(newLerngruppe)\n    .then(lerngruppeBO =>\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState({\n        lerngruppe: lerngruppeBO\n      })).then(() => {\n            this.addTeilnahmeGruppe();\n            //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n\n  /** Add Teilnahme an Lerngruppe */\n  addTeilnahmeGruppe = () => {\n    let newTeilnahmeGruppe = new TeilnahmeGruppeBO(this.props.currentPerson.id, this.state.lerngruppe.id);\n    LernpartnerAPI.getAPI().addTeilnahmeGruppe(newTeilnahmeGruppe)\n    .then(teilnahmeGruppeBO => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(teilnahmeGruppeBO); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  //Setzen der Werte aus der Validierung\n  setStateValueChange(event, error) {\n    this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Handles value changes of the customer select textfield */\n  lernfaecherSelectionChange = (event) => {\n      this.setState({lernfaecher: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  tageszeitenSelectionChange = (event) => {\n      this.setState({tageszeiten: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  tageSelectionChange = (event) => {\n      this.setState({tage: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  frequenzSelectionChange = (event) => {\n      this.setState({frequenz: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  lernartSelectionChange = (event) => {\n      this.setState({lernart: event.target.value});\n  }\n\n    /** Handles value changes of the customer select textfield */\n  lernortSelectionChange = (event) => {\n      this.setState({lernort: event.target.value});\n  }\n\n\n  /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n    const { lernvorlieben, profil, lerngruppe, gruppenName, gruppenNameValidationFailed, gruppenNameEdited, lernfaecher, lernfachListe, lernfaecherValidationFailed, lernfaecherNameEdited, tageszeiten, tageszeitenValidationFailed, tageszeitenEdited, tage, tageValidationFailed, tageEdited,\n    frequenz, frequenzValidationFailed, frequenzEdited, lernart, lernartValidationFailed, lernartEdited, lernort, lernortValidationFailed, lernortEdited, addingInProgress, addingError,\n    updatingInProgress, updatingError } = this.state;\n    //console.log(lernfaecher)\n    //console.log(typeof(lernfaecher))\n    //parseInt(lernfaecher, 10)\n    //console.log(parseInt(\"lernfaecher\", 10))\n    //console.log(typeof(lernfaecher))\n    //console.log(profil)\n    //console.log(lernvorlieben.getID())\n    console.log(lernfachListe)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle>Neue Lerngruppe anlegen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          \n          <DialogContent>\n            <b>Bitte fülle für deine neue Lerngruppe folgende Profilinformationen mit euren Präferenzen vollständig aus.</b>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='gruppenName' label='Gruppenname:' value={gruppenName}\n                onChange={this.textFieldValueChange} error={gruppenNameValidationFailed}\n                helperText={gruppenNameValidationFailed ? 'Der Gruppenname muss mindestens ein Zeichen enthalten' : ' '} />\n              \n              <b>Wähle das Lernfach aus, für welches ihr gemeinsam lernt: </b>\n              <br/>\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                \n                <InputLabel>Lernfach:</InputLabel>\n                \n                <Select error={lernfaecherValidationFailed} value={lernfaecher} onChange={this.lernfaecherSelectionChange}>\n                <MenuItem value={1}>Software Entwicklung</MenuItem>\n                <MenuItem value={2}>Data Science</MenuItem>\n                <MenuItem value={3}>Führungsorientiertes Rechnungswesen</MenuItem>\n                <MenuItem value={4}>Medienrecht</MenuItem>\n                <MenuItem value={5}>Crossmedia-Konzeption</MenuItem>\n                <MenuItem value={6}>Web-Technologie</MenuItem>\n                <MenuItem value={7}>Datenbanken</MenuItem>\n                <MenuItem value={8}>IT-Security</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Tageszeiten:</InputLabel>\n                <Select error={tageszeitenValidationFailed} value={tageszeiten} onChange={this.tageszeitenSelectionChange}>\n                <MenuItem value={1}>Morgens</MenuItem>\n                <MenuItem value={2}>Mittags</MenuItem>\n                <MenuItem value={3}>Abends</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Tage:</InputLabel>\n                <Select error={tageValidationFailed} value={tage} onChange={this.tageSelectionChange}>\n                <MenuItem value={1}>Unter der Woche</MenuItem>\n                <MenuItem value={2}>Am Wochenende</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Frequenz:</InputLabel>\n                <Select error={frequenzValidationFailed} value={frequenz} onChange={this.frequenzSelectionChange}>\n                <MenuItem value={1}>Mehrmals die Woche</MenuItem>\n                <MenuItem value={2}>Wöchentlich</MenuItem>\n                <MenuItem value={3}>Alle zwei Wochen</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel>Lernart:</InputLabel>\n                <Select error={lernartValidationFailed} value={lernart} onChange={this.lernartSelectionChange}>\n                <MenuItem value={1}>Visuell</MenuItem>\n                <MenuItem value={2}>Auditiv</MenuItem>\n                <MenuItem value={3}>Motorisch</MenuItem>\n                <MenuItem value={4}>Kommunikativ</MenuItem>\n                </Select>\n              </FormControl>\n              <br/>\n\n              <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                <InputLabel >Lernort:</InputLabel>\n                <Select error={lernortValidationFailed} value={lernort} onChange={this.lernortSelectionChange}>\n                <MenuItem value={1}>Remote</MenuItem>\n                <MenuItem value={2}>Hochschule</MenuItem>\n                <MenuItem value={3}>Bibliothek</MenuItem>\n                <MenuItem value={4}>Cafe</MenuItem>\n                </Select>\n              </FormControl>\n            </form>\n            <LoadingProgress show={addingInProgress} />\n\n                <ContextErrorMessage error={addingError} contextErrorMsg={`Die Gruppe konnte nicht angelegt werden.`} onReload={this.addLernvorlieben} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button disabled={gruppenNameValidationFailed || !gruppenNameEdited || !lernfaecher || !tageszeiten || !tage || !frequenz || !lernart || !lernort} variant='contained' onClick={this.addLernvorlieben} color='primary'>\n                Gruppe erstellen\n            </Button>\n\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  formControl: {\n    marginBottom: theme.spacing(1),\n    minWidth: 120,\n  },\n  content: {\n    margin: theme.spacing(1),\n    }\n});\n\n/** PropTypes */\nGruppenForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppenForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageEingangForm.js",["307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js",["332","333","334","335","336","337","338","339","340","341","342","343"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport MultiSelectLernfaecher from './MultiSelectLernfaecher';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n\n/**\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass MeinProfilForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere den state\n        this.state = {\n            name: null,\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: [],\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n            \n            updatingError: null,\n            updatingInProgress: false,\n\n            gruppe: 0,\n\n            selectedValue: null,\n            setSelectedValue: null,\n\n        };\n        // State speichern falls cancel\n        this.baseState = this.state;\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.onChangeLernfaecher = this.onChangeLernfaecher.bind(this);\n \n    }\n\n    \n    /** Updates the person */\n    updatenPerson = () => {\n        let person = this.props.currentPerson;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n  /** Updates the person */\n  updatenProfil = () => {\n    let profil = this.props.currentProfil;\n    LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\n    ).then(profil => {\n        // Backend call sucessfull\n        // reinit the dialogs state for a new empty customer\n        this.setState(this.baseState);\n        this.props.onClose(profil); // call the parent with the customer object from backend\n    }).catch(e =>\n        this.setState({\n            updatingInProgress: false,    // disable loading indicator\n            updatingError: e              // show error message\n        })\n    );\n\n    // set loading to true\n    this.setState({\n        updatingInProgress: true,       // show loading indicator\n        updatingError: null             // disable error message\n  });\n}\n\n  /** Updates the person */\n    updatenLernvorlieben = () => {\n        let lernvorlieben = this.props.lernvorlieben;\n        lernvorlieben.tageszeiten = this.state.tageszeiten\n        lernvorlieben.tage = this.state.tage\n        lernvorlieben.frequenz = this.state.frequenz\n        lernvorlieben.lernart = this.state.lernart\n        lernvorlieben.gruppengroesse = this.state.gruppengroesse\n        lernvorlieben.lernort = this.state.lernort\n\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            // call the parent with the customer object from backend\n            this.setState(this.baseState);\n            this.props.onClose(lernvorlieben);\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n\n\t/**\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n      handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    onChangeLernfaecher(newLernfaecher) {\n      console.log(newLernfaecher)\n      this.setState({\n        lernfaecher: newLernfaecher\n      \n    })\n  }\n\n    \n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, currentProfil, lernvorlieben, lernfaechergesamt } = this.props;\n        const { selectedValue, setSelectedValue, data, lernfaecher_id, lernfaecher_bez, lernfaecherauswahl, profil, name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, tageszeiten,\n          tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\n          lernort, lernortValidationFailed, lernfach, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\n\n        console.log(currentProfil)\n        console.log(currentPerson)\n\n        let title = 'Profil bearbeiten';\n        let header = 'Bitte gib deine neuen Daten ein:';\n\n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname}\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed}\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\n                    onChange={this.numberValueChange} error={semesterValidationFailed}\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} />\n\n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                             <MenuItem value='Audiovisuelle Medien'>Audiovisuelle Medien</MenuItem>\n                                <MenuItem value='Crossmedia-Redaktion/Public Relations'>Crossmedia-Redaktion/Public Relations</MenuItem>\n                                <MenuItem value='Deutsch-chinesischer Studiengang Medien und Technologie'>Deutsch-chinesischer Studiengang Medien und Technologie</MenuItem>\n                                <MenuItem value='Informationsdesign'>Informationsdesign</MenuItem>\n                                <MenuItem value='Infomationswissenschaften'>Infomationswissenschaften</MenuItem>\n                                <MenuItem value='Integriertes Produktdesign'>Integriertes Produktdesign</MenuItem>\n                                <MenuItem value='Mediapublishing'>Mediapublishing</MenuItem>\n                                <MenuItem value='Medieninformatik'>Medieninformatik</MenuItem>\n                                <MenuItem value='Medienwirtschaft'>Medienwirtschaft</MenuItem>\n                                <MenuItem value='Mobile Medien'>Mobile Medien</MenuItem>\n                                <MenuItem value='Online-Medien-Management'>Online-Medien-Management</MenuItem>\n                                <MenuItem value='Print Media Technologies'>Print Media Technologies</MenuItem>\n                                <MenuItem value='Verpackungstechnik'>Verpackungstechnik</MenuItem>\n                                <MenuItem value='Werbung & Marktkommunikation'>Werbung & Marktkommunikation</MenuItem>\n                                <MenuItem value='Wirtschaftsinformatik und digitale Medien'>Wirtschaftsinformatik und digitale Medien</MenuItem>\n                                <MenuItem value='Wirtschaftsingenieurwesen Medien'>Wirtschaftsingenieurwesen Medien</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter}\n                    onChange={this.numberValueChange} error={alterValidationFailed}\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht}\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed}\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} />\n\n                  <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select  error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n                  <br/>\n                   <FormControl required fullWidth margin='normal'className={classes.formControl}>\n                            <InputLabel >Welche Tageszeit präferierst du? </InputLabel>\n                             <Select error={tageszeitenValidationFailed} value={tageszeiten}\n                             onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/> \n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                        <MultiSelectLernfaecher lernfaecher = {lernfach} onChangeLernfaecher = {this.onChangeLernfaecher}/>\n                    \n                    \n                    </FormControl>\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\n                      onReload={this.updatenPerson} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={ () => {this.updatenPerson(); this.updatenProfil(); this.updatenLernvorlieben();}} color='primary'>\n                          Änderungen abschließen\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n    margin: theme.spacing(2)\n    \n  }\n  \n  \n});\n\n/** PropTypes */\nMeinProfilForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/**\n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MeinProfilForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js",["344","345","346","347","348"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid, Link } from '@material-ui/core';\nimport Nachricht from './NachrichtListe';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useParams } from \"react-router-dom\";\n//import KonversationListe from './KonversationListe';\nimport LernpartnerAPI from '../api/LernpartnerAPI';\nimport ChatVerlassenForm from './dialogs/ChatVerlassenForm';\n\n\n\n/** \n * \n * Es wird ein einzelne Konversationen von einer Person dargestellt\n * \n * Hierfür wird der Name der Konversation angezeigt\n * \n */\n\nclass KonversationListeEintrag extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            konversation: props.konversation,\n            konversationID: props.konversation.id,\n\n            currentPersonName: \" und \" + props.currentPerson.vorname + \" \" + props.currentPerson.name,\n            nameNeu: null,\n            str: props.konversation.name,\n            showKonversation: false,\n            showChatVerlassenForm: false, \n            teilnahmeChat: null,\n            //showProfil: false,\n        };\n    }\n\n// API Anbindung um Konversationen des Students vom Backend zu bekommen \n  getTeilnahmeChat = () => {\n    LernpartnerAPI.getAPI().getTeilnahmeChatByKonversationAndPerson(this.state.konversationID, this.props.currentPerson.getID())\n    .then(teilnahmeBO =>\n        this.setState({\n            teilnahmeChat: teilnahmeBO,\n            error: null,\n            loadingInProgress: false,\n        })).catch(e =>\n            this.setState({\n                teilnahmeChat: null,\n                error: e,\n                loadingInProgress: false,\n            }));\n    this.setState({\n        error: null,\n        loadingInProgress: true,\n        loadingKonversationenError: null\n    });\n  }\n\n/** Handles onChange events of the underlying ExpansionPanel */\nexpansionPanelStateChanged = () => {\n  this.props.onExpandedStateChange(this.state.konversation);\n  }\n\n//Handles the onClick event of the show Konversation button\nshowKonversationButtonClicked = (event) => {\n  this.setState({\n    showKonversation: true\n  });\n}\n\n//Handles the onClick event of the show Konversation button\nverlassenButtonClicked = (event) => {\n  this.setState({\n    showChatVerlassenForm: true\n  });\n}\n\nnameAnpassen = () => {\n    this.setState({\n        nameNeu: this.state.konversation.name.replace(this.state.currentPersonName,''),\n    });\n}\n\n/** Handles the onClose event of the CustomerDeleteDialog */\nverlasseChatFormClosed = (teilnahmeChat) => {\n   // if customer is not null, delete it\n  if (teilnahmeChat) {\n    this.props.onTeilnahmeChatDeleted(teilnahmeChat);\n  } else {\n  // Don´t show the dialog\n    this.setState({\n        showChatVerlassenForm: false\n    });\n}\n}\n\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n  componentDidMount() {\n    this.nameAnpassen();\n    this.getTeilnahmeChat();\n  }\n    \n\nrender() {\n  const { classes, expandedState, currentPerson} = this.props;\n  const { teilnahmeChat, konversation, konversationID, currentPersonName, nameNeu, showKonversation, showChatVerlassenForm } = this.state;\n  console.log(currentPerson)\n  console.log(konversation)\n  console.log(currentPersonName)\n  console.log(konversation.getname())\n  console.log(nameNeu)\n  console.log(currentPerson)\n  console.log(teilnahmeChat)\n\n  return(\n    <div>\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            id={`konversation${konversation.getID()}accountpanel-header`}\n          >\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\n              <Typography variant='body1'>\n                  {nameNeu}\n              </Typography>\n            </Grid>\n              <Typography variant='body1'>\n                  Optionen\n              </Typography>\n              </AccordionSummary>\n                <AccordionDetails>\n                <ButtonGroup variant='text' size='small'>\n                <Link component={RouterLink} to={{\n                pathname: '/chat',\n                konversation: konversation\n                }} >\n                  \n                <Button color='primary' onClick={this.showKonversationButtonClicked}>\n                          Chat ansehen\n                </Button>\n                </Link>\n                        \n                <Button color='secondary' onClick={this.verlassenButtonClicked}>\n                        Chat verlassen\n                </Button>\n                </ButtonGroup>\n              </AccordionDetails>\n              </Accordion>\n             <ChatVerlassenForm show={showChatVerlassenForm} teilnahmeChat={teilnahmeChat} onClose={this.verlasseChatFormClosed}/>\n            </div>\n            \n        );\n  \n}\n  \n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nKonversationListeEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n  currentPerson: PropTypes.object.isRequired,\n  konversation: PropTypes.object.isRequired,\n}\n\n\n\nexport default withStyles(styles)(KonversationListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/index.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js",["349","350","351","352","353","354","355"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport Profil from './Profil';\n//import { withStyles } from '@material-ui/core';\n//import { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\n//import ContextErrorMessage from './dialogs/ContextErrorMessage';\n//import LoadingProgress from './dialogs/LoadingProgress';\nimport AnfrageForm from './dialogs/AnfrageForm';\n\n/**\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\n * \n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\n * \n */\n\nclass VorschlagListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlag: props.vorschlag,\n            currentPerson: props.currentPerson,\n\n            //match: null,\n\n            profil: null,\n            gruppe: null,\n\n            person: null,\n            currentPersonName: \" und \" + props.currentPerson.vorname + \" \" + props.currentPerson.name,\n\n            nameGes: null,\n            nameNeu: null,\n\n            namePerson: null,\n\n            lerngruppe: null,\n\n            chatPartnerProfil: props.vorschlag.match_profil_id,\n\n            teilnahmeChat: null,\n\n            konversation: null,\n            iskonversation: false,\n            konversationStatus: null,\n\n            showProfil: false,\n            showAnfrageForm: false,\n\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    /** Handles onChange events of the underlying ExpansionPanel */\n    expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.vorschlag);\n    }\n\n    //Handles the onClick event of the show profil button\n    showProfilButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showProfil: true\n      });\n    }\n\n    /** Handles the onClick event of the send Anfrage button */\n    sendAnfrageButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showAnfrageForm: true\n      });\n    }\n\n    getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.vorschlag.match_profil_id)\n    .then(profilBO =>\n      this.setState({\n            profil: profilBO,\n            gruppe: profilBO.gruppe,\n            //profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).then(() => {\n            this.getPartner();\n            \n        }).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          gruppe: null,\n          //profilLernfaecher: null,\n          profilLernvorliebenID: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n    // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByProfil(this.state.vorschlag.match_profil_id)\n      .then(personBO =>\n          this.setState({\n            chatPartnerProfil: personBO,\n            namePerson: personBO.vorname+ \" \" + personBO.name,\n            nameGes: personBO.vorname+ \" \" + personBO.name + \" und \" + this.props.currentPerson.vorname+ \" \" + this.props.currentPerson.name,\n            loadingInProgress: false,\n            error: null,\n      })).then(() => {\n            this.getKonversation();\n        }).catch(e =>\n              this.setState({\n                chatPartnerProfil: null,\n                nameGes: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um Lerngruppe vom Backend zu bekommen\n    getLerngruppe = () => {\n      LernpartnerAPI.getAPI().getLerngruppeByProfil(this.state.vorschlag.match_profil_id)\n      .then(lerngruppeBO =>\n          this.setState({\n            //chatPartnerProfil: lerngruppeBO,\n            nameGes: lerngruppeBO.name,\n            loadingInProgress: false,\n            error: null,\n      })).then(() => {\n            this.getKonversation();\n        }).catch(e =>\n              this.setState({\n                chatPartnerProfil: null,\n                nameGes: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    getPartner = () => {\n        if (this.state.gruppe === true){\n            this.getLerngruppe();\n        }else{\n            this.getPerson();\n        }\n    }\n\n  /** Add TeilnahmeChatPartner */\n  getKonversation = () => {\n    LernpartnerAPI.getAPI().getKonversationByName(this.state.nameGes)\n    .then(konversationBO =>\n      this.setState({\n        konversation: konversationBO,              // disable loading indicator                 // no error message\n        konversationStatus: konversationBO.anfragestatus\n      })).then(() => {\n        this.nameAnpassen();\n        if (this.state.konversationStatus !== null){\n          this.setState({\n            iskonversation: true,\n          });\n        } else {\n            this.setState({\n                iskonversation: false,\n          });\n        }\n      }).catch(e =>\n      this.setState({\n        konversationBO: false,\n        konversationStatus: false,\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  setKonversation = () => {\n    if (this.state.konversationStatus === 'Null') {\n        this.setState({\n            konversation: false,\n      });\n    } else {\n        this.setState({\n            konversation: true,\n      });\n    }\n  }\n\n  nameAnpassen = () => {\n    this.setState({\n        nameNeu: this.state.konversation.name.replace(this.state.currentPersonName,''),\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  anfrageFormClosed = (chatPartnerProfil) => {\n    // customer is not null and therefor changed\n    if (chatPartnerProfil) {\n      this.setState({\n        chatPartnerProfil: chatPartnerProfil,\n        showAnfrageForm: false\n      });\n    } else {\n      this.setState({\n        showAnfrageForm: false\n      });\n    }\n  }\n\n    componentDidMount() {\n      // load initial balance\n      this.getProfil();\n    }\n\n    render(){\n          const { classes, expandedState } = this.props;\n          const { nameNeu, vorschlag, profil, currentPerson, gruppe, person, nameGes, namePerson, lerngruppe, chatPartnerProfil, iskonversation, konversation, konversationStatus, showProfil, showAnfrageForm } = this.state;\n          console.log(nameNeu)\n          return (\n            <div>\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  id={`vorschlag${vorschlag.getID()}accountpanel-header`}>\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item>\n                    {\n                    gruppe ?\n                        <Typography variant='body1' className={classes.heading}>{nameGes}\n                        </Typography>\n                      :\n                        <Typography variant='body1' className={classes.heading}>{namePerson}\n                        </Typography>\n                    }\n\n                    <Typography variant='body1' className={classes.heading}>Matchquote: {vorschlag.getmatch_quote()}%\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                    \n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                      <Typography variant='body2' color={'textSecondary'}>Mehr sehen</Typography>\n                    </Grid>\n                  </Grid>\n                </AccordionSummary>\n                <AccordionDetails>\n                       {\n                       iskonversation ?\n                        <>\n                            <Button color='primary' onClick={this.showProfilButtonClicked}>\n                              Profil ansehen\n                            </Button>\n                            <h4>\n                            Du bist bereits mit {nameNeu} in Kontakt oder es steht bereits eine Kontaktanfrage aus.\n                            </h4>\n                        </>\n                        :\n                        <ButtonGroup variant='text' size='small'>\n                            <Button color='primary' onClick={this.showProfilButtonClicked}>\n                              Profil ansehen\n                            </Button>\n                            <Button color='secondary' onClick={this.sendAnfrageButtonClicked}>\n                              Kontaktanfrage\n                            </Button>\n                        </ButtonGroup>\n                       }\n                    </AccordionDetails>\n              </Accordion>\n              <AnfrageForm show={showAnfrageForm} currentPerson={currentPerson} chatPartnerProfil={chatPartnerProfil} onClose={this.anfrageFormClosed} />\n            </div>\n          );\n        }\n}\n\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n  button: {\n      margin: theme.spacing(1),\n      },\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n/** PropTypes */\nVorschlagListeEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(VorschlagListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js",["356"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI'\n\n\nclass GruppeVerlassenDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      verlassenInProgress: false,\n      verlassenError: null\n    };\n  }\n\n  /** Gruppe verlassen */\n  verlasseGruppe = () => {\n    LernpartnerAPI.getAPI().deleteTeilnahmeGruppe(this.props.teilnahmeGruppe.getID())\n    .then(teilnahmeGruppe => {\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: null                     // no error message\n      });\n      this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      verlassenInProgress: true,                 // show loading indicator\n      verlassenError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, teilnahmeGruppe, lerngruppeID, show } = this.props;\n    const { verlassenInProgress, verlassenError } = this.state;\n    //console.log(verlassenInProgress)\n    console.log(teilnahmeGruppe)\n    //console.log(teilnahmeGruppe.id)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Gruppe verlassen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <p>Möchtest du wirklich die Gruppe verlassen?</p>\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du die Gruppe verlässt, verlässt du auch automatisch den Chat!!!</p>\n            </DialogContentText>\n            <LoadingProgress show={verlassenInProgress} />\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Die Gruppe konnte nicht verlassen werden.`}\n              onReload={this.verlasseGruppe} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button variant='contained' onClick={this.verlasseGruppe} color='primary'>\n              Verlassen\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nGruppeVerlassenDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  teilnahmeGruppe: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *\n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppeVerlassenDialog);\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppenBearbeitenForm.js",["357","358","359","360","361","362"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport MultiSelectLernfaecher from './MultiSelectLernfaecher';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass GruppenBearbeitenForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere den state\n        this.state = {\n\n            lerngruppe: this.props.lerngruppe,\n            lernvorlieben: this.props.lernvorlieben,\n            name: null,\n            nameValidationFailed: false,\n            nameEdited: false,\n\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: [],\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n\n            gruppe: 1,\n\n            updatingError: null,\n            updatingInProgress: false,\n\n\n        };\n        // State speichern falls cancel\n        this.baseState = this.state;\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.onChangeLernfaecher = this.onChangeLernfaecher.bind(this);\n\n    }\n\n\n\n    /** Updates the person */\n    updatenGruppe = () => {\n        let lerngruppe = this.props.lerngruppe;\n        lerngruppe.id = this.state.lerngruppe.id\n        lerngruppe.name = this.state.name\n        lerngruppe.profil = this.state.lerngruppe.profil\n\n        LernpartnerAPI.getAPI().updateLerngruppe(this.state.lerngruppe.id, this.state.name, this.state.lerngruppe.profil).then(lerngruppe => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(lerngruppe); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n/** Updates the profil */\nupdatenProfil = () => {\n  let profil = this.props.currentProfil;\n  LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\n  ).then(profil => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(profil); // call the parent with the customer object from backend\n  }).catch(e =>\n      this.setState({\n          updatingInProgress: false,    // disable loading indicator\n          updatingError: e              // show error message\n      })\n  );\n\n  // set loading to true\n  this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n});\n}\n\n\n  /** Updates the person */\n    updatenLernvorlieben = () => {\n        let lernvorlieben = this.props.lernvorlieben;\n        lernvorlieben.tageszeiten_id = this.state.tageszeiten\n        lernvorlieben.tage_id = this.state.tage\n        lernvorlieben.frequenz_id = this.state.frequenz\n        lernvorlieben.lernart_id = this.state.lernart\n        lernvorlieben.gruppengroesse_id = this.state.gruppengroesse\n        lernvorlieben.lernort_id = this.state.lernort\n\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(lernvorlieben); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n\n\t/**\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n      handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    onChangeLernfaecher(newLernfaecher) {\n      console.log(newLernfaecher)\n      this.setState({\n        lernfaecher: newLernfaecher\n      \n    })\n  }\n\n\n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentProfil, currentPerson, lerngruppe, lernvorlieben } = this.props;\n        console.log(currentProfil)\n        const { name, nameValidationFailed, tageszeiten, tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\n          lernort, lernortValidationFailed, lernfaecher, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\n\n\n        let title = 'Gruppenprofil bearbeiten';\n        let header = 'Bitte gib die neuen Daten ein:';\n\n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Gruppenname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n                  <br/>\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tageszeit präferierst du?</InputLabel>\n                             <Select required error={tageszeitenValidationFailed} value={tageszeiten} onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select required error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select required error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select required error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select required error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select required error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n\n                   <FormControl required fullWidth margin='normal' className={classes.formControl}>\n                        <MultiSelectLernfaecher onChangeLernfaecher = {this.onChangeLernfaecher}/>\n                    \n                    </FormControl>\n                   <br/>\n\n\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\n                      onReload={this.updatenGruppe} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || tageszeitenValidationFailed || tageValidationFailed || frequenzValidationFailed || lernartValidationFailed || gruppengroesseValidationFailed || lernortValidationFailed || lernfaecherValidationFailed } variant='contained'\n                          onClick={ () => {this.updatenGruppe(); this.updatenProfil(); this.updatenLernvorlieben();}} color='primary'>\n                          Änderungen abschließen\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nGruppenBearbeitenForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/**\n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(GruppenBearbeitenForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageEingangFormEintrag.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387"],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/MultiSelectLernfaecher.js",[],"/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/ChatVerlassenForm.js",["388"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\n\n\nclass ChatVerlassenForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      verlassenInProgress: false,\n      verlassenError: null\n    };\n  }\n\n  /** Chat verlassen */\n  verlasseChat = () => {\n    LernpartnerAPI.getAPI().deleteTeilnahmeChat(this.props.teilnahmeChat.getID())\n    .then(teilnahmeChat => {\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: null                     // no error message\n      });\n      this.props.onClose(this.props.teilnahmeChat);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        verlassenInProgress: false,              // disable loading indicator\n        verlassenError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      verlassenInProgress: true,                 // show loading indicator\n      verlassenError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, teilnahmeChat, konversationID, show } = this.props;\n    const { verlassenInProgress, verlassenError } = this.state;\n    //console.log(verlassenInProgress)\n    console.log(teilnahmeChat)\n    //console.log(teilnahmeChat.id)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Chat verlassen\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              <p>Möchtest du wirklich den Chat verlassen?</p>\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du den Chat verlässt, kannst du nicht mehr an der Konversation teilnehmen!!!</p>\n            </DialogContentText>\n            <LoadingProgress show={verlassenInProgress} />\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Der Chat konnte nicht verlassen werden.`}\n              onReload={this.verlasseChat} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n            <Button variant='contained' onClick={this.verlasseChat} color='primary'>\n              Verlassen\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nChatVerlassenForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  teilnahmeChat: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *\n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(ChatVerlassenForm);\n","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/dialogs/AnfrageForm.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Typography\n    } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TeachingbeeAPI, GroupBO } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport LerngruppeBO from '../../api/LerngruppeBO';\nimport KonversationBO from '../../api/KonversationBO';\nimport TeilnahmeChatBO from '../../api/TeilnahmeChatBO';\nimport ProfilBO from '../../api/ProfilBO';\nimport PersonBO from '../../api/PersonBO';\nimport LernpartnerAPI from '../../api/LernpartnerAPI';\nimport VorschlagListeEintrag from '../VorschlagListeEintrag';\n\n\nclass AnfrageForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chatPartner: null,\n            chatPartnerProfil: props.chatPartnerProfil,\n            //gruppe: props.chatPartnerProfil.gruppe,\n            gruppeProfil: null,\n\n            name: null,\n            konvName: null,\n\n            konversation: null,\n            konversationID: null,\n\n            teilnahmeChat: null,\n            teilnahmeChatPartner: null,\n\n            anfrageGesendet: false,\n\n            addingInProgress: false,\n            updatingInProgress: false,\n            addingError: null,\n            updatingError: null\n\n        };\n\n        // save this state for canceling\n        this.baseState = this.state;\n    }\n\n  /** Add Lerngruppe */\n  addKonversation = () => {\n    let newKonversation = new KonversationBO();\n    newKonversation.id = 0;\n    newKonversation.name = this.state.konvName;\n    newKonversation.anfragestatus = false;\n    LernpartnerAPI.getAPI().addKonversation(newKonversation)\n    .then(konversationBO =>\n      this.setState({\n        konversation: konversationBO\n      })).then(() => {\n        this.addTeilnahmeChatPartner();\n        //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Add TeilnahmeChat */\n  addTeilnahmeChatPartner = () => {\n    let newTeilnahmeChat = new TeilnahmeChatBO()\n    newTeilnahmeChat.id = 0;\n    newTeilnahmeChat.teilnehmer = this.state.chatPartner.id\n    newTeilnahmeChat.anfrage_sender = this.props.currentPerson.id\n    newTeilnahmeChat.status = false\n    newTeilnahmeChat.konversation = this.state.konversation.id\n    LernpartnerAPI.getAPI().addTeilnahmeChat(newTeilnahmeChat)\n    .then(teilnahmeChatBO =>\n      this.setState({\n        teilnahmeChat: teilnahmeChatBO\n      })).then(() => {\n        this.addTeilnahmeChat();\n        //console.log(this.state.profil.id)\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Add TeilnahmeChatPartner */\n  addTeilnahmeChat = () => {\n    let newTeilnahmeChat = new TeilnahmeChatBO()\n    newTeilnahmeChat.id = 0;\n    newTeilnahmeChat.teilnehmer = this.props.currentPerson.id\n    newTeilnahmeChat.anfrage_sender = this.props.currentPerson.id\n    newTeilnahmeChat.status = false\n    newTeilnahmeChat.konversation = this.state.konversation.id\n    LernpartnerAPI.getAPI().addTeilnahmeChat(newTeilnahmeChat)\n    .then(teilnahmeChatBO => {\n      this.setState(this.baseState);\n      this.props.onClose(teilnahmeChatBO); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  /** Konversation holen */\n  getKonversation = () => {\n    LernpartnerAPI.getAPI().getKonversationByName(this.state.name)\n    .then(konversationBO =>\n      this.setState({\n        konversationID: konversationBO.id,              // disable loading indicator                 // no error message\n      })).then(() => {\n        this.addTeilnahmeChatLerngruppe();\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n  /** Add TeilnahmeChatPartner */\n  addTeilnahmeChatLerngruppe = () => {\n    let newTeilnahmeChat = new TeilnahmeChatBO()\n    newTeilnahmeChat.id = 0;\n    newTeilnahmeChat.teilnehmer = this.props.currentPerson.id\n    newTeilnahmeChat.anfrage_sender = this.props.currentPerson.id\n    newTeilnahmeChat.status = false\n    newTeilnahmeChat.konversation = this.state.konversationID\n    LernpartnerAPI.getAPI().addTeilnahmeChat(newTeilnahmeChat)\n    .then(teilnahmeChatBO => {\n      this.setState(this.baseState);\n      this.props.onClose(teilnahmeChatBO); // call the parent with the lerngruppe object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator\n        updatingError: e              // show error message\n      })\n    );\n  }\n\n    // API Anbindung um Person vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByProfil(this.props.chatPartnerProfil)\n      .then(personBO =>\n          this.setState({\n            chatPartner: personBO,\n            name: personBO.name,\n            konvName: personBO.vorname+ \" \" + personBO.name + \" und \" + this.props.currentPerson.vorname+ \" \" + this.props.currentPerson.name,\n            loadingInProgress: false,\n            error: null,\n      })).catch(e =>\n              this.setState({\n                chatPartner: null,\n                name: null,\n                konvName: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    // API Anbindung um Lerngruppe vom Backend zu bekommen\n    getLerngruppe = () => {\n      LernpartnerAPI.getAPI().getLerngruppeByProfil(this.props.chatPartnerProfil)\n      .then(lerngruppeBO =>\n          this.setState({\n            chatPartner: lerngruppeBO,\n            name: lerngruppeBO.name,\n            loadingInProgress: false,\n            error: null,\n      })).catch(e =>\n              this.setState({\n                chatPartner: null,\n                lerngruppeName: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n    getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.chatPartnerProfil)\n    .then(profilBO =>\n      this.setState({\n            gruppeProfil: profilBO.gruppe,\n            loadingInProgress: false,\n            error: null\n      })).then(() => {\n        this.getPartner();\n        //console.log(this.state.profil.id)\n    }).catch(e =>\n        this.setState({ // Reset state with error from catch\n          gruppeProfil: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n    }\n\n    getPartner = () => {\n        if (this.state.gruppeProfil === true){\n            this.getLerngruppe();\n        }else{\n            this.getPerson();\n        }\n    }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  //Setzen der Werte aus der Validierung\n  setStateValueChange(event, error) {\n    this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  getChatPartnerStatus = () => {\n    if (this.state.gruppeProfil === true){\n    console.log(this.state.gruppeProfil)\n        this.props.getKonversation();\n    }else{\n    console.log(this.state.gruppeProfil)\n        this.addKonversation();\n    }\n  }\n\n  componentDidMount() {\n    // load initial balance\n    this.getProfil();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n /* componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getPartner();\n    }\n  }*/\n\n  /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n    const { chatPartner, name, konvName, gruppeProfil, konversation, konversationID, teilnahmeChat, teilnahmeChatPartner, addingInProgress, addingError, updatingInProgress, updatingError } = this.state;\n    console.log(chatPartner)\n    console.log(name)\n    console.log(gruppeProfil)\n    console.log(konversationID)\n    console.log(konversation)\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle>Kontaktanfrage senden\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n\n              <div>Bist du dir sicher, dass du eine Anfrage schicken möchtest?</div>\n\n            <LoadingProgress show={addingInProgress} />\n                <ContextErrorMessage error={addingError} contextErrorMsg={`Die Anfrage konnte nicht gesendet werden.`} onReload={this.getChatPartnerStatus} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Abbrechen\n            </Button>\n                <Button variant='contained' onClick={this.getChatPartnerStatus} color='primary'>\n              Anfrage senden\n             </Button>\n\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  formControl: {\n    marginBottom: theme.spacing(1),\n    minWidth: 120,\n  },\n  content: {\n    margin: theme.spacing(1),\n    }\n});\n\n/** PropTypes */\nAnfrageForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(AnfrageForm);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListe.js",["409","410","411","412","413","414"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, Grid, Typography, Divider, Link, Pape, Card, Paper } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport NachrichtBO from '../api/NachrichtBO';\nimport { Link as RouterLink } from 'react-router-dom';\nimport GruppenForm from './dialogs/GruppenForm';\nimport { MessageBox } from 'react-chat-elements';\nimport 'react-chat-elements/dist/main.css';\n//import NachrichtenListeEintrag from './NachrichtenListeEintrag';\n//import Divider from \"@material-ui/core/Divider\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport NachrichtListeEintrag from './NachrichtListeEintrag';\n\n/**\n * Es werden alle Nachrichten des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [NachrichtenListeEintrag]](#nachrichtenlisteeintrag)\n * \n * Hierfür werden alle Nachrichten des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\nclass Nachricht extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let konversationsID = null;\n    let konversationName = null;\n\n    if (this.props.location.konversation) {\n      konversationsID = this.props.location.konversation.getID();\n      konversationName = this.props.location.konversation.getname();\n    }\n    console.log(konversationsID)\n   // Init an empty state\n   this.state = {\n     nachrichten: [], \n     nachricht_inhalt: null,\n     neueNachricht: null,\n     konversation_id: null,\n     personid: null,  \n     error: null,\n     loadingInProgress: false,\n     konversationID: konversationsID,\n     konversationName: konversationName,\n     showKonversationListe: false,\n     showLerngruppeForm: false,\n    \n     empfaenger: null,\n     empfaenger_name: null,\n     empfaenger_vorname: null\n     \n   };\n }\n\n //Öffnet das Dialog-Fenster Nachrichtfrom, wenn der Button geklickt wurde\n addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showNachrichtForm: true\n    });\n  }\n\n  //Öffnet das Dialog-Fenster Gruppefrom, wenn der Button geklickt wurde\n showGruppeFormButtonClicked = event => {\n  event.stopPropagation();\n  this.setState({\n    showGruppeForm: true\n  });\n}\n \n // API Anbindung um alle Nachrichten vom Backend zu bekommen \n  getNachrichten = () => {\n     LernpartnerAPI.getAPI().getNachrichtenByKonversation(this.state.konversationID)\n    .then((nachrichtenBOs) =>\n      this.setState({\n        nachrichten: nachrichtenBOs,\n        nachricht_inhalt: nachrichtenBOs.nachricht_inhalt,\n        personID: nachrichtenBOs.personID,\n        konversation_id: nachrichtenBOs.konversation_id,\n        loadingInProgress: false,\n        error: null,\n      })\n    )\n    .catch((e) =>\n      this.setState({\n        nachrichten: null,\n        loadingInProgress: false,\n        loadingError: e,\n      })\n    );\n  this.setState({\n    loadingInProgress: true,\n    loadingError: null,\n  });\n};\n\n\naddNachricht = () => {\n    let newNachricht = new NachrichtBO(\n      this.state.neueNachricht,\n      this.props.currentPerson.getID(),\n      this.state.konversationID\n    );\n    LernpartnerAPI.getAPI().addNachricht(newNachricht)\n    .then(() => {\n        this.getNachrichten();\n        this.setState({\n          neueNachricht: \"\",\n        })\n      })\n      .catch((e) =>\n        this.setState({\n          updatingInProgress: false, // disable loading indicator\n          updatingError: e, // show error message\n        })\n      );\n\n    this.setState({\n    loadingInProgress: true,\n    error: null\n  });\n}\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getNachrichten();\n}\n\n//Wird aufgerufen, wenn das Dialog-Fenster Nachrichtform geschlossen wird\nnachrichtFormClosed = nachrichten => {\n    this.getNachrichten();\n    if (nachrichten) {\n      const newNachricht = [...this.state.nachrichten, nachrichten];\n      this.setState({\n        nachrichten: newNachricht,\n        filteredNachrichten: [...newNachricht],\n        showNachrichtForm: false,\n        showGruppeForm: false\n      });\n    } else {\n      this.setState({\n        showNachrichtForm: false\n      });\n    }\n  }\n\n  clearneueNachricht = () => {\n    this.setState({\n      neueNachricht: null,\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({neueNachricht: event.target.value});\n  };\n\n  /** Handles the onClick event of the edit customer button */\n  showGruppeFormButtonClicked= (event) => {\n    event.stopPropagation();\n    this.setState({\n      showLerngruppeForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  lerngruppeFormClosed = (lerngruppe) => {\n    // customer is not null and therefor changed\n    if (lerngruppe) {\n      this.setState({\n        lerngruppe: lerngruppe,\n        showLerngruppeForm: false\n      });\n    } else {\n      this.setState({\n        showLerngruppeForm: false\n      });\n    }\n  }\n\n // Rendert die Componente \n    render() {\n      const { classes, currentPerson, konversation } = this.props;\n    \n      const { konversationName, showLerngruppeForm, neueNachricht, nachrichten, nachricht_inhalt, loadingInProgress, error } = this.state;\n      \n      return (\n        <div>\n          <br/>\n          <Paper>\n          <Grid container>\n            <Grid item xs={12} >\n                <Typography variant=\"h5\" className=\"header-message\" align='center'>{konversationName}</Typography>\n            </Grid>\n          </Grid>\n          </Paper>\n          <br/>\n          <div className={classes.liste}>\n          { \n            nachrichten.map((nachricht) => \n                <NachrichtListeEintrag key={nachricht.getID()} currentPerson={currentPerson} nachricht={nachricht}/>\n                  \n            )\n          }\n          </div>\n\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"standard-basic\"\n              label=\"Schreibe eine Nachricht\"\n              value={neueNachricht}\n              onChange={this.handleChange}\n            />\n          </form>\n\n          <Link component={RouterLink} to={{\n                pathname: '/meinechats',\n          }} >\n            <Button className={classes.button_style} variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>\n            <ArrowBackIcon/>\n            </Button>\n          </Link>\n\n          <Button color=\"primary\" variant=\"contained\" onClick={this.addNachricht}>\n            senden \n          </Button>\n\n          <Button variant='contained' color='secondary' onClick={this.showGruppeFormButtonClicked}>\n              Gruppe erstellen \n          </Button>\n\n      <LoadingProgress show={loadingInProgress} />\n      <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Nachrichten nicht geladen werden!`} onReload={this.getNachrichten} />\n      <GruppenForm show={showLerngruppeForm} currentPerson={currentPerson} onClose={this.lerngruppeFormClosed} />\n      \n      </div>\n      \n    );\n\n}}\n\nconst styles = (theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100ch\",\n    },\n  },\n  outerColumn: {\n    margin: 5,\n    padding: 5,\n    height: 50,\n  },\n  button_style: {\n    margin: 5,\n    padding: 5,\n  },\n  liste: {\n    overflow: 'scroll',\n    maxHeight: '400px'\n  }\n});\n\n/** PropTypes */\nNachricht.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n  \n\nexport default withRouter(withStyles(styles)(Nachricht));","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/NachrichtListeEintrag.js",["415","416","417","418","419"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Grid, Typography,  Divider } from '@material-ui/core';\nimport { MessageBox } from 'react-chat-elements';\nimport 'react-chat-elements/dist/main.css';\n//import { withRouter } from 'react-router-dom';\n//import { Button, ButtonGroup } from '@material-ui/core';\n//import TextField from \"@material-ui/core/TextField\";\n\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\n\n//import Nachricht from './Nachricht'\n//import NachrichtForm from './NachrichtForm'\n//import GruppeForm from './GruppeForm'\n\n\n\nclass NachrichtenListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            nachricht: this.props.nachricht, //Liste mit den IDs aller Nachrichten \n            //konversation_ID: null,  \n            nachricht_inhalt: null, \n            person: null,\n            person_id: null,\n            personName: null,\n            personVorname: null,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    //open the onClick event of the show Nachricht button\n    showNachrichtButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showNachrichtForm: true\n      });\n    }\n\n     //ruft die getNachrichten() Funktion in den Props auf\n     //getNachrichten = () => {\n      //this.props.getNachrichten(); }\n\n\n      // API Anbindung um Person vom Backend zu bekommen \n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.nachricht.person_id)\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n                person: null,\n                personName: null,\n                personVorname: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n\n       // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getPerson();\n    }\n\n      render() {\n        const { classes, currentPerson } = this.props;\n        const {nachricht, nachricht_inhalt, person, personName, personVorname, expandedNachrichtID} = this.state;\n        console.log(person)\n\n        if (nachricht.person_id !== currentPerson.getID()) {\n                    \n          return (\n            <div id=\"empfänger_text\">\n              <Grid item\n                xs\n                className={classes.outerColumn}\n                className={classes.bubble}\n                style={{ display: \"flex\", alignItems: \"center\", position: \"rigth\" }}\n              >\n                \n            <b>{personVorname} {personName}</b>\n              </Grid>\n              <Grid item\n                xs\n                className={classes.outerColumn}\n                style={{ display: \"flex\", alignItems: \"center\", position: \"rigth\" }}\n              >\n                \n                <Typography>{nachricht.nachricht_inhalt}</Typography>\n              </Grid>\n              <Divider />\n            </div>\n          );\n        } \n        \n        else {\n          return (\n            <div id=\"sender_text\">\n              <Grid\n                item\n                className={classes.outerColumn}\n                container\n                direction=\"row\"\n                alignItems=\"center\"\n                justify=\"flex-end\"\n                position= \"left\"\n              >\n              <b>Du</b>\n              </Grid>\n              <Grid\n                item\n                className={classes.outerColumn}\n                className={classes.bubble}\n                container\n                direction=\"row\"\n                alignItems=\"center\"\n                justify=\"flex-end\"\n                position= \"left\"\n              >\n              <Typography>{nachricht.nachricht_inhalt}</Typography>\n              </Grid>\n              \n              <Divider />\n            </div>\n            \n\n          );\n        }\n    }\n}\n      \n\n\nconst styles = (theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    margin: 10,\n  },\n  bubble: {\n    borderRadius: \"15px\",\n    backgroundColor: \"#ffe4c4\",\n    margin: \"5px\",\n    padding: \"8px\",\n    width: \"300px\"\n  },\n  right: {\n  justifyContent: \"flex-end\",\n}\n});\n  \n  /** PropTypes */\n  NachrichtenListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    NachrichtListeEintrag: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n  \n  export default withStyles(styles)(NachrichtenListeEintrag);","/Users/mariavetter/Documents/Dokumente - Marias MacBook Pro/GitHub/SoPra-LernpartnerApp/frontend/src/components/AnfrageAusstehendEintrag.js",["420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443"],{"ruleId":"444","replacedBy":"445"},{"ruleId":"446","replacedBy":"447"},{"ruleId":"448","severity":1,"message":"449","line":1,"column":17,"nodeType":"450","messageId":"451","endLine":1,"endColumn":26},{"ruleId":"448","severity":1,"message":"452","line":13,"column":8,"nodeType":"450","messageId":"451","endLine":13,"endColumn":25},{"ruleId":"448","severity":1,"message":"453","line":19,"column":8,"nodeType":"450","messageId":"451","endLine":19,"endColumn":14},{"ruleId":"448","severity":1,"message":"454","line":2,"column":41,"nodeType":"450","messageId":"451","endLine":2,"endColumn":45},{"ruleId":"448","severity":1,"message":"455","line":3,"column":22,"nodeType":"450","messageId":"451","endLine":3,"endColumn":32},{"ruleId":"448","severity":1,"message":"456","line":3,"column":34,"nodeType":"450","messageId":"451","endLine":3,"endColumn":40},{"ruleId":"448","severity":1,"message":"457","line":3,"column":42,"nodeType":"450","messageId":"451","endLine":3,"endColumn":56},{"ruleId":"448","severity":1,"message":"458","line":3,"column":58,"nodeType":"450","messageId":"451","endLine":3,"endColumn":63},{"ruleId":"448","severity":1,"message":"459","line":3,"column":65,"nodeType":"450","messageId":"451","endLine":3,"endColumn":74},{"ruleId":"448","severity":1,"message":"460","line":3,"column":76,"nodeType":"450","messageId":"451","endLine":3,"endColumn":85},{"ruleId":"448","severity":1,"message":"461","line":3,"column":87,"nodeType":"450","messageId":"451","endLine":3,"endColumn":92},{"ruleId":"448","severity":1,"message":"462","line":3,"column":94,"nodeType":"450","messageId":"451","endLine":3,"endColumn":102},{"ruleId":"448","severity":1,"message":"463","line":3,"column":104,"nodeType":"450","messageId":"451","endLine":3,"endColumn":113},{"ruleId":"448","severity":1,"message":"454","line":3,"column":115,"nodeType":"450","messageId":"451","endLine":3,"endColumn":119},{"ruleId":"448","severity":1,"message":"464","line":3,"column":121,"nodeType":"450","messageId":"451","endLine":3,"endColumn":125},{"ruleId":"448","severity":1,"message":"465","line":4,"column":10,"nodeType":"450","messageId":"451","endLine":4,"endColumn":20},{"ruleId":"448","severity":1,"message":"466","line":6,"column":8,"nodeType":"450","messageId":"451","endLine":6,"endColumn":27},{"ruleId":"448","severity":1,"message":"467","line":7,"column":8,"nodeType":"450","messageId":"451","endLine":7,"endColumn":23},{"ruleId":"468","severity":1,"message":"469","line":27,"column":13,"nodeType":"470","messageId":"471","endLine":27,"endColumn":19},{"ruleId":"448","severity":1,"message":"472","line":150,"column":22,"nodeType":"450","messageId":"451","endLine":150,"endColumn":26},{"ruleId":"448","severity":1,"message":"473","line":152,"column":19,"nodeType":"450","messageId":"451","endLine":152,"endColumn":25},{"ruleId":"448","severity":1,"message":"474","line":152,"column":27,"nodeType":"450","messageId":"451","endLine":152,"endColumn":40},{"ruleId":"448","severity":1,"message":"475","line":152,"column":89,"nodeType":"450","messageId":"451","endLine":152,"endColumn":103},{"ruleId":"448","severity":1,"message":"476","line":152,"column":113,"nodeType":"450","messageId":"451","endLine":152,"endColumn":134},{"ruleId":"448","severity":1,"message":"477","line":152,"column":136,"nodeType":"450","messageId":"451","endLine":152,"endColumn":153},{"ruleId":"448","severity":1,"message":"478","line":152,"column":155,"nodeType":"450","messageId":"451","endLine":152,"endColumn":160},{"ruleId":"448","severity":1,"message":"461","line":3,"column":10,"nodeType":"450","messageId":"451","endLine":3,"endColumn":15},{"ruleId":"448","severity":1,"message":"455","line":3,"column":17,"nodeType":"450","messageId":"451","endLine":3,"endColumn":27},{"ruleId":"448","severity":1,"message":"456","line":4,"column":22,"nodeType":"450","messageId":"451","endLine":4,"endColumn":28},{"ruleId":"448","severity":1,"message":"479","line":4,"column":30,"nodeType":"450","messageId":"451","endLine":4,"endColumn":39},{"ruleId":"448","severity":1,"message":"480","line":4,"column":41,"nodeType":"450","messageId":"451","endLine":4,"endColumn":55},{"ruleId":"448","severity":1,"message":"481","line":4,"column":57,"nodeType":"450","messageId":"451","endLine":4,"endColumn":67},{"ruleId":"448","severity":1,"message":"461","line":16,"column":8,"nodeType":"450","messageId":"451","endLine":16,"endColumn":13},{"ruleId":"448","severity":1,"message":"482","line":116,"column":30,"nodeType":"450","messageId":"451","endLine":116,"endColumn":38},{"ruleId":"448","severity":1,"message":"483","line":3,"column":123,"nodeType":"450","messageId":"451","endLine":3,"endColumn":127},{"ruleId":"448","severity":1,"message":"484","line":168,"column":32,"nodeType":"450","messageId":"451","endLine":168,"endColumn":45},{"ruleId":"448","severity":1,"message":"485","line":5,"column":8,"nodeType":"450","messageId":"451","endLine":5,"endColumn":22},{"ruleId":"448","severity":1,"message":"486","line":8,"column":8,"nodeType":"450","messageId":"451","endLine":8,"endColumn":20},{"ruleId":"448","severity":1,"message":"487","line":134,"column":7,"nodeType":"450","messageId":"451","endLine":134,"endColumn":13},{"ruleId":"448","severity":1,"message":"488","line":9,"column":18,"nodeType":"450","messageId":"451","endLine":9,"endColumn":29},{"ruleId":"448","severity":1,"message":"457","line":3,"column":34,"nodeType":"450","messageId":"451","endLine":3,"endColumn":48},{"ruleId":"448","severity":1,"message":"458","line":3,"column":50,"nodeType":"450","messageId":"451","endLine":3,"endColumn":55},{"ruleId":"448","severity":1,"message":"459","line":3,"column":57,"nodeType":"450","messageId":"451","endLine":3,"endColumn":66},{"ruleId":"448","severity":1,"message":"460","line":3,"column":68,"nodeType":"450","messageId":"451","endLine":3,"endColumn":77},{"ruleId":"448","severity":1,"message":"462","line":3,"column":86,"nodeType":"450","messageId":"451","endLine":3,"endColumn":94},{"ruleId":"448","severity":1,"message":"463","line":3,"column":96,"nodeType":"450","messageId":"451","endLine":3,"endColumn":105},{"ruleId":"448","severity":1,"message":"454","line":3,"column":107,"nodeType":"450","messageId":"451","endLine":3,"endColumn":111},{"ruleId":"448","severity":1,"message":"464","line":3,"column":113,"nodeType":"450","messageId":"451","endLine":3,"endColumn":117},{"ruleId":"448","severity":1,"message":"489","line":3,"column":119,"nodeType":"450","messageId":"451","endLine":3,"endColumn":128},{"ruleId":"448","severity":1,"message":"466","line":9,"column":8,"nodeType":"450","messageId":"451","endLine":9,"endColumn":27},{"ruleId":"448","severity":1,"message":"467","line":10,"column":8,"nodeType":"450","messageId":"451","endLine":10,"endColumn":23},{"ruleId":"448","severity":1,"message":"490","line":263,"column":15,"nodeType":"450","messageId":"451","endLine":263,"endColumn":19},{"ruleId":"448","severity":1,"message":"491","line":263,"column":21,"nodeType":"450","messageId":"451","endLine":263,"endColumn":35},{"ruleId":"448","severity":1,"message":"492","line":263,"column":37,"nodeType":"450","messageId":"451","endLine":263,"endColumn":52},{"ruleId":"448","severity":1,"message":"493","line":263,"column":80,"nodeType":"450","messageId":"451","endLine":263,"endColumn":92},{"ruleId":"448","severity":1,"message":"494","line":263,"column":169,"nodeType":"450","messageId":"451","endLine":263,"endColumn":186},{"ruleId":"448","severity":1,"message":"495","line":263,"column":188,"nodeType":"450","messageId":"451","endLine":263,"endColumn":196},{"ruleId":"448","severity":1,"message":"476","line":263,"column":217,"nodeType":"450","messageId":"451","endLine":263,"endColumn":238},{"ruleId":"448","severity":1,"message":"477","line":263,"column":439,"nodeType":"450","messageId":"451","endLine":263,"endColumn":456},{"ruleId":"448","severity":1,"message":"478","line":263,"column":458,"nodeType":"450","messageId":"451","endLine":263,"endColumn":463},{"ruleId":"496","severity":1,"message":"497","line":617,"column":9,"nodeType":"498","messageId":"471","endLine":624,"endColumn":10},{"ruleId":"448","severity":1,"message":"479","line":4,"column":30,"nodeType":"450","messageId":"451","endLine":4,"endColumn":39},{"ruleId":"448","severity":1,"message":"480","line":4,"column":41,"nodeType":"450","messageId":"451","endLine":4,"endColumn":55},{"ruleId":"448","severity":1,"message":"481","line":4,"column":57,"nodeType":"450","messageId":"451","endLine":4,"endColumn":67},{"ruleId":"448","severity":1,"message":"464","line":4,"column":69,"nodeType":"450","messageId":"451","endLine":4,"endColumn":73},{"ruleId":"448","severity":1,"message":"455","line":4,"column":75,"nodeType":"450","messageId":"451","endLine":4,"endColumn":85},{"ruleId":"448","severity":1,"message":"495","line":103,"column":47,"nodeType":"450","messageId":"451","endLine":103,"endColumn":55},{"ruleId":"448","severity":1,"message":"465","line":5,"column":10,"nodeType":"450","messageId":"451","endLine":5,"endColumn":20},{"ruleId":"448","severity":1,"message":"499","line":6,"column":10,"nodeType":"450","messageId":"451","endLine":6,"endColumn":20},{"ruleId":"448","severity":1,"message":"488","line":7,"column":18,"nodeType":"450","messageId":"451","endLine":7,"endColumn":29},{"ruleId":"448","severity":1,"message":"466","line":13,"column":8,"nodeType":"450","messageId":"451","endLine":13,"endColumn":27},{"ruleId":"448","severity":1,"message":"467","line":14,"column":8,"nodeType":"450","messageId":"451","endLine":14,"endColumn":23},{"ruleId":"448","severity":1,"message":"500","line":187,"column":19,"nodeType":"450","messageId":"451","endLine":187,"endColumn":26},{"ruleId":"448","severity":1,"message":"501","line":191,"column":46,"nodeType":"450","messageId":"451","endLine":191,"endColumn":56},{"ruleId":"448","severity":1,"message":"502","line":191,"column":93,"nodeType":"450","messageId":"451","endLine":191,"endColumn":103},{"ruleId":"448","severity":1,"message":"503","line":191,"column":163,"nodeType":"450","messageId":"451","endLine":191,"endColumn":181},{"ruleId":"448","severity":1,"message":"477","line":191,"column":183,"nodeType":"450","messageId":"451","endLine":191,"endColumn":200},{"ruleId":"448","severity":1,"message":"478","line":191,"column":202,"nodeType":"450","messageId":"451","endLine":191,"endColumn":207},{"ruleId":"448","severity":1,"message":"504","line":3,"column":78,"nodeType":"450","messageId":"451","endLine":3,"endColumn":95},{"ruleId":"448","severity":1,"message":"483","line":3,"column":123,"nodeType":"450","messageId":"451","endLine":3,"endColumn":127},{"ruleId":"448","severity":1,"message":"455","line":8,"column":5,"nodeType":"450","messageId":"451","endLine":8,"endColumn":15},{"ruleId":"448","severity":1,"message":"505","line":11,"column":10,"nodeType":"450","messageId":"451","endLine":11,"endColumn":24},{"ruleId":"448","severity":1,"message":"506","line":11,"column":26,"nodeType":"450","messageId":"451","endLine":11,"endColumn":33},{"ruleId":"448","severity":1,"message":"465","line":12,"column":10,"nodeType":"450","messageId":"451","endLine":12,"endColumn":20},{"ruleId":"448","severity":1,"message":"507","line":20,"column":8,"nodeType":"450","messageId":"451","endLine":20,"endColumn":27},{"ruleId":"448","severity":1,"message":"474","line":260,"column":13,"nodeType":"450","messageId":"451","endLine":260,"endColumn":26},{"ruleId":"448","severity":1,"message":"473","line":260,"column":28,"nodeType":"450","messageId":"451","endLine":260,"endColumn":34},{"ruleId":"448","severity":1,"message":"508","line":260,"column":36,"nodeType":"450","messageId":"451","endLine":260,"endColumn":46},{"ruleId":"448","severity":1,"message":"509","line":260,"column":166,"nodeType":"450","messageId":"451","endLine":260,"endColumn":187},{"ruleId":"448","severity":1,"message":"510","line":260,"column":231,"nodeType":"450","messageId":"451","endLine":260,"endColumn":248},{"ruleId":"448","severity":1,"message":"511","line":260,"column":278,"nodeType":"450","messageId":"451","endLine":260,"endColumn":288},{"ruleId":"448","severity":1,"message":"512","line":261,"column":41,"nodeType":"450","messageId":"451","endLine":261,"endColumn":55},{"ruleId":"448","severity":1,"message":"513","line":261,"column":91,"nodeType":"450","messageId":"451","endLine":261,"endColumn":104},{"ruleId":"448","severity":1,"message":"514","line":261,"column":140,"nodeType":"450","messageId":"451","endLine":261,"endColumn":153},{"ruleId":"448","severity":1,"message":"515","line":262,"column":5,"nodeType":"450","messageId":"451","endLine":262,"endColumn":23},{"ruleId":"448","severity":1,"message":"516","line":262,"column":25,"nodeType":"450","messageId":"451","endLine":262,"endColumn":38},{"ruleId":"448","severity":1,"message":"456","line":3,"column":22,"nodeType":"450","messageId":"451","endLine":3,"endColumn":28},{"ruleId":"448","severity":1,"message":"488","line":3,"column":30,"nodeType":"450","messageId":"451","endLine":3,"endColumn":41},{"ruleId":"448","severity":1,"message":"504","line":3,"column":91,"nodeType":"450","messageId":"451","endLine":3,"endColumn":108},{"ruleId":"448","severity":1,"message":"517","line":3,"column":110,"nodeType":"450","messageId":"451","endLine":3,"endColumn":123},{"ruleId":"448","severity":1,"message":"479","line":3,"column":125,"nodeType":"450","messageId":"451","endLine":3,"endColumn":134},{"ruleId":"448","severity":1,"message":"518","line":4,"column":5,"nodeType":"450","messageId":"451","endLine":4,"endColumn":14},{"ruleId":"448","severity":1,"message":"519","line":4,"column":16,"nodeType":"450","messageId":"451","endLine":4,"endColumn":32},{"ruleId":"448","severity":1,"message":"520","line":4,"column":34,"nodeType":"450","messageId":"451","endLine":4,"endColumn":50},{"ruleId":"448","severity":1,"message":"521","line":5,"column":35,"nodeType":"450","messageId":"451","endLine":5,"endColumn":58},{"ruleId":"448","severity":1,"message":"522","line":6,"column":5,"nodeType":"450","messageId":"451","endLine":6,"endColumn":16},{"ruleId":"448","severity":1,"message":"523","line":7,"column":5,"nodeType":"450","messageId":"451","endLine":7,"endColumn":15},{"ruleId":"448","severity":1,"message":"524","line":8,"column":5,"nodeType":"450","messageId":"451","endLine":8,"endColumn":11},{"ruleId":"448","severity":1,"message":"525","line":9,"column":5,"nodeType":"450","messageId":"451","endLine":9,"endColumn":13},{"ruleId":"448","severity":1,"message":"455","line":10,"column":5,"nodeType":"450","messageId":"451","endLine":10,"endColumn":15},{"ruleId":"448","severity":1,"message":"505","line":13,"column":10,"nodeType":"450","messageId":"451","endLine":13,"endColumn":24},{"ruleId":"448","severity":1,"message":"506","line":13,"column":26,"nodeType":"450","messageId":"451","endLine":13,"endColumn":33},{"ruleId":"448","severity":1,"message":"465","line":14,"column":10,"nodeType":"450","messageId":"451","endLine":14,"endColumn":20},{"ruleId":"448","severity":1,"message":"526","line":17,"column":8,"nodeType":"450","messageId":"451","endLine":17,"endColumn":20},{"ruleId":"448","severity":1,"message":"527","line":18,"column":8,"nodeType":"450","messageId":"451","endLine":18,"endColumn":22},{"ruleId":"448","severity":1,"message":"528","line":19,"column":8,"nodeType":"450","messageId":"451","endLine":19,"endColumn":23},{"ruleId":"448","severity":1,"message":"529","line":20,"column":8,"nodeType":"450","messageId":"451","endLine":20,"endColumn":16},{"ruleId":"448","severity":1,"message":"530","line":21,"column":8,"nodeType":"450","messageId":"451","endLine":21,"endColumn":16},{"ruleId":"448","severity":1,"message":"531","line":119,"column":43,"nodeType":"450","messageId":"451","endLine":119,"endColumn":57},{"ruleId":"448","severity":1,"message":"515","line":120,"column":111,"nodeType":"450","messageId":"451","endLine":120,"endColumn":129},{"ruleId":"448","severity":1,"message":"516","line":120,"column":131,"nodeType":"450","messageId":"451","endLine":120,"endColumn":144},{"ruleId":"448","severity":1,"message":"483","line":3,"column":123,"nodeType":"450","messageId":"451","endLine":3,"endColumn":127},{"ruleId":"448","severity":1,"message":"465","line":12,"column":10,"nodeType":"450","messageId":"451","endLine":12,"endColumn":20},{"ruleId":"448","severity":1,"message":"474","line":298,"column":62,"nodeType":"450","messageId":"451","endLine":298,"endColumn":75},{"ruleId":"448","severity":1,"message":"532","line":298,"column":77,"nodeType":"450","messageId":"451","endLine":298,"endColumn":94},{"ruleId":"448","severity":1,"message":"533","line":299,"column":17,"nodeType":"450","messageId":"451","endLine":299,"endColumn":30},{"ruleId":"448","severity":1,"message":"534","line":299,"column":32,"nodeType":"450","messageId":"451","endLine":299,"endColumn":48},{"ruleId":"448","severity":1,"message":"535","line":299,"column":50,"nodeType":"450","messageId":"451","endLine":299,"endColumn":54},{"ruleId":"448","severity":1,"message":"491","line":299,"column":56,"nodeType":"450","messageId":"451","endLine":299,"endColumn":70},{"ruleId":"448","severity":1,"message":"492","line":299,"column":72,"nodeType":"450","messageId":"451","endLine":299,"endColumn":87},{"ruleId":"448","severity":1,"message":"536","line":299,"column":89,"nodeType":"450","messageId":"451","endLine":299,"endColumn":107},{"ruleId":"448","severity":1,"message":"473","line":299,"column":109,"nodeType":"450","messageId":"451","endLine":299,"endColumn":115},{"ruleId":"448","severity":1,"message":"537","line":302,"column":55,"nodeType":"450","messageId":"451","endLine":302,"endColumn":82},{"ruleId":"448","severity":1,"message":"538","line":6,"column":8,"nodeType":"450","messageId":"451","endLine":6,"endColumn":17},{"ruleId":"448","severity":1,"message":"539","line":8,"column":10,"nodeType":"450","messageId":"451","endLine":8,"endColumn":19},{"ruleId":"448","severity":1,"message":"500","line":111,"column":11,"nodeType":"450","messageId":"451","endLine":111,"endColumn":18},{"ruleId":"448","severity":1,"message":"540","line":112,"column":40,"nodeType":"450","messageId":"451","endLine":112,"endColumn":54},{"ruleId":"448","severity":1,"message":"541","line":112,"column":84,"nodeType":"450","messageId":"451","endLine":112,"endColumn":100},{"ruleId":"448","severity":1,"message":"453","line":4,"column":8,"nodeType":"450","messageId":"451","endLine":4,"endColumn":14},{"ruleId":"448","severity":1,"message":"473","line":242,"column":39,"nodeType":"450","messageId":"451","endLine":242,"endColumn":45},{"ruleId":"448","severity":1,"message":"542","line":242,"column":70,"nodeType":"450","messageId":"451","endLine":242,"endColumn":76},{"ruleId":"448","severity":1,"message":"508","line":242,"column":99,"nodeType":"450","messageId":"451","endLine":242,"endColumn":109},{"ruleId":"448","severity":1,"message":"543","line":242,"column":146,"nodeType":"450","messageId":"451","endLine":242,"endColumn":158},{"ruleId":"448","severity":1,"message":"544","line":242,"column":160,"nodeType":"450","messageId":"451","endLine":242,"endColumn":178},{"ruleId":"448","severity":1,"message":"502","line":242,"column":180,"nodeType":"450","messageId":"451","endLine":242,"endColumn":190},{"ruleId":"448","severity":1,"message":"545","line":53,"column":39,"nodeType":"450","messageId":"451","endLine":53,"endColumn":51},{"ruleId":"448","severity":1,"message":"483","line":3,"column":123,"nodeType":"450","messageId":"451","endLine":3,"endColumn":127},{"ruleId":"448","severity":1,"message":"465","line":11,"column":10,"nodeType":"450","messageId":"451","endLine":11,"endColumn":20},{"ruleId":"448","severity":1,"message":"484","line":262,"column":47,"nodeType":"450","messageId":"451","endLine":262,"endColumn":60},{"ruleId":"448","severity":1,"message":"508","line":262,"column":62,"nodeType":"450","messageId":"451","endLine":262,"endColumn":72},{"ruleId":"448","severity":1,"message":"474","line":262,"column":74,"nodeType":"450","messageId":"451","endLine":262,"endColumn":87},{"ruleId":"448","severity":1,"message":"546","line":265,"column":45,"nodeType":"450","messageId":"451","endLine":265,"endColumn":56},{"ruleId":"448","severity":1,"message":"453","line":4,"column":8,"nodeType":"450","messageId":"451","endLine":4,"endColumn":14},{"ruleId":"448","severity":1,"message":"488","line":5,"column":30,"nodeType":"450","messageId":"451","endLine":5,"endColumn":41},{"ruleId":"448","severity":1,"message":"481","line":5,"column":43,"nodeType":"450","messageId":"451","endLine":5,"endColumn":53},{"ruleId":"448","severity":1,"message":"547","line":5,"column":55,"nodeType":"450","messageId":"451","endLine":5,"endColumn":61},{"ruleId":"448","severity":1,"message":"548","line":5,"column":63,"nodeType":"450","messageId":"451","endLine":5,"endColumn":74},{"ruleId":"448","severity":1,"message":"549","line":5,"column":76,"nodeType":"450","messageId":"451","endLine":5,"endColumn":89},{"ruleId":"448","severity":1,"message":"504","line":5,"column":91,"nodeType":"450","messageId":"451","endLine":5,"endColumn":108},{"ruleId":"448","severity":1,"message":"517","line":5,"column":110,"nodeType":"450","messageId":"451","endLine":5,"endColumn":123},{"ruleId":"448","severity":1,"message":"479","line":5,"column":125,"nodeType":"450","messageId":"451","endLine":5,"endColumn":134},{"ruleId":"448","severity":1,"message":"464","line":5,"column":142,"nodeType":"450","messageId":"451","endLine":5,"endColumn":146},{"ruleId":"448","severity":1,"message":"518","line":6,"column":5,"nodeType":"450","messageId":"451","endLine":6,"endColumn":14},{"ruleId":"448","severity":1,"message":"519","line":6,"column":16,"nodeType":"450","messageId":"451","endLine":6,"endColumn":32},{"ruleId":"448","severity":1,"message":"520","line":6,"column":34,"nodeType":"450","messageId":"451","endLine":6,"endColumn":50},{"ruleId":"448","severity":1,"message":"521","line":7,"column":35,"nodeType":"450","messageId":"451","endLine":7,"endColumn":58},{"ruleId":"448","severity":1,"message":"522","line":8,"column":5,"nodeType":"450","messageId":"451","endLine":8,"endColumn":16},{"ruleId":"448","severity":1,"message":"523","line":9,"column":5,"nodeType":"450","messageId":"451","endLine":9,"endColumn":15},{"ruleId":"448","severity":1,"message":"524","line":10,"column":5,"nodeType":"450","messageId":"451","endLine":10,"endColumn":11},{"ruleId":"448","severity":1,"message":"525","line":11,"column":5,"nodeType":"450","messageId":"451","endLine":11,"endColumn":13},{"ruleId":"448","severity":1,"message":"455","line":12,"column":5,"nodeType":"450","messageId":"451","endLine":12,"endColumn":15},{"ruleId":"448","severity":1,"message":"550","line":16,"column":8,"nodeType":"450","messageId":"451","endLine":16,"endColumn":22},{"ruleId":"448","severity":1,"message":"551","line":23,"column":8,"nodeType":"450","messageId":"451","endLine":23,"endColumn":19},{"ruleId":"448","severity":1,"message":"472","line":205,"column":28,"nodeType":"450","messageId":"451","endLine":205,"endColumn":32},{"ruleId":"448","severity":1,"message":"552","line":205,"column":34,"nodeType":"450","messageId":"451","endLine":205,"endColumn":47},{"ruleId":"448","severity":1,"message":"553","line":206,"column":19,"nodeType":"450","messageId":"451","endLine":206,"endColumn":32},{"ruleId":"448","severity":1,"message":"554","line":206,"column":102,"nodeType":"450","messageId":"451","endLine":206,"endColumn":127},{"ruleId":"448","severity":1,"message":"540","line":53,"column":37,"nodeType":"450","messageId":"451","endLine":53,"endColumn":51},{"ruleId":"448","severity":1,"message":"504","line":3,"column":78,"nodeType":"450","messageId":"451","endLine":3,"endColumn":95},{"ruleId":"448","severity":1,"message":"479","line":3,"column":112,"nodeType":"450","messageId":"451","endLine":3,"endColumn":121},{"ruleId":"448","severity":1,"message":"483","line":3,"column":123,"nodeType":"450","messageId":"451","endLine":3,"endColumn":127},{"ruleId":"448","severity":1,"message":"522","line":4,"column":5,"nodeType":"450","messageId":"451","endLine":4,"endColumn":16},{"ruleId":"448","severity":1,"message":"523","line":5,"column":5,"nodeType":"450","messageId":"451","endLine":5,"endColumn":15},{"ruleId":"448","severity":1,"message":"524","line":6,"column":5,"nodeType":"450","messageId":"451","endLine":6,"endColumn":11},{"ruleId":"448","severity":1,"message":"525","line":7,"column":5,"nodeType":"450","messageId":"451","endLine":7,"endColumn":13},{"ruleId":"448","severity":1,"message":"455","line":8,"column":5,"nodeType":"450","messageId":"451","endLine":8,"endColumn":15},{"ruleId":"448","severity":1,"message":"505","line":11,"column":10,"nodeType":"450","messageId":"451","endLine":11,"endColumn":24},{"ruleId":"448","severity":1,"message":"506","line":11,"column":26,"nodeType":"450","messageId":"451","endLine":11,"endColumn":33},{"ruleId":"448","severity":1,"message":"465","line":12,"column":10,"nodeType":"450","messageId":"451","endLine":12,"endColumn":20},{"ruleId":"448","severity":1,"message":"526","line":15,"column":8,"nodeType":"450","messageId":"451","endLine":15,"endColumn":20},{"ruleId":"448","severity":1,"message":"529","line":18,"column":8,"nodeType":"450","messageId":"451","endLine":18,"endColumn":16},{"ruleId":"448","severity":1,"message":"530","line":19,"column":8,"nodeType":"450","messageId":"451","endLine":19,"endColumn":16},{"ruleId":"448","severity":1,"message":"555","line":21,"column":8,"nodeType":"450","messageId":"451","endLine":21,"endColumn":29},{"ruleId":"448","severity":1,"message":"556","line":299,"column":32,"nodeType":"450","messageId":"451","endLine":299,"endColumn":40},{"ruleId":"448","severity":1,"message":"553","line":299,"column":86,"nodeType":"450","messageId":"451","endLine":299,"endColumn":99},{"ruleId":"448","severity":1,"message":"557","line":299,"column":101,"nodeType":"450","messageId":"451","endLine":299,"endColumn":121},{"ruleId":"448","severity":1,"message":"515","line":299,"column":154,"nodeType":"450","messageId":"451","endLine":299,"endColumn":172},{"ruleId":"448","severity":1,"message":"516","line":299,"column":174,"nodeType":"450","messageId":"451","endLine":299,"endColumn":187},{"ruleId":"448","severity":1,"message":"558","line":4,"column":59,"nodeType":"450","messageId":"451","endLine":4,"endColumn":66},{"ruleId":"448","severity":1,"message":"559","line":4,"column":74,"nodeType":"450","messageId":"451","endLine":4,"endColumn":78},{"ruleId":"448","severity":1,"message":"483","line":4,"column":80,"nodeType":"450","messageId":"451","endLine":4,"endColumn":84},{"ruleId":"448","severity":1,"message":"560","line":11,"column":10,"nodeType":"450","messageId":"451","endLine":11,"endColumn":20},{"ruleId":"448","severity":1,"message":"543","line":188,"column":39,"nodeType":"450","messageId":"451","endLine":188,"endColumn":51},{"ruleId":"448","severity":1,"message":"561","line":190,"column":81,"nodeType":"450","messageId":"451","endLine":190,"endColumn":97},{"ruleId":"448","severity":1,"message":"560","line":5,"column":10,"nodeType":"450","messageId":"451","endLine":5,"endColumn":20},{"ruleId":"448","severity":1,"message":"561","line":86,"column":27,"nodeType":"450","messageId":"451","endLine":86,"endColumn":43},{"ruleId":"448","severity":1,"message":"562","line":86,"column":80,"nodeType":"450","messageId":"451","endLine":86,"endColumn":99},{"ruleId":"563","severity":1,"message":"564","line":96,"column":17,"nodeType":"565","messageId":"566","endLine":96,"endColumn":43},{"ruleId":"563","severity":1,"message":"564","line":132,"column":17,"nodeType":"565","messageId":"566","endLine":132,"endColumn":43},{"ruleId":"448","severity":1,"message":"453","line":4,"column":8,"nodeType":"450","messageId":"451","endLine":4,"endColumn":14},{"ruleId":"448","severity":1,"message":"488","line":5,"column":30,"nodeType":"450","messageId":"451","endLine":5,"endColumn":41},{"ruleId":"448","severity":1,"message":"481","line":5,"column":43,"nodeType":"450","messageId":"451","endLine":5,"endColumn":53},{"ruleId":"448","severity":1,"message":"547","line":5,"column":55,"nodeType":"450","messageId":"451","endLine":5,"endColumn":61},{"ruleId":"448","severity":1,"message":"548","line":5,"column":63,"nodeType":"450","messageId":"451","endLine":5,"endColumn":74},{"ruleId":"448","severity":1,"message":"549","line":5,"column":76,"nodeType":"450","messageId":"451","endLine":5,"endColumn":89},{"ruleId":"448","severity":1,"message":"504","line":5,"column":91,"nodeType":"450","messageId":"451","endLine":5,"endColumn":108},{"ruleId":"448","severity":1,"message":"517","line":5,"column":110,"nodeType":"450","messageId":"451","endLine":5,"endColumn":123},{"ruleId":"448","severity":1,"message":"479","line":5,"column":125,"nodeType":"450","messageId":"451","endLine":5,"endColumn":134},{"ruleId":"448","severity":1,"message":"464","line":5,"column":142,"nodeType":"450","messageId":"451","endLine":5,"endColumn":146},{"ruleId":"448","severity":1,"message":"518","line":6,"column":5,"nodeType":"450","messageId":"451","endLine":6,"endColumn":14},{"ruleId":"448","severity":1,"message":"519","line":6,"column":16,"nodeType":"450","messageId":"451","endLine":6,"endColumn":32},{"ruleId":"448","severity":1,"message":"520","line":6,"column":34,"nodeType":"450","messageId":"451","endLine":6,"endColumn":50},{"ruleId":"448","severity":1,"message":"521","line":7,"column":35,"nodeType":"450","messageId":"451","endLine":7,"endColumn":58},{"ruleId":"448","severity":1,"message":"522","line":8,"column":5,"nodeType":"450","messageId":"451","endLine":8,"endColumn":16},{"ruleId":"448","severity":1,"message":"523","line":9,"column":5,"nodeType":"450","messageId":"451","endLine":9,"endColumn":15},{"ruleId":"448","severity":1,"message":"524","line":10,"column":5,"nodeType":"450","messageId":"451","endLine":10,"endColumn":11},{"ruleId":"448","severity":1,"message":"525","line":11,"column":5,"nodeType":"450","messageId":"451","endLine":11,"endColumn":13},{"ruleId":"448","severity":1,"message":"455","line":12,"column":5,"nodeType":"450","messageId":"451","endLine":12,"endColumn":15},{"ruleId":"448","severity":1,"message":"550","line":16,"column":8,"nodeType":"450","messageId":"451","endLine":16,"endColumn":22},{"ruleId":"448","severity":1,"message":"551","line":23,"column":8,"nodeType":"450","messageId":"451","endLine":23,"endColumn":19},{"ruleId":"448","severity":1,"message":"472","line":119,"column":28,"nodeType":"450","messageId":"451","endLine":119,"endColumn":32},{"ruleId":"448","severity":1,"message":"552","line":119,"column":34,"nodeType":"450","messageId":"451","endLine":119,"endColumn":47},{"ruleId":"448","severity":1,"message":"567","line":120,"column":19,"nodeType":"450","messageId":"451","endLine":120,"endColumn":43},"no-native-reassign",["568"],"no-negated-in-lhs",["569"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'RegistrierungForm' is defined but never used.","'Profil' is defined but never used.","'Link' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Grid' is defined but never used.","'withRouter' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","no-dupe-keys","Duplicate key 'gruppe'.","ObjectExpression","unexpected","'show' is assigned a value but never used.","'profil' is assigned a value but never used.","'lernvorlieben' is assigned a value but never used.","'gruppengroesse' is assigned a value but never used.","'personLernvorliebenID' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'personID' is assigned a value but never used.","'Card' is defined but never used.","'currentPerson' is assigned a value but never used.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","'styles' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'test' is assigned a value but never used.","'lernfaecher_id' is assigned a value but never used.","'lernfaecher_bez' is assigned a value but never used.","'personProfil' is assigned a value but never used.","'personLernfaecher' is assigned a value but never used.","'lernfach' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","'withStyles' is defined but never used.","'classes' is assigned a value but never used.","'gruppeName' is assigned a value but never used.","'showProfil' is assigned a value but never used.","'showLerngruppeForm' is assigned a value but never used.","'DialogContentText' is defined but never used.","'TeachingbeeAPI' is defined but never used.","'GroupBO' is defined but never used.","'GruppenListeEintrag' is defined but never used.","'lerngruppe' is assigned a value but never used.","'lernfaecherNameEdited' is assigned a value but never used.","'tageszeitenEdited' is assigned a value but never used.","'tageEdited' is assigned a value but never used.","'frequenzEdited' is assigned a value but never used.","'lernartEdited' is assigned a value but never used.","'lernortEdited' is assigned a value but never used.","'updatingInProgress' is assigned a value but never used.","'updatingError' is assigned a value but never used.","'DialogActions' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'LerngruppeBO' is defined but never used.","'KonversationBO' is defined but never used.","'TeilnahmeChatBO' is defined but never used.","'ProfilBO' is defined but never used.","'PersonBO' is defined but never used.","'konversationen' is assigned a value but never used.","'lernfaechergesamt' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'setSelectedValue' is assigned a value but never used.","'data' is assigned a value but never used.","'lernfaecherauswahl' is assigned a value but never used.","'lernfaecherValidationFailed' is assigned a value but never used.","'Nachricht' is defined but never used.","'useParams' is defined but never used.","'konversationID' is assigned a value but never used.","'showKonversation' is assigned a value but never used.","'person' is assigned a value but never used.","'konversation' is assigned a value but never used.","'konversationStatus' is assigned a value but never used.","'lerngruppeID' is assigned a value but never used.","'lernfaecher' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'AnfrageForm' is defined but never used.","'expandedState' is assigned a value but never used.","'teilnahmeChat' is assigned a value but never used.","'konversationAnfragestatus' is assigned a value but never used.","'VorschlagListeEintrag' is defined but never used.","'konvName' is assigned a value but never used.","'teilnahmeChatPartner' is assigned a value but never used.","'Divider' is defined but never used.","'Pape' is defined but never used.","'MessageBox' is defined but never used.","'nachricht_inhalt' is assigned a value but never used.","'expandedNachrichtID' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'teilnahmenChatAusstehend' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]