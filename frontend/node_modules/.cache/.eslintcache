[{"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js":"1","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js":"2","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js":"3","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js":"4","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js":"5","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js":"6","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js":"7","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js":"8","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js":"9","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js":"10","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js":"11","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js":"12","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js":"13","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js":"14","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js":"15","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js":"16","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js":"17","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js":"18","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js":"19","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js":"20","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js":"21","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js":"22","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js":"23","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js":"24","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js":"25","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js":"26","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js":"27","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Profil.js":"28","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js":"29","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js":"30","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js":"31","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Nachricht.js":"32","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/NachrichtenListeEintrag.js":"33","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js":"34","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js":"35","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js":"36","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js":"37","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js":"38"},{"size":146,"mtime":1620807576504,"results":"39","hashOfConfig":"40"},{"size":6158,"mtime":1624722131128,"results":"41","hashOfConfig":"40"},{"size":1706,"mtime":1623434614996,"results":"42","hashOfConfig":"40"},{"size":579,"mtime":1624551192607,"results":"43","hashOfConfig":"40"},{"size":844,"mtime":1624551192605,"results":"44","hashOfConfig":"40"},{"size":43666,"mtime":1624722131297,"results":"45","hashOfConfig":"40"},{"size":862,"mtime":1622112082063,"results":"46","hashOfConfig":"40"},{"size":2113,"mtime":1622112193821,"results":"47","hashOfConfig":"40"},{"size":1816,"mtime":1623433312638,"results":"48","hashOfConfig":"40"},{"size":10909,"mtime":1624708521878,"results":"49","hashOfConfig":"40"},{"size":1839,"mtime":1624637879244,"results":"50","hashOfConfig":"40"},{"size":8145,"mtime":1624721996100,"results":"51","hashOfConfig":"40"},{"size":2525,"mtime":1624633454200,"results":"52","hashOfConfig":"40"},{"size":1315,"mtime":1623938783709,"results":"53","hashOfConfig":"40"},{"size":1916,"mtime":1624633454194,"results":"54","hashOfConfig":"40"},{"size":1015,"mtime":1624633454191,"results":"55","hashOfConfig":"40"},{"size":1253,"mtime":1623433111030,"results":"56","hashOfConfig":"40"},{"size":798,"mtime":1624720654454,"results":"57","hashOfConfig":"40"},{"size":1447,"mtime":1624708701524,"results":"58","hashOfConfig":"40"},{"size":1043,"mtime":1624633454204,"results":"59","hashOfConfig":"40"},{"size":1040,"mtime":1624551192590,"results":"60","hashOfConfig":"40"},{"size":3271,"mtime":1622538283974,"results":"61","hashOfConfig":"40"},{"size":329,"mtime":1622114445485,"results":"62","hashOfConfig":"40"},{"size":375,"mtime":1622112904258,"results":"63","hashOfConfig":"40"},{"size":761,"mtime":1621758115765,"results":"64","hashOfConfig":"40"},{"size":5156,"mtime":1624708701527,"results":"65","hashOfConfig":"40"},{"size":5900,"mtime":1624708701528,"results":"66","hashOfConfig":"40"},{"size":6008,"mtime":1624633454230,"results":"67","hashOfConfig":"40"},{"size":3927,"mtime":1624708701529,"results":"68","hashOfConfig":"40"},{"size":4174,"mtime":1624708701525,"results":"69","hashOfConfig":"40"},{"size":2657,"mtime":1624722131129,"results":"70","hashOfConfig":"40"},{"size":8073,"mtime":1624551192596,"results":"71","hashOfConfig":"40"},{"size":5235,"mtime":1624551192597,"results":"72","hashOfConfig":"40"},{"size":5487,"mtime":1624633454218,"results":"73","hashOfConfig":"40"},{"size":5286,"mtime":1624633454220,"results":"74","hashOfConfig":"40"},{"size":3919,"mtime":1624633454231,"results":"75","hashOfConfig":"40"},{"size":20039,"mtime":1624719300872,"results":"76","hashOfConfig":"40"},{"size":766,"mtime":1624708701522,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"cx8xr9",{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"151"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js",[],["166","167"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js",["168","169","170"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js",["171"],"import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n */\n\n\nfunction About() {\n\n    const classes = useStyles();\n  \n    return (\n      <Paper elevation={0} className={classes.root}>\n        <div className={classes.content}>\n          <Typography variant='h6'>\n            App zum Auffinden von Lernpartnern\n          </Typography>\n          <Typography variant='body2'>\n            © Hochschule der Medien 2020, all rights reserved.\n          </Typography>\n        </div>\n      </Paper>\n    )\n  }\n  \n  export default About;","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js",["172"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js",["173","174"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass RegistrierungForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Init the state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n            \n            \n        };\n        // save this state for canceling\n        this.baseState = this.state;\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        }\n    \n\n    /** Updates the person */\n    registrieren = () => {\n        let person = this.props.currentPerson;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator \n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t \n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n    handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose(null);\n    }\n\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n  \n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, } = this.props;\n        const { name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\n          updatingInProgress, updatingError} = this.state;\n    \n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\n        let header = 'Bitte gib deine Daten ein:';\n    \n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname} \n                    onChange={this.textFieldValueChange} error={vornameValidationFailed} \n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n                  \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \n                    onChange={this.numberValueChange} error={semesterValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \n                    \n                  <FormControl className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\n                            </Select>\n                   </FormControl>\n                   \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \n                    onChange={this.numberValueChange} error={alterValidationFailed} \n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \n                  \n                  <FormControl className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Du konntest leider nicht registriert werden :/`}\n                      onReload={this.registrieren} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={this.registrieren} color='primary'>\n                          Jetzt registrieren\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nRegistrierungForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n  \n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(RegistrierungForm));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/MeinProfil.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\n//import Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport RegistrierungForm from './dialogs/RegistrierungForm';\nimport MeinProfilForm from './dialogs/MeinProfilForm';\nimport { LernpartnerAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\n\nclass MeinProfil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            person: null,\n            \n            personVorname: null,\n            personName: this.props.personName,\n            personSemester: null,\n            personAlter: null,\n            personStudiengang: null,\n            lerngruppe: false,\n            personProfilID: null,\n            personLernfaecher: [],\n            lernfaechernamen: [],\n            personLernvorliebenID: null,\n            profil: null,\n            lernvorlieben: null,\n            lernvorliebenfrequenz: null,\n            gruppe: false,\n            showMeinProfilForm: false,\n            showRegistrierungForm: false,\n            loadingInProgress: false,\n            loadingError: null,\n            \n        };\n    }\n\n    // API Anbindung um Profil vom Backend zu bekommen\n    \n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.currentPerson.getgoogle_user_id())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personAlter: personBO.alter,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          })).then(() => {\n            if (this.state.personName === 'Null'){\n              this.setState({\n                showRegistrierungForm: true\n              })\n            }\n          })\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n    \n\n   getProfil = () => {\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n\t\t\t.then(profilBO =>\n\t\t\t\tthis.setState({\n            profil: profilBO,\n            personLernvorliebenID: profilBO.lernvorlieben_id,\n            error: null,\n            loadingInProgress: false,\n          })).then(() => {\n            this.getLernvorlieben();\n           \n          }).catch(e =>\n            this.setState({\n              profil: null,\n              personLernfaecher: null,\n              error: e,\n              loadingInProgress: false,\n            }));\n\n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n\n    getLernfaecher = () => {\n      LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n      .then(lernfaecherBOs =>\n        this.setState({\n              personLernfaecher: lernfaecherBOs,\n              lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\n              loadingInProgress: false,\n              error: null\n        }))\n        .catch(e =>\n          this.setState({ // Reset state with error from catch\n            personLernfaecher: null,\n            loadingInProgress: false,\n            error: e,\n          })\n        );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    }\n   \n    getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.personLernvorliebenID)\n    .then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            lernvorliebenfrequenz: lernvorliebenBO.frequenz,\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n  \n  \n  //Handles the onClick event of the show profil button\n  bearbeitenButtonClicked = (event) => {\n    this.setState({\n      showMeinProfilForm: true\n    });\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  userFormClosed = (person) => {\n    this.getPerson();\n    if (person) {\n        this.setState({\n            person: person,\n            showRegistrierungForm: false,\n        });\n    } else {\n        this.setState({\n          showRegistrierungForm: false\n        })\n      \n    }\n  }\n\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\n  bearbeitenFormClosed = (person) => {\n    this.getPerson();\n    if (person) {\n        this.setState({\n            person: person,\n            showMeinProfilForm: false,\n        });\n    } else {\n        this.setState({\n          showMeinProfilForm: false\n        })\n      \n    }\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount(){\n    this.getPerson();\n    this.getProfil();\n    this.getLernfaecher();\n    \n  }\n\n\n\n\n\n   /** Renders the component */\n    render() {\n      const { classes , currentPerson } = this.props;\n      // Use the states customer\n      const { lernfaechernamen, profil, personProfil, personName, personVorname, personSemester, personAlter, personStudiengang, personLernfaecher, lernfach, personLernvorliebenID, lernvorlieben, lernvorliebenfrequenz, showRegistrierungForm, showMeinProfilForm, loadingInProgress, error} = this.state;\n      console.log(profil)\n      \n    \n      return (\n        <div className={classes.root}>\n        <RegistrierungForm show={showRegistrierungForm} currentPerson = {currentPerson} onClose={this.userFormClosed}/>\n        \n        <Button color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Mein Profil bearbeiten</Button>\n        <Typography variant='body1' color={'textSecondary'}>\n\n                              <b>Name: </b>{personVorname} {personName}<br />\n                              <b>Alter: </b> {personAlter} <br />\n                              <b>Semester: </b> {personSemester} <br />\n                              <b>Studiengang: </b>{personStudiengang}<br />\n                              <b>Lernfächer: </b>{lernfaechernamen}<br />\n                              <b>Lernvorlieben-Frequenz Test: </b>{lernvorliebenfrequenz}<br />\n\n        </Typography>\n        <MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson} currentProfil= {profil} lernvorlieben={lernvorlieben} onClose={this.bearbeitenFormClosed}/>\n        </div>\n      );\n    }\n}\n//<MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson}/>\n  const styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n\n/** PropTypes */\nMeinProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  currentPerson: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withRouter(withStyles(styles)(MeinProfil));\n\n","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListe.js",["192","193","194","195","196"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport VorschlagListeEintrag from './VorschlagListeEintrag';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\n//import Paper from '@material-ui/core/Paper';\n\n\n\n/**\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\n * \n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\n * \n */\n\n\nclass VorschlagListe extends Component {\n\n    constructor(props){\n        super(props);\n\n        // console.log(props);\n        let expandedID = null;\n\n        if (this.props.location.expandVorschlag) {\n        expandedID = this.props.location.expandVorschlag.getID();\n        }\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlaege : [],\n            //currentPersonName: null,\n            error: null,\n            loadingInProgress: false, \n            expandedVorschlagID: expandedID,\n        };\n    }\n\n\n    // API Anbindung um Vorschläge des Students vom Backend zu bekommen \n    getVorschlaege = () => {\n            LernpartnerAPI.getAPI().getVorschlaegeByPersonByLernfach(this.props.currentPerson.id, this.props.lernfach)\n            .then(vorschlagBOs =>\n                this.setState({\n                    vorschlaege: vorschlagBOs,\n                    error: null,\n                    loadingInProgress: false,\n                })).catch(e =>\n                    this.setState({\n                        vorschlaege: [],\n                        error: e,\n                        loadingInProgress: false,\n                    }));\n            this.setState({\n                error: null,\n                loadingInProgress: true,\n                loadingVorschlaegeError: null\n            });\n    }\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        \n\n    }\n    \n    /** \n     * Handles onExpandedStateChange events from the VorschlagListeEintrag component. Toggels the expanded state of \n     * the VorschlagListeEintrag of the given VorschlagBO.\n     * \n     * @param {vorschlag} VorschlagBO of the VorschlagListeEintrag to be toggeled\n     */\n    onExpandedStateChange = vorschlag => {\n        // console.log(vorschlagID);\n        // Set expandend Vorschlag Eintrag to null by default\n        let newID = null;\n\n        // If same vorschlag entry is clicked, collapse it else expand a new one\n        if (vorschlag.getID() !== this.state.expandedVorschlagID) {\n        // Expand the customer entry with customerID\n        newID = vorschlag.getID();\n        }\n        // console.log(newID);\n        this.setState({\n        expandedVorschlagID: newID,\n        });\n    }\n\n    render() {\n        const { show, classes, lernfach } = this.props;\n        const { vorschlaege, expandedVorschlagID, error, loadingInProgress}  = this.state;\n        console.log(lernfach)\n        return (\n          show ?\n          <div className={classes.root}>\n            <h1>Hier sind alle Matches für dein ausgewähltes Lernfach:</h1>\n            <Button color=\"primary\" onClick= {this.getVorschlaege}>Matches generieren</Button>\n            { \n              // Show the list of VorschlagListeEintrag components\n              // Do not use strict comparison, since expandedVorschlagID maybe a string if given from the URL parameters\n  \n              vorschlaege.map(vorschlag =>\n                <VorschlagListeEintrag key={vorschlag.getID()} vorschlag={vorschlag} expandedState={expandedVorschlagID === vorschlag.getID()}\n                  onExpandedStateChange={this.onExpandedStateChange}\n                />)\n            }\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Vorschläge konnten nicht geladen werden!`} onReload={this.getVorschlaege} />\n          </div>\n          : null\n        );\n      }\n    }\n\n\n/** Component specific styles */\nconst styles = theme => ({\n    root: {\n      width: '100%',\n    },\n    customerFilter: {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n    }\n  });\n\n/** PropTypes */\nVorschlagListe.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** @ignore */\n    location: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired,\n}\n\n\n\nexport default withRouter(withStyles(styles)(VorschlagListe));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/VorschlagListeEintrag.js",["197","198","199","200"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\n//import Profil from './Profil';\n//import { withStyles } from '@material-ui/core';\n//import { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\n//import ContextErrorMessage from './dialogs/ContextErrorMessage';\n//import LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\n * \n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\n * \n */\n\nclass VorschlagListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            vorschlag: props.vorschlag,\n            //match: null,\n            profil: null,\n            person: null,\n            profilID: null,\n            personName: null,\n            personVorname: null,\n            showProfil: false,\n            showAnfrageForm: false,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n    /** Handles onChange events of the underlying ExpansionPanel */\n    expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.vorschlag);\n    }\n    \n    //Handles the onClick event of the show profil button\n    showProfilButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showProfil: true\n      });\n    }\n\n    /** Handles the onClick event of the send Anfrage button */\n    sendAnfrageButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showAnfrageForm: true\n      });\n    }\n\n    // API Anbindung um Profil vom Backend zu bekommen \n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPersonByProfil(this.props.vorschlag.getmatch_profil_id())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n                person: null,\n                personName: null,\n                personVorname: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n \n    componentDidMount() {\n      // load initial balance\n      this.getPerson();\n    }\n  \n    /** Lifecycle method, which is called when the component was updated */\n    componentDidUpdate(prevProps) {\n      if ((this.props.show) && (this.props.show !== prevProps.show)) {\n        this.getPerson();\n      }\n    }\n  \n    render(){\n\n          const { classes, expandedState } = this.props;\n          const { person, vorschlag, profil, profilID, personName, personVorname, showProfil, showAnfrageForm } = this.state;\n          console.log(person)\n          return (\n            <div>\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  id={`vorschlag${vorschlag.getID()}accountpanel-header`}\n                >\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\n                    <Grid item>\n                    <Typography variant='body1' className={classes.heading}>{personVorname} {personName}\n                      </Typography>\n                    <Typography variant='body1' className={classes.heading}>Matchquote: {vorschlag.getmatch_quote()}%\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                    \n                    </Grid>\n                    <Grid item xs />\n                    <Grid item>\n                      <Typography variant='body2' color={'textSecondary'}>Mehr sehen</Typography>\n                    </Grid>\n                  </Grid>\n                </AccordionSummary>\n                <AccordionDetails>\n                      <ButtonGroup variant='text' size='small'>\n                        <Button color='primary' onClick={this.showProfilButtonClicked}>\n                          Profil ansehen\n                        </Button>\n                        <Button color='secondary' onClick={this.sendAnfrageButtonClicked}>\n                          Kontaktanfrage\n                        </Button>\n                      </ButtonGroup>\n                    </AccordionDetails>\n              </Accordion>\n            </div>\n          );\n        }\n}\n\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n  button: {\n      margin: theme.spacing(1),\n      },\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n  });\n\n/** PropTypes */\nVorschlagListeEintrag.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  vorschlag: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(VorschlagListeEintrag);","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Profil.js",["201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Button, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport {LernpartnerAPI} from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n\nclass Profil extends Component {\n\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            user: props.user,\n            profil: null,\n            lernvorlieben: null,\n            gruppe: false,\n            tageszeiten: null,\n            tage: null,\n            frequenz: null,\n            lernart: null,\n            gruppengroesse: null,\n            lernort: null,\n            gruppe: null,\n            personVorname: null,\n            personName: null,\n            personSemester: 0,\n            personStudiengang: null,\n            lerngruppe: false,\n            personProfilID: null,\n            personLernfaecher: null,\n            personLernvorliebenID: null,\n            loadingInProgress: false,\n            loadingError: null,\n        };\n    }\n\n\n\n/**   showVorschlagButtonClick = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showVorschlag: true\n      });\n    }**/\n\n\n\n/**\n    // API Anbindung um Profil vom Backend zu bekommen\n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            personSemester: personBO.semester,\n            personStudiengang: personBO.studiengang,\n            personProfilID: personBO.personenprofil,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n            person: null,\n            personName: null,\n            personVorname: null,\n            personSemester: null,\n            personStudiengang: null,\n            personProfilID: null,\n            loadingInProgress: false,\n            error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n*/\n\n     getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.user.id).then(profilBO =>\n      this.setState({\n            profil: profilBO,\n            gruppe: profilBO.gruppe,\n            //profilLernfaecher: profilBO.lernfaecher,\n            profilLernvorliebenID: profilBO.lernvorlieben,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          profil: null,\n          gruppe: null,\n          //profilLernfaecher: null,\n          profilLernvorliebenID: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n     getLernvorlieben = () => {\n    LernpartnerAPI.getAPI().getLernvorliebenPraeferenz(this.props.user.profil).then(lernvorliebenBO =>\n      this.setState({\n            lernvorlieben: lernvorliebenBO,\n            tageszeiten: lernvorliebenBO.tageszeiten,\n            tage: lernvorliebenBO.tage,\n            frequenz: lernvorliebenBO.frequenz,\n            lernart: lernvorliebenBO.lernart,\n            gruppengroesse: lernvorliebenBO.gruppengroesse,\n            lernort: lernvorliebenBO.lernort,\n            loadingInProgress: false,\n            error: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernvorlieben: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n    componentDidMount() {\n        this.getProfil();\n        this.getLernvorlieben();\n  }\n\n\n   /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n    // Use the states customer\n    const { user, profil, lernvorlieben, tageszeiten, tage, frequenz, lernart, lernort, gruppengroesse, gruppe, personLernvorliebenID, loadingInProgress, error} = this.state;\n    console.log(user)\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n            {\n            gruppe ?\n                <>\n                    <b> {user.vorname} {user.name} </b> <br />\n                    <b>Semester: </b> {user.semester} <br />\n                    <b>Studiengang: </b> {user.studiengang} <br />\n                    <b>Alter: </b> {user.alter} <br />\n                    <b>Geschlecht: </b> {user.geschlecht} <br />\n\n                </>\n\n                :\n                <>\n                    <b> Profilinformationen: </b> <br /><br />\n                    Tageszeiten: {tageszeiten}<br />\n                    Tage: {tage}<br />\n                    Frequenz: {frequenz}<br />\n                    Lernart: {lernart}<br />\n                    Lernort: {lernort}\n                </>\n           }\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(1),\n  },\n  content: {\n      margin: theme.spacing(1),\n    },\n  table: {\n      minWidth: 700,\n    },\n  formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n      textAlign: \"left\"\n  },\n\n  laden: {\n    padding: 0\n  },\n  breite: {\n    width: 220\n  }\n});\n\n\n/** PropTypes */\nProfil.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  user: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\n\nexport default withStyles(styles)(Profil);\n\n","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LernfaecherForm.js",["223","224"],"import React, { Component } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { LernpartnerAPI } from '../../api';\nimport VorschlagListe from '../VorschlagListe';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n  \nclass LernfaecherForm extends Component {\n  \n  constructor(props){\n    super(props);\n\n    // initiiere einen leeren state\n    this.state = {\n        profil: null,\n        lernfaecher: [],\n        lernfach: null,\n        showVorschlagListe: false,\n        loadingInProgress: false,\n        error: null\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({lernfach: event.target.value});\n    \n  }\n\n  getProfil = () => {\n    LernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\n    .then(profilBO =>\n        this.setState({\n          profil: profilBO,\n          lernfaecher: profilBO.lernfaecher,\n          loadingInProgress: false,\n          error: null,\n        }))\n        .catch(e =>\n            this.setState({\n              profil: null,\n              lernfaecher: null,\n              loadingInProgress: false,\n              error: e,\n            }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n  }\n\n  getLernfaecher = () => {\n    LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\n    .then(lernfaecherBOs =>\n      this.setState({\n            lernfaecher: lernfaecherBOs,\n            lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung),\n            loadingInProgress: false,\n            error: null\n      }))\n      .catch(e =>\n        this.setState({ // Reset state with error from catch\n          lernfaecher: null,\n          loadingInProgress: false,\n          error: e,\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  //Handles the onClick event of the show profil button\n  bestaetigenButtonClicked = (event) => {\n    this.setState({\n      showVorschlagListe: true\n    });\n  }\n\n  componentDidMount() {\n    \n    this.getLernfaecher();\n  }\n\n  render() {\n    const { classes, currentPerson } = this.props;\n    const { profil, lernfaecher, lernfach, showVorschlagListe, loadingInProgress, error } = this.state;\n    \n    console.log(profil)\n    console.log(showVorschlagListe)\n    return (\n      <div>\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"age-native-simple\">Lernfach auswählen:</InputLabel>\n          <Select\n            native\n            value= {lernfach}\n            onChange={this.handleChange}\n          >\n           {lernfaecher.map(lernfach =>\n            <option key={lernfach.id} value={lernfach.id}>{lernfach.bezeichnung}</option>\n          )};\n           \n          </Select>\n        </FormControl>\n        <Button color=\"primary\" onClick= {this.bestaetigenButtonClicked}>Bestätigen</Button>\n        <VorschlagListe show={showVorschlagListe} currentPerson={currentPerson} lernfach={lernfach} />\n        <LoadingProgress show={loadingInProgress}></LoadingProgress>\n        <ContextErrorMessage error={error} contextErrorMsg = {'Hier ist ein Fehler aufgetreten'} onReload={this.getProfil} />\n      </div>\n    );\n  } \n}\n\nexport default withRouter(withStyles(useStyles)(LernfaecherForm));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListe.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/KonversationListeEintrag.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/Nachricht.js",["225","226","227","228","229","230","231","232"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography, Paper, CardActions, Divider } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport NachrichtBO from '../api/NachrichtBO';\nimport NachrichtenListeEintrag from './NachrichtenListeEintrag';\n//import Divider from \"@material-ui/core/Divider\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n//import SaveIcon from '@material-ui/icons/Save';\n//import Table from '@material-ui/core/Table';\n//import TableBody from '@material-ui/core/TableBody';\n//import TableCell from '@material-ui/core/TableCell';\n//import TableContainer from '@material-ui/core/TableContainer';\n//import TableHead from '@material-ui/core/TableHead';\n//import TableRow from '@material-ui/core/TableRow';\n\n\n/**\n * Es werden alle Nachrichten des aktuell eingeloggten Studenten angezeigt\n * \n * @see See [NachrichtenListeEintrag]](#nachrichtenlisteeintrag)\n * \n * Hierfür werden alle Nachrichten des aktuell eingeloggten Student geladen und in die Componente NachrichtenListeEintrag gemappt\n * \n */\n\n\nclass Nachricht extends Component {\n\n  constructor(props) {\n    super(props);\n\n   // console.log(props);\n   let expandedID = null;\n\n   if (this.props.location.expandNachricht) {\n     expandedID = this.props.location.expandNachricht.getID();\n   }\n\n   // Init an empty state\n   this.state = {\n     nachrichten: '',\n     inhalt: null,\n     konversation_id: null, \n     error: null,\n     loadingInProgress: false,\n     expandedNachrichtID: expandedID,\n   };\n }\n\n //Öffnet das Dialog-Fenster Nachrichtfrom, wenn der Button geklickt wurde\n addButtonClicked = event => {\n    event.stopPropagation();\n    this.setState({\n      showNachrichtForm: true\n    });\n  }\n\n  //Öffnet das Dialog-Fenster Gruppefrom, wenn der Button geklickt wurde\n showGruppeFormButtonClicked = event => {\n  event.stopPropagation();\n  this.setState({\n    showGruppeForm: true\n  });\n}\n \n // API Anbindung um alle Nachrichten vom Backend zu bekommen \n getNachrichten= () => {\n  LernpartnerAPI.getAPI()\n    .getNachrichten(this.props.currentPerson.getID(), this.props.konversation_id.getID())\n    .then((nachrichtBO) =>\n      this.setState({\n        nachricht: nachrichtBO,\n        inhalt: nachrichtBO.inhalt,\n        konversation_id: nachrichtBO.konversation_id,\n        loadingInProgress: false,\n        error: null,\n      })\n    )\n    .catch((e) =>\n      this.setState({\n        nachrichten: null,\n        loadingInProgress: false,\n        loadingError: e,\n      })\n    );\n  this.setState({\n    loadingInProgress: true,\n    loadingError: null,\n  });\n};\n\naddNachricht = () => {\n    let newNachricht = new NachrichtBO(\n      this.state.inhalt,\n      this.props.currentPerson.getID(),\n      this.props.konversation_id.getID()\n    );\n\n    LernpartnerAPI.getAPI()\n      .addNachricht(newNachricht)\n      .then((nachricht) => {\n        this.state.nachricht.push(nachricht);\n        this.setState({ inhalt: \"\" });\n        // Backend call sucessfull\n        // reinit the dialogs state for a new empty nachricht\n      })\n      .catch((e) =>\n        this.setState({\n          updatingInProgress: false, // disable loading indicator\n          updatingError: e, // show error message\n        })\n      );\n\nthis.setState({\n    loadingInProgress: true,\n    error: null\n  });\n}\n\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\ncomponentDidMount() {\n  this.getNachrichten();\n}\n\n//Wird aufgerufen, wenn das Dialog-Fenster Nachrichtform geschlossen wird\nnachrichtFormClosed = nachrichten => {\n    this.getNachrichten();\n    if (nachrichten) {\n      const newNachricht = [...this.state.nachrichten, nachrichten];\n      this.setState({\n        nachrichten: newNachricht,\n        filteredNachrichten: [...newNachricht],\n        showNachrichtForm: false,\n        showGruppeForm: false\n      });\n    } else {\n      this.setState({\n        showNachrichtForm: false\n      });\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({ content: e.target.value });\n  };\n\n  handleClose = () => {\n    this.props.onClose();\n  };\n\n  //nachrichtDeleted = nachricht => {\n   // const newNachricht = this.state.nachrichten.filter(nachrichtFromState => nachrichtFromState.getID() !== nachricht.getID());\n   // this.setState({\n     // nachrichten: newNachricht,\n     // filteredNachrichten: [...newNachricht],\n     // showNachrichtenForm: false\n  //  });}\n\n // Rendert die Componente \n    render() {\n      const { classes, currentPerson } = this.props;\n      const { nachrichten, inhalt, konversation_id, loadingInProgress, error } = this.state;\n      if (nachrichten) {\n        nachrichten.sort((a, b) => {\n          return a.getID() - b.getID();\n        });\n      }\n  \n      return (\n        <div>\n          <h1 class=\"Chatname\">\n            {konversation_id.getName() + \" \" + konversation_id.getVorname()}\n          </h1>\n          {nachrichten\n            ? nachrichten.map((nachricht) => {\n                {\n                  if (nachricht.getCurrentPerson() != currentPerson.getID()) {\n                    return (\n                      <div id=\"empfänger_text\">\n                        <Grid item\n                          xs\n                          className={classes.outerColumn}\n                          style={{ display: \"flex\", alignItems: \"center\", position: \"rigth\" }}\n                        >\n                          <Typography>{nachricht.getInhalt()}</Typography>\n                        </Grid>\n                        <Divider />\n                      </div>\n                    );\n                  } \n                  \n                  else {\n                    return (\n                      <div id=\"sender_text\">\n                        <Grid\n                          item\n                          className={classes.outerColumn}\n                          container\n                          direction=\"row\"\n                          alignItems=\"center\"\n                          justify=\"flex-end\"\n                          position= \"left\"\n                        >\n                          <Typography>{nachricht.getInhalt()}</Typography>\n                        </Grid>\n                        <Divider />\n                      </div>\n                    );\n                  }\n                }\n              })\n            : null}\n  \n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"standard-basic\"\n              label=\"schreibe eine Nachricht\"\n              value={inhalt}\n              onChange={this.handleChange}\n            />\n          </form>\n          <Button className={classes.button_style} variant=\"outlined\" color=\"primary\" onClick={this.handleClose}>\n          <ArrowBackIcon/>\n          </Button>\n          <Button color=\"primary\" variant=\"contained\" onClick={this.addNachricht}>\n            senden \n          </Button>\n\n          <Button variant='contained' color='secondary' onClick={this.showGruppeFormButtonClicked}>\n              Gruppe erstellen \n          </Button>\n\n      <LoadingProgress show={loadingInProgress} />\n      <ContextErrorMessage error={error} contextErrorMsg={`Leider konnten deine Nachrichten nicht geladen werden!`} onReload={this.getNachrichten} />\n      \n      </div>\n      //<NachrichtForm show={NachrichtForm}></NachrichtForm>\n    );\n\n}}\n\nconst styles = (theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"100ch\",\n    },\n  },\n  outerColumn: {\n    margin: 5,\n    padding: 5,\n    height: 50,\n  },\n  button_style: {\n    margin: 5,\n    padding: 5,\n  }\n});\n\n/** PropTypes */\nNachricht.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n  \n\nexport default withStyles(styles)(Nachricht);",["233","234"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/NachrichtenListeEintrag.js",["235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LernpartnerAPI from '../api/LernpartnerAPI'\n//import { withStyles } from '@material-ui/core';\n//import { withRouter } from 'react-router-dom';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TextField from \"@material-ui/core/TextField\";\n//import TableCell from '@material-ui/core/TableCell';\n//import TableRow from '@material-ui/core/TableRow';\n\n//import InputLabel from '@material-ui/core/InputLabel';\n//import MenuItem from '@material-ui/core/MenuItem';\n//import FormControl from '@material-ui/core/FormControl';\n//import Select from '@material-ui/core/Select';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\nimport Nachricht from './Nachricht'\n//import NachrichtForm from './NachrichtForm'\n//import GruppeForm from './GruppeForm'\n\n/**\n * Es wird eine einzelne Nachricht von einer Person  dargestellt\n *\n * \n * Hierfür wird der Inhalt der Nachricht angezeigt \n * \n */\n\nclass NachrichtenListeEintrag extends Component {\n    constructor(props){\n        super(props);\n\n        // initiiere einen leeren state\n        this.state = {\n            nachrichten: [], //Liste mit den IDs aller Nachrichten \n            konversation_ID: null,  \n            inhalt: null, \n            person_id: null,\n            personName: null,\n            personVorname: null,\n            loadingInProgress: false,\n            error: null\n        };\n    }\n\n\n    \n    //open the onClick event of the show Nachricht button\n    showNachrichtButtonClicked = (event) => {\n      event.stopPropagation();\n      this.setState({\n        showNachrichtForm: true\n      });\n    }\n\n     //ruft die getNachrichten() Funktion in den Props auf\n     //getNachrichten = () => {\n      //this.props.getNachrichten(); }\n\n\n      // API Anbindung um Nachricht vom Backend zu bekommen \n    getNachrichten = () => {\n        LernpartnerAPI.getAPI().getNachrichten(this.props.nachrichten)\n        .then(nachrichtBO =>\n            this.setState({\n              nachrichten: nachrichtBO,\n              inhalt: nachrichtBO.inhalt,\n              loadingInProgress: false,\n              error: null,\n            })).then(()=>{\n              this.getNachrichten()\n            })\n            .catch(e =>\n                this.setState({\n                  nachrichten: null,\n                  inhalt: null,\n                  loadingInProgress: false,\n                  error: e,\n                }));\n        this.setState({\n          loadingInProgress: true,\n          error: null\n        });\n      }\n\n      // API Anbindung um Person vom Backend zu bekommen \n    getPerson = () => {\n      LernpartnerAPI.getAPI().getPerson(this.props.nachricht.getmain_person_id())\n      .then(personBO =>\n          this.setState({\n            person: personBO,\n            personName: personBO.name,\n            personVorname: personBO.vorname,\n            loadingInProgress: false,\n            error: null,\n          }))\n          .catch(e =>\n              this.setState({\n                person: null,\n                personName: null,\n                personVorname: null,\n                loadingInProgress: false,\n                error: e,\n              }));\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n   \n\n\n    // Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\n    componentDidMount() {\n        this.getNachrichten();\n      }\n  \n\n      render() {\n        const { classes, currentperson } = this.props;\n        const {nachrichten, inhalt, konversation_ID, personName, personVorname, expandedNachrichtID, loadingInProgress, error} = this.state;\n\n        return(\n          <div>\n                  {\n                      nachrichten ?\n                      <>\n                      {\n                          nachrichten.map(nachricht =>\n                            <NachrichtenListeEintrag key={nachricht.getID()} nachricht={nachrichten} personName={personVorname + \" \" +personVorname} inhalt={inhalt} expandedState={expandedNachrichtID === nachricht.getID()}\n                              onExpandedStateChange={this.onExpandedStateChange}\n                            />)\n                      }\n                      </>\n                      :\n                      <></>\n                  }\n         \n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={error} contextErrorMsg = {'Deine Nachricht konnte nicht geladen werden'} onReload={this.getNachrichten} /> \n          \n        </div>\n        )\n      }\n}\n\nconst styles = (theme) => ({\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n    margin: 10,\n  },\n});\n  \n  /** PropTypes */\n  NachrichtenListeEintrag.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    NachrichtListeEintrag: PropTypes.object.isRequired,\n    show: PropTypes.bool.isRequired\n  }\n  \n  \n  export default withStyles(styles)(NachrichtenListeEintrag);","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/GruppenListe.js",["249","250","251","252","253","254"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/GruppenListeEintrag.js",["255","256","257","258","259","260","261","262","263"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/GruppeVerlassenDialog.js",["264"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/MeinProfilForm.js",["265","266","267","268","269"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\n *\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\n */\n\nclass MeinProfilForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        //initiiere den state\n        this.state = {\n            name: null,\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            vorname: null,\n            vornameValidationFailed: false,\n            vornameEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            tageszeiten: null,\n            tageszeitenValidationFailed: false,\n            tageszeitenEdited: false,\n\n            tage: null,\n            tageValidationFailed: false,\n            tageEdited: false,\n\n            frequenz: null,\n            frequenzValidationFailed: false,\n            frequenzEdited: false,\n\n            lernart: null,\n            lernartValidationFailed: false,\n            lernartEdited: false,\n\n            gruppengroesse: null,\n            gruppengroesseValidationFailed: false,\n            gruppengroesseEdited: false,\n\n            lernort: null,\n            lernortValidationFailed: false,\n            lernortEdited: false,\n\n            lernfaecher: null,\n            lernfaecherValidationFailed: false,\n            lernfaecherEdited: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n\n            profil: this.props.currentProfil,\n            gruppe: 0,\n\n        };\n        // State speichern falls cancel\n        this.baseState = this.state;\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\n        this.handleChangeTage = this.handleChangeTage.bind(this);\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\n        this.handleChangeLernfaecher = this.handleChangeLernfaecher.bind(this);\n\n    }\n\n\n\n    /** Updates the person */\n    updatenPerson = () => {\n        let person = this.props.currentPerson;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n  /** Updates the person */\n  updatenProfil = () => {\n    let profil = this.state.profil;\n    LernpartnerAPI.getAPI().updateProfil(profil.id, this.state.gruppe, this.state.lernfaecher, profil.lernvorlieben_id\n    ).then(profil => {\n        // Backend call sucessfull\n        // reinit the dialogs state for a new empty customer\n        this.setState(this.baseState);\n        this.props.onClose(profil); // call the parent with the customer object from backend\n    }).catch(e =>\n        this.setState({\n            updatingInProgress: false,    // disable loading indicator\n            updatingError: e              // show error message\n        })\n    );\n\n    // set loading to true\n    this.setState({\n        updatingInProgress: true,       // show loading indicator\n        updatingError: null             // disable error message\n  });\n}\n\n  /** Updates the person */\n    updatenLernvorlieben = () => {\n        let lernvorlieben = this.props.lernvorlieben;\n        lernvorlieben.tageszeiten = this.state.tageszeiten\n        lernvorlieben.tage = this.state.tage\n        lernvorlieben.frequenz = this.state.frequenz\n        lernvorlieben.lernart = this.state.lernart\n        lernvorlieben.gruppengroesse = this.state.gruppengroesse\n        lernvorlieben.lernort = this.state.lernort\n\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\n        .then(lernvorlieben => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(lernvorlieben); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator\n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\n\n\t/**\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen der Werte aus der Validierung\n    setStateValueChange(event, error) {\n      this.setState({\n          [event.target.id]: event.target.value,\n          [event.target.id + 'ValidationFailed']: error,\n          [event.target.id + 'Edited']: true\n      });\n  }\n\n    // Validierung der Textfeldaenderungen nur numerische Werte\n    numberValueChange = (event) => {\n        const value = event.target.value;\n        const re = /^[0-9]{1,10}$/;\n\n        let error = false;\n        if (value.trim().length === 0) {\n            error = true;\n        }\n        if (re.test(event.target.value) === false) {\n            error = true;\n        }\n        this.setStateValueChange(event, error);\n    }\n\n    //Setzen des Status, bei schließen des Dialogs\n      handleClose = () => {\n        this.setState(this.baseState);\n        this.props.onClose();\n    }\n\n    handleChangeStudiengang(event) {\n      this.setState({studiengang: event.target.value});\n    }\n\n    handleChangeLerngruppe(event) {\n      this.setState({lerngruppe: event.target.value});\n    }\n\n    handleChangeTageszeiten(event) {\n      this.setState({tageszeiten: event.target.value});\n    }\n\n    handleChangeTage(event) {\n      this.setState({tage: event.target.value});\n    }\n\n    handleChangeFrequenz(event) {\n      this.setState({frequenz: event.target.value});\n    }\n\n    handleChangeLernart(event) {\n      this.setState({lernart: event.target.value});\n    }\n\n    handleChangeGruppengroesse(event) {\n      this.setState({gruppengroesse: event.target.value});\n    }\n\n    handleChangeLernort(event) {\n      this.setState({lernort: event.target.value});\n    }\n\n    handleChangeLernfaecher(event) {\n      this.setState({lernfaecher: event.target.value});\n    }\n\n\n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, currentPerson, lernvorlieben} = this.props;\n        const { profil, name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, tageszeiten,\n          tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\n          lernort, lernortValidationFailed, lernfaecher, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\n\n\n        let title = 'Profil bearbeiten';\n        let header = 'Bitte gib deine neuen Daten ein:';\n\n        return (\n            show ?\n            <Dialog open={show}>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname}\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed}\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\n                    onChange={this.numberValueChange} error={semesterValidationFailed}\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} />\n\n                  <FormControl className={classes.formControl}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter}\n                    onChange={this.numberValueChange} error={alterValidationFailed}\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht}\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed}\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} />\n\n                  <FormControl className={classes.formControl}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n                  <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel >Welche Tageszeit präferierst du? </InputLabel>\n                             <Select required error={tageszeitenValidationFailed} value={tageszeiten}\n                             onChange={this.handleChangeTageszeiten}>\n                                <MenuItem value='1'>Morgens</MenuItem>\n                                <MenuItem value='2'>Mittags</MenuItem>\n                                <MenuItem value='3'>Abends</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\n                             <Select required error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\n                             <Select required error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/> \n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\n                             <Select required error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\n                                <MenuItem value='1'>Visuell</MenuItem>\n                                <MenuItem value='2'>Auditiv</MenuItem>\n                                <MenuItem value='3'>Motorisch</MenuItem>\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\n                             <Select required error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\n                             <Select required error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\n                                <MenuItem value='1'>Remote</MenuItem>\n                                <MenuItem value='2'>Hochschule</MenuItem>\n                                <MenuItem value='3'>Bibliothek</MenuItem>\n                                <MenuItem value='4'>Cafe</MenuItem>\n                            </Select>\n                   </FormControl>\n                   <br/>\n                   <FormControl className={classes.formControl}>\n                            <InputLabel>Was willst du lernen?</InputLabel>\n                             <Select required error={lernfaecherValidationFailed} value={lernfaecher} onChange={this.handleChangeLernfaecher}>\n                                <MenuItem value='1'>Software Entwicklung</MenuItem>\n                                <MenuItem value='2'>Data Science</MenuItem>\n                                <MenuItem value='3'>Führungsorientiertes Rechnungswesen</MenuItem>\n                                <MenuItem value='4'>Medienrecht</MenuItem>\n                                <MenuItem value='5'>Crossmedia-Konzeption</MenuItem>\n                                <MenuItem value='6'>Web-Technologie</MenuItem>\n                                <MenuItem value='7'>Datenbanken</MenuItem>\n                                <MenuItem value='8'>IT-Security</MenuItem>\n                            </Select>\n                   </FormControl>\n\n\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\n                      onReload={this.updatenPerson} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={ () => {this.updatenPerson(); this.updatenLernvorlieben();}} color='primary'>\n                          Änderungen abschließen\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n            : null\n        );\n      }\n\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n    margin: theme.spacing(2)\n    \n  }\n  \n  \n});\n\n/** PropTypes */\nMeinProfilForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/**\n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MeinProfilForm);","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernfachBO.js",[],{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","replacedBy":"273"},{"ruleId":"274","severity":1,"message":"275","line":1,"column":17,"nodeType":"276","messageId":"277","endLine":1,"endColumn":26},{"ruleId":"274","severity":1,"message":"278","line":13,"column":8,"nodeType":"276","messageId":"277","endLine":13,"endColumn":25},{"ruleId":"274","severity":1,"message":"279","line":19,"column":8,"nodeType":"276","messageId":"277","endLine":19,"endColumn":14},{"ruleId":"274","severity":1,"message":"280","line":2,"column":41,"nodeType":"276","messageId":"277","endLine":2,"endColumn":45},{"ruleId":"281","severity":1,"message":"282","line":596,"column":9,"nodeType":"283","messageId":"284","endLine":603,"endColumn":10},{"ruleId":"274","severity":1,"message":"285","line":3,"column":123,"nodeType":"276","messageId":"277","endLine":3,"endColumn":127},{"ruleId":"274","severity":1,"message":"286","line":168,"column":32,"nodeType":"276","messageId":"277","endLine":168,"endColumn":45},{"ruleId":"274","severity":1,"message":"287","line":3,"column":34,"nodeType":"276","messageId":"277","endLine":3,"endColumn":48},{"ruleId":"274","severity":1,"message":"288","line":3,"column":50,"nodeType":"276","messageId":"277","endLine":3,"endColumn":55},{"ruleId":"274","severity":1,"message":"289","line":3,"column":57,"nodeType":"276","messageId":"277","endLine":3,"endColumn":66},{"ruleId":"274","severity":1,"message":"290","line":3,"column":68,"nodeType":"276","messageId":"277","endLine":3,"endColumn":77},{"ruleId":"274","severity":1,"message":"291","line":3,"column":79,"nodeType":"276","messageId":"277","endLine":3,"endColumn":84},{"ruleId":"274","severity":1,"message":"292","line":3,"column":86,"nodeType":"276","messageId":"277","endLine":3,"endColumn":94},{"ruleId":"274","severity":1,"message":"293","line":3,"column":96,"nodeType":"276","messageId":"277","endLine":3,"endColumn":105},{"ruleId":"274","severity":1,"message":"280","line":3,"column":107,"nodeType":"276","messageId":"277","endLine":3,"endColumn":111},{"ruleId":"274","severity":1,"message":"294","line":3,"column":113,"nodeType":"276","messageId":"277","endLine":3,"endColumn":117},{"ruleId":"274","severity":1,"message":"295","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":27},{"ruleId":"274","severity":1,"message":"296","line":10,"column":8,"nodeType":"276","messageId":"277","endLine":10,"endColumn":23},{"ruleId":"274","severity":1,"message":"297","line":215,"column":41,"nodeType":"276","messageId":"277","endLine":215,"endColumn":53},{"ruleId":"274","severity":1,"message":"298","line":215,"column":130,"nodeType":"276","messageId":"277","endLine":215,"endColumn":147},{"ruleId":"274","severity":1,"message":"299","line":215,"column":149,"nodeType":"276","messageId":"277","endLine":215,"endColumn":157},{"ruleId":"274","severity":1,"message":"300","line":215,"column":159,"nodeType":"276","messageId":"277","endLine":215,"endColumn":180},{"ruleId":"274","severity":1,"message":"301","line":215,"column":263,"nodeType":"276","messageId":"277","endLine":215,"endColumn":280},{"ruleId":"274","severity":1,"message":"302","line":215,"column":282,"nodeType":"276","messageId":"277","endLine":215,"endColumn":287},{"ruleId":"274","severity":1,"message":"303","line":4,"column":30,"nodeType":"276","messageId":"277","endLine":4,"endColumn":39},{"ruleId":"274","severity":1,"message":"304","line":4,"column":41,"nodeType":"276","messageId":"277","endLine":4,"endColumn":55},{"ruleId":"274","severity":1,"message":"305","line":4,"column":57,"nodeType":"276","messageId":"277","endLine":4,"endColumn":67},{"ruleId":"274","severity":1,"message":"294","line":4,"column":69,"nodeType":"276","messageId":"277","endLine":4,"endColumn":73},{"ruleId":"274","severity":1,"message":"306","line":4,"column":75,"nodeType":"276","messageId":"277","endLine":4,"endColumn":85},{"ruleId":"274","severity":1,"message":"307","line":105,"column":38,"nodeType":"276","messageId":"277","endLine":105,"endColumn":44},{"ruleId":"274","severity":1,"message":"308","line":105,"column":46,"nodeType":"276","messageId":"277","endLine":105,"endColumn":54},{"ruleId":"274","severity":1,"message":"309","line":105,"column":83,"nodeType":"276","messageId":"277","endLine":105,"endColumn":93},{"ruleId":"274","severity":1,"message":"310","line":105,"column":95,"nodeType":"276","messageId":"277","endLine":105,"endColumn":110},{"ruleId":"274","severity":1,"message":"306","line":3,"column":22,"nodeType":"276","messageId":"277","endLine":3,"endColumn":32},{"ruleId":"274","severity":1,"message":"311","line":3,"column":34,"nodeType":"276","messageId":"277","endLine":3,"endColumn":40},{"ruleId":"274","severity":1,"message":"287","line":3,"column":42,"nodeType":"276","messageId":"277","endLine":3,"endColumn":56},{"ruleId":"274","severity":1,"message":"288","line":3,"column":58,"nodeType":"276","messageId":"277","endLine":3,"endColumn":63},{"ruleId":"274","severity":1,"message":"289","line":3,"column":65,"nodeType":"276","messageId":"277","endLine":3,"endColumn":74},{"ruleId":"274","severity":1,"message":"290","line":3,"column":76,"nodeType":"276","messageId":"277","endLine":3,"endColumn":85},{"ruleId":"274","severity":1,"message":"291","line":3,"column":87,"nodeType":"276","messageId":"277","endLine":3,"endColumn":92},{"ruleId":"274","severity":1,"message":"292","line":3,"column":94,"nodeType":"276","messageId":"277","endLine":3,"endColumn":102},{"ruleId":"274","severity":1,"message":"293","line":3,"column":104,"nodeType":"276","messageId":"277","endLine":3,"endColumn":113},{"ruleId":"274","severity":1,"message":"280","line":3,"column":115,"nodeType":"276","messageId":"277","endLine":3,"endColumn":119},{"ruleId":"274","severity":1,"message":"294","line":3,"column":121,"nodeType":"276","messageId":"277","endLine":3,"endColumn":125},{"ruleId":"274","severity":1,"message":"312","line":4,"column":10,"nodeType":"276","messageId":"277","endLine":4,"endColumn":20},{"ruleId":"274","severity":1,"message":"295","line":6,"column":8,"nodeType":"276","messageId":"277","endLine":6,"endColumn":27},{"ruleId":"274","severity":1,"message":"296","line":7,"column":8,"nodeType":"276","messageId":"277","endLine":7,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":27,"column":13,"nodeType":"315","messageId":"284","endLine":27,"endColumn":19},{"ruleId":"274","severity":1,"message":"316","line":150,"column":22,"nodeType":"276","messageId":"277","endLine":150,"endColumn":26},{"ruleId":"274","severity":1,"message":"307","line":152,"column":19,"nodeType":"276","messageId":"277","endLine":152,"endColumn":25},{"ruleId":"274","severity":1,"message":"317","line":152,"column":27,"nodeType":"276","messageId":"277","endLine":152,"endColumn":40},{"ruleId":"274","severity":1,"message":"318","line":152,"column":89,"nodeType":"276","messageId":"277","endLine":152,"endColumn":103},{"ruleId":"274","severity":1,"message":"300","line":152,"column":113,"nodeType":"276","messageId":"277","endLine":152,"endColumn":134},{"ruleId":"274","severity":1,"message":"301","line":152,"column":136,"nodeType":"276","messageId":"277","endLine":152,"endColumn":153},{"ruleId":"274","severity":1,"message":"302","line":152,"column":155,"nodeType":"276","messageId":"277","endLine":152,"endColumn":160},{"ruleId":"274","severity":1,"message":"319","line":5,"column":8,"nodeType":"276","messageId":"277","endLine":5,"endColumn":22},{"ruleId":"274","severity":1,"message":"320","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":20},{"ruleId":"274","severity":1,"message":"304","line":4,"column":41,"nodeType":"276","messageId":"277","endLine":4,"endColumn":55},{"ruleId":"274","severity":1,"message":"305","line":4,"column":57,"nodeType":"276","messageId":"277","endLine":4,"endColumn":67},{"ruleId":"274","severity":1,"message":"291","line":4,"column":87,"nodeType":"276","messageId":"277","endLine":4,"endColumn":92},{"ruleId":"274","severity":1,"message":"321","line":4,"column":94,"nodeType":"276","messageId":"277","endLine":4,"endColumn":105},{"ruleId":"274","severity":1,"message":"312","line":5,"column":10,"nodeType":"276","messageId":"277","endLine":5,"endColumn":20},{"ruleId":"274","severity":1,"message":"322","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":31},{"ruleId":"323","severity":1,"message":"324","line":180,"column":17,"nodeType":"325","messageId":"326","endLine":214,"endColumn":18},{"ruleId":"327","severity":1,"message":"328","line":181,"column":52,"nodeType":"329","messageId":"284","endLine":181,"endColumn":54},{"ruleId":"270","replacedBy":"330"},{"ruleId":"272","replacedBy":"331"},{"ruleId":"274","severity":1,"message":"306","line":6,"column":22,"nodeType":"276","messageId":"277","endLine":6,"endColumn":32},{"ruleId":"274","severity":1,"message":"332","line":6,"column":34,"nodeType":"276","messageId":"277","endLine":6,"endColumn":43},{"ruleId":"274","severity":1,"message":"333","line":6,"column":45,"nodeType":"276","messageId":"277","endLine":6,"endColumn":61},{"ruleId":"274","severity":1,"message":"334","line":6,"column":63,"nodeType":"276","messageId":"277","endLine":6,"endColumn":79},{"ruleId":"274","severity":1,"message":"294","line":6,"column":81,"nodeType":"276","messageId":"277","endLine":6,"endColumn":85},{"ruleId":"274","severity":1,"message":"311","line":7,"column":10,"nodeType":"276","messageId":"277","endLine":7,"endColumn":16},{"ruleId":"274","severity":1,"message":"335","line":7,"column":18,"nodeType":"276","messageId":"277","endLine":7,"endColumn":29},{"ruleId":"274","severity":1,"message":"336","line":8,"column":8,"nodeType":"276","messageId":"277","endLine":8,"endColumn":22},{"ruleId":"274","severity":1,"message":"303","line":9,"column":8,"nodeType":"276","messageId":"277","endLine":9,"endColumn":17},{"ruleId":"274","severity":1,"message":"337","line":20,"column":8,"nodeType":"276","messageId":"277","endLine":20,"endColumn":17},{"ruleId":"274","severity":1,"message":"338","line":123,"column":17,"nodeType":"276","messageId":"277","endLine":123,"endColumn":24},{"ruleId":"274","severity":1,"message":"339","line":123,"column":26,"nodeType":"276","messageId":"277","endLine":123,"endColumn":39},{"ruleId":"274","severity":1,"message":"340","line":124,"column":37,"nodeType":"276","messageId":"277","endLine":124,"endColumn":52},{"ruleId":"274","severity":1,"message":"341","line":124,"column":54,"nodeType":"276","messageId":"277","endLine":124,"endColumn":64},{"ruleId":"274","severity":1,"message":"311","line":4,"column":22,"nodeType":"276","messageId":"277","endLine":4,"endColumn":28},{"ruleId":"274","severity":1,"message":"303","line":4,"column":30,"nodeType":"276","messageId":"277","endLine":4,"endColumn":39},{"ruleId":"274","severity":1,"message":"304","line":4,"column":41,"nodeType":"276","messageId":"277","endLine":4,"endColumn":55},{"ruleId":"274","severity":1,"message":"305","line":4,"column":57,"nodeType":"276","messageId":"277","endLine":4,"endColumn":67},{"ruleId":"274","severity":1,"message":"291","line":16,"column":8,"nodeType":"276","messageId":"277","endLine":16,"endColumn":13},{"ruleId":"274","severity":1,"message":"342","line":116,"column":30,"nodeType":"276","messageId":"277","endLine":116,"endColumn":38},{"ruleId":"274","severity":1,"message":"312","line":5,"column":10,"nodeType":"276","messageId":"277","endLine":5,"endColumn":20},{"ruleId":"274","severity":1,"message":"343","line":6,"column":10,"nodeType":"276","messageId":"277","endLine":6,"endColumn":20},{"ruleId":"274","severity":1,"message":"335","line":7,"column":18,"nodeType":"276","messageId":"277","endLine":7,"endColumn":29},{"ruleId":"274","severity":1,"message":"295","line":13,"column":8,"nodeType":"276","messageId":"277","endLine":13,"endColumn":27},{"ruleId":"274","severity":1,"message":"296","line":14,"column":8,"nodeType":"276","messageId":"277","endLine":14,"endColumn":23},{"ruleId":"274","severity":1,"message":"338","line":99,"column":19,"nodeType":"276","messageId":"277","endLine":99,"endColumn":26},{"ruleId":"274","severity":1,"message":"344","line":100,"column":31,"nodeType":"276","messageId":"277","endLine":100,"endColumn":41},{"ruleId":"274","severity":1,"message":"308","line":100,"column":43,"nodeType":"276","messageId":"277","endLine":100,"endColumn":51},{"ruleId":"274","severity":1,"message":"309","line":100,"column":70,"nodeType":"276","messageId":"277","endLine":100,"endColumn":80},{"ruleId":"274","severity":1,"message":"345","line":53,"column":39,"nodeType":"276","messageId":"277","endLine":53,"endColumn":51},{"ruleId":"274","severity":1,"message":"285","line":3,"column":123,"nodeType":"276","messageId":"277","endLine":3,"endColumn":127},{"ruleId":"274","severity":1,"message":"312","line":11,"column":10,"nodeType":"276","messageId":"277","endLine":11,"endColumn":20},{"ruleId":"274","severity":1,"message":"286","line":289,"column":32,"nodeType":"276","messageId":"277","endLine":289,"endColumn":45},{"ruleId":"274","severity":1,"message":"317","line":289,"column":47,"nodeType":"276","messageId":"277","endLine":289,"endColumn":60},{"ruleId":"274","severity":1,"message":"307","line":290,"column":17,"nodeType":"276","messageId":"277","endLine":290,"endColumn":23},"no-native-reassign",["346"],"no-negated-in-lhs",["347"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'RegistrierungForm' is defined but never used.","'Profil' is defined but never used.","'Link' is defined but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","unexpected","'Card' is defined but never used.","'currentPerson' is assigned a value but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Grid' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","'personProfil' is assigned a value but never used.","'personLernfaecher' is assigned a value but never used.","'lernfach' is assigned a value but never used.","'personLernvorliebenID' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'profil' is assigned a value but never used.","'profilID' is assigned a value but never used.","'showProfil' is assigned a value but never used.","'showAnfrageForm' is assigned a value but never used.","'Button' is defined but never used.","'withRouter' is defined but never used.","no-dupe-keys","Duplicate key 'gruppe'.","ObjectExpression","'show' is assigned a value but never used.","'lernvorlieben' is assigned a value but never used.","'gruppengroesse' is assigned a value but never used.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","'CardActions' is defined but never used.","'NachrichtenListeEintrag' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression",["346"],["347"],"'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'ButtonGroup' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Nachricht' is defined but never used.","'classes' is assigned a value but never used.","'currentperson' is assigned a value but never used.","'konversation_ID' is assigned a value but never used.","'personName' is assigned a value but never used.","'personID' is assigned a value but never used.","'withStyles' is defined but never used.","'gruppeName' is assigned a value but never used.","'lerngruppeID' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]