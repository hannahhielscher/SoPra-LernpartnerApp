[{"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js":"1","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js":"2","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js":"3","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js":"4","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js":"5","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js":"6","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js":"7","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js":"8","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js":"9","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js":"10","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js":"11","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js":"12","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js":"13","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js":"14","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js":"15","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js":"16","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js":"17","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js":"18","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js":"19","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js":"20","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js":"21","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js":"22","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js":"23","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js":"24"},{"size":146,"mtime":1620807576504,"results":"25","hashOfConfig":"26"},{"size":5511,"mtime":1624100033835,"results":"27","hashOfConfig":"26"},{"size":579,"mtime":1624086408653,"results":"28","hashOfConfig":"26"},{"size":1706,"mtime":1623434614996,"results":"29","hashOfConfig":"26"},{"size":862,"mtime":1622112082063,"results":"30","hashOfConfig":"26"},{"size":1816,"mtime":1623433312638,"results":"31","hashOfConfig":"26"},{"size":844,"mtime":1622112636780,"results":"32","hashOfConfig":"26"},{"size":2113,"mtime":1622112193821,"results":"33","hashOfConfig":"26"},{"size":9939,"mtime":1624044042366,"results":"34","hashOfConfig":"26"},{"size":1541,"mtime":1624085304770,"results":"35","hashOfConfig":"26"},{"size":3271,"mtime":1622538283974,"results":"36","hashOfConfig":"26"},{"size":329,"mtime":1622114445485,"results":"37","hashOfConfig":"26"},{"size":1348,"mtime":1623484557530,"results":"38","hashOfConfig":"26"},{"size":2597,"mtime":1623433111029,"results":"39","hashOfConfig":"26"},{"size":38284,"mtime":1624043753964,"results":"40","hashOfConfig":"26"},{"size":761,"mtime":1621758115765,"results":"41","hashOfConfig":"26"},{"size":375,"mtime":1622112904258,"results":"42","hashOfConfig":"26"},{"size":1228,"mtime":1624043821584,"results":"43","hashOfConfig":"26"},{"size":1040,"mtime":1624043753965,"results":"44","hashOfConfig":"26"},{"size":1003,"mtime":1623484557530,"results":"45","hashOfConfig":"26"},{"size":1315,"mtime":1623938783709,"results":"46","hashOfConfig":"26"},{"size":1078,"mtime":1622969157843,"results":"47","hashOfConfig":"26"},{"size":1253,"mtime":1623433111030,"results":"48","hashOfConfig":"26"},{"size":2140,"mtime":1623484846947,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"cx8xr9",{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/index.js",[],["102","103"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/App.js",["104","105","106"],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/firebaseconfig.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/Theme.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/LoadingProgress.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/SignIn.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/pages/About.js",["107"],"import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n */\n\n\nfunction About() {\n\n    const classes = useStyles();\n  \n    return (\n      <Paper elevation={0} className={classes.root}>\n        <div className={classes.content}>\n          <Typography variant='h6'>\n            App zum AUffinden von Lernpartnern\n          </Typography>\n          <Typography variant='body2'>\n            Â© Hochschule der Medien 2020, all rights reserved.\n          </Typography>\n        </div>\n      </Paper>\n    )\n  }\n  \n  export default About;","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ContextErrorMessage.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/RegistrierungForm.js",["108","109","110"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    } from '@material-ui/core';\n\nimport { LernpartnerAPI } from '../../api';\nimport { withRouter } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass RegistrierungForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Init the state\n        this.state = {\n            name: '',\n            nameValidationFailed: false,\n            nameEdited: false,\n\n            firstName: null,\n            firstNameValidationFailed: false,\n            firstNameEdited: false,\n\n            alter: null,\n            alterValidationFailed: false,\n            alterEdited: false,\n\n            geschlecht: null,\n            geschlechtValidationFailed: false,\n            geschlechtEdited: false,\n\n            semester: null,\n            semesterValidationFailed: false,\n            semesterEdited: false,\n\n            studiengang: null,\n            studiengangValidationFailed: false,\n            studiengangEdited: false,\n\n            lerngruppe: null,\n            lerngruppeValidationFailed: false,\n            lerngruppeEdited: false,\n\n            addingError: null,\n            addingInProgress: false,\n\n            updatingError: null,\n            updatingInProgress: false,\n            \n        };\n        // save this state for canceling\n        this.baseState = this.state;\n        }\n    \n\n    /** Adds the customer */\n    registrieren = () => {\n        let person = this.props.person;\n        person.name = this.state.name\n        person.vorname = this.state.vorname\n        person.semester = this.state.semester\n        person.studiengang = this.state.studiengang\n        person.alter = this.state.alter\n        person.geschlecht = this.state.geschlecht\n        person.lerngruppe = this.state.lerngruppe\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\n          this.state.lerngruppe).then(person => {\n            // Backend call sucessfull\n            // reinit the dialogs state for a new empty customer\n            this.setState(this.baseState);\n            this.props.onClose(person); // call the parent with the customer object from backend\n        }).catch(e =>\n            this.setState({\n                updatingInProgress: false,    // disable loading indicator \n                updatingError: e              // show error message\n            })\n        );\n\n        // set loading to true\n        this.setState({\n            updatingInProgress: true,       // show loading indicator\n            updatingError: null             // disable error message\n      });\n    }\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t \n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n    */\n   /** Handles value changes of the forms textfields and validates them */\n    textFieldValueChange = (event) => {\n        const value = event.target.value;\n\n        let error = false;\n        if (value.trim().length === 0) {\n        error = true;\n        }\n\n        this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n        });\n    }\n\n    //Setzen des Status, bei schlieÃen des Dialogs\n    handleClose = () => {\n      this.setState(this.baseState);\n      this.props.onClose(null);\n  }\n\n  handleChange(change, event) {\n    var toChange = this.state.form;\n    toChange[change] = event.target.value;\n    this.setState({form: toChange});\n  }\n\n\t/** Renders the sign in page, if user objext is null */\n\t/** Renders the component */\n    render() {\n        const { classes, show, person } = this.props;\n        const { name, nameValidationFailed, firstName, firstNameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\n          updatingInProgress, updatingError} = this.state;\n    \n        let title = 'Registriere dich jetzt!';\n        let header = 'Bitte gib deine Daten ein:';\n    \n        return (\n            <Dialog>\n              <DialogTitle id='form-dialog-title'>{title}\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\n                      <CloseIcon />\n                  </IconButton>\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  {header}\n                </DialogContentText>\n                <form className={classes.root} noValidate autoComplete='off'>\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='firstName' label='Vorname:' value={firstName} \n                    onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                    helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n                  \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \n                    onChange={this.textFieldValueChange} error={semesterValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \n                    \n                  <FormControl className={classes.formControl} value = {studiengang}>\n                            <InputLabel>Studiengang</InputLabel>\n                             <Select required onChange={this.handleChange} error={studiengangValidationFailed}>\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\n                            </Select>\n                   </FormControl>\n                   \n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \n                    onChange={this.textFieldValueChange} error={alterValidationFailed} \n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\n\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \n                  \n                  <FormControl className={classes.formControl} value = {lerngruppe}>\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\n                             <Select required onChange={this.handleChange} error={lerngruppeValidationFailed}>\n                                <MenuItem value='1'>Ja!</MenuItem>\n                                <MenuItem value='0'>Nein!</MenuItem>\n                            </Select>\n                   </FormControl>\n\n                </form>\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\n                {\n\n                  <ContextErrorMessage error={updatingError}\n                      contextErrorMsg={`DU konntest leider nicht registriert werden :/`}\n                      onReload={this.registrieren} />\n\n                }\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color='secondary'>\n                            Abbrechen\n                </Button>\n                {\n                    <Button disabled={nameValidationFailed || firstNameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\n                          onClick={this.registrieren} color='primary'>\n                          Jetzt registrieren\n                    </Button>\n                }\n              </DialogActions>\n            </Dialog>\n        \n        );\n      }\n    \n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nRegistrierungForm.propTypes = {\n\t/** @ignore */\n  classes: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n  onClose: PropTypes.func.isRequired,\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(RegistrierungForm));","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/layout/Header.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/components/dialogs/ProfileDropDown.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/index.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/VorschlagBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/PersonBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernpartnerAPI.js",["111"],"import ProfilBO from './ProfilBO';\nimport PersonBO from './PersonBO';\nimport VorschlagBO from './VorschlagBO';\nimport LerngruppeBO from './LerngruppeBO';\nimport LernvorliebenBO from './LernvorliebenBO';\nimport NachrichtBO from './NachrichtBO';\nimport KonversationBO from './KonversationBO'\nimport TeilnahmeChatBO from './TeilnahmeChatBO';\nimport TeilnahmeGruppeBO from './TeilnahmeGruppeBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n */\nexport default class LernpartnerAPI {\n\n        // Singelton instance\n        static #api = null;\n\n        #lernappServerBaseURL = '/lernApp'\n        /** \n         * Get the Singelton instance \n         * \n         * @public\n         */\n        static getAPI() {\n          if (this.#api == null) {\n            this.#api = new LernpartnerAPI();\n          }\n          return this.#api;\n        }\n\n        #fetchAdvanced = (url, init) => fetch(url, init)\n          .then(res => {\n            // The Promise returned from fetch() wonât reject on HTTP error status even if the response is an HTTP 404 or 500. \n            if (!res.ok) {\n              throw Error(`${res.status} ${res.statusText}`);\n            }\n            return res.json();\n          }\n          )\n\n        //Person related\n        #getPersonenURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #addPersonURL = () => `${this.#lernappServerBaseURL}/personen`;\n        #getPersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #updatePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #deletePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\n        #searchPersonURL = (personName) => `${this.#lernappServerBaseURL}/personen-by-name/${personName}`;\n        #getPersonByGoogleIDURL = (google_user_id) => `${this.#lernappServerBaseURL}/personbygoogle/${google_user_id}`;\n        \n        //Gruppenbezogen\n        #getLerngruppenURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #addLerngruppeURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\n        #getLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        #updateLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        #deleteLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\n        \n        //Profilbezogen\n        #getProfileURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #addProfilURL = () => `${this.#lernappServerBaseURL}/profile`;\n        #getProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n        #updateProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n        //#getLernfaecherByProfilURL = (profilID) => `${this.#lernappServerBaseURL}/profil/${profilID}`;\n        #deleteProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\n\n        //Lernvorliebenbezogen\n        #getLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        //#getLernvorliebenByProfilURL = () => `${this.#lernappServerBaseURL}/lervorlieben/${profilid}`;\n        #addLernvorliebenURL = () => `${this.#lernappServerBaseURL}/lernvorlieben`;\n        #updateLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n        #deleteLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\n\n        //Vorschlagbezogen\n        #getVorschlaegeURL = (mainpersonID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}`;\n        //#getSelectedLernfach = () => `${this.#lernappServerBaseURL}`\n        #getVorschlaegeByPersonByLernfachURL = (mainpersonID, lernfachID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}/${lernfachID}`;\n\n        //Nachrichtenbezogen\n        #getNachrichtenURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/konversation/${id}`;\n        #addNachrichtURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\n        #getNachrichtenByKonversationByPersonURL = (konversationID, personID) => `${this.#lernappServerBaseURL}/nachricht-by-konversation-by-person/${konversationID}/${personID}`;\n        #deleteNachrichtURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/${id}`;\n        #deleteNachrichtenByKonversationURL = (konversationID) => `${this.#lernappServerBaseURL}/nachrichten/${konversationID}`;\n        #getNachrichtenByPersonURL = (personID) => `${this.#lernappServerBaseURL}/nachrichten/${personID}`;\n        #getNachrichtenByInhaltURL= (inhalt) => `${this.#lernappServerBaseURL}/nachrichten/${inhalt}`;\n        \n        //Konversationbezogen\n        #getKonversationenURL = () => `${this.#lernappServerBaseURL}/konversationen`;\n        #getKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #getKonversationenByPersonURL = (personid) => `${this.#lernappServerBaseURL}/konversationen/${personid}`;\n        #setKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #addKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #deleteKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\n        #getKonversationByNameURL = (name) => `${this.#lernappServerBaseURL}/konversationen/${name}`;\n\n        //TeilnahmeChatbezogen\n        #getTeilnahmeChatURL = () => `${this.#lernappServerBaseURL}/teilnahmeChat`;\n        #getTeilnahmeChatByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #setTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #addTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #deleteTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\n        #getTeilnahmeChatByStudentIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-student-id/${id}`;\n        #getTeilnahmeChatByKonversationIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-konversation-id/${id}`;\n\n        //TeilnahmeGruppebezogen\n        #getTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #addTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\n        #getTeilnahmeGruppeByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\n\n        //Personenbezogene\n        /**\n           * Gibt alle Personen als BO zurÃ¼ck\n           * \n           * @public\n           */\n        getPersonen() {\n          return this.#fetchAdvanced(this.#getPersonenURL()).then((responseJSON) => {\n            let personenBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(customerBOs);\n            return new Promise(function (resolve) {\n              resolve(personenBOs);\n            })           \n          })\n        }\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addPerson(personBO) {\n          return this.#fetchAdvanced(this.#addPersonURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(personBO)\n          }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurÃ¼ck\n         * \n         * @param {Number} personID to be retrieved\n         * @public\n         */\n        getPerson(personID) {\n          return this.#fetchAdvanced(this.#getPersonURL(personID)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(responsePersonBO);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Updated eine Person und gibt Promise zurÃ¼ck, resolves as PersonBO.\n         * \n         * @param {PersonBO} personBO to be updated\n         * @public\n         */\n        updatePerson(personBO) {\n          return this.#fetchAdvanced(this.#updatePersonURL(personBO.getID()), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(personBO)\n          }).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(PersonBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt eine Person mit einer bestimmten ID als BO zurÃ¼ck\n         * \n         * @param {Number} google_user_id to be retrieved\n         * @public\n         */\n        getPersonByGoogleID(google_user_id) {\n          return this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON, but only need one object\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(responsePersonBO);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n \n        /**\n         * Gibt Promise zurÃ¼ck\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        deletePerson(personID) {\n          return this.#fetchAdvanced(this.#deletePersonURL(personID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of PersonBOs.fromJSON\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(responsePersonBO);\n            })\n          })\n        }\n\n        /**\n         * Gibt Promise zurÃ¼ck\n         * \n         * @param {Number} personID to be deleted\n         * @public\n         */\n        searchPerson(personName) {\n          return this.#fetchAdvanced(this.#searchPersonURL(personName)).then((responseJSON) => {\n            let personBOs = PersonBO.fromJSON(responseJSON);\n            // console.info(personBOs);\n            return new Promise(function (resolve) {\n              resolve(personBOs);\n            })\n          })\n        }\n        //Lerngruppenbezogene\n        /**\n           * Gibt alle Lerngruppen als BO zurÃ¼ck\n           * \n           * @public\n           */\n          getLerngruppen() {\n            return this.#fetchAdvanced(this.#getLerngruppenURL()).then((responseJSON) => {\n              let lerngruppenBOs = LerngruppeBO.fromJSON(responseJSON);\n              // console.info(customerBOs);\n              return new Promise(function (resolve) {\n                resolve(lerngruppenBOs);\n              })           \n            })\n          }\n          /**\n           * Adds a lerngruppe and returns a Promise, which resolves to a new LerngruppeBO object\n           *  \n           * @param {LerngruppeBO} lerngruppeBO to be added. The ID of the new lerngruppe is set by the backend\n           * @public\n           */\n          addLerngruppe(lerngruppeBO) {\n            return this.#fetchAdvanced(this.#addLerngruppeURL(), {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              },\n              body: JSON.stringify(lerngruppeBO)\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON, but only need one object\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n  \n          /**\n           * Gibt eine Lerngruppe mit einer bestimmten ID als BO zurÃ¼ck\n           * \n           * @param {Number} lerngruppeID to be retrieved\n           * @public\n           */\n          getLerngruppe(lerngruppeID) {\n            return this.#fetchAdvanced(this.#getLerngruppeURL(lerngruppeID)).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON, but only need one object\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(responseLerngruppeBO);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n  \n          /**\n           * Updated eine Lerngruppe und gibt Promise zurÃ¼ck, resolves as LerngruppeBO.\n           * \n           * @param {LerngruppeBO} lerngruppeBO to be updated\n           * @public\n           */\n          updateLerngruppe(lerngruppeBO) {\n            return this.#fetchAdvanced(this.#updateLerngruppeURL(lerngruppeBO.getID()), {\n              method: 'PUT',\n              headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n              },\n              body: JSON.stringify(lerngruppeBO)\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n   \n          /**\n           * Gibt Promise zurÃ¼ck\n           * \n           * @param {Number} lerngruppeID to be deleted\n           * @public\n           */\n          deleteLerngruppe(lerngruppeID) {\n            return this.#fetchAdvanced(this.#deleteLerngruppeURL(lerngruppeID), {\n              method: 'DELETE'\n            }).then((responseJSON) => {\n              // We always get an array of LerngruppeBOs.fromJSON\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\n              // console.info(LerngruppeBOs);\n              return new Promise(function (resolve) {\n                resolve(responseLerngruppeBO);\n              })\n            })\n          }\n\n\n        //Profilbezogene\n        /**\n           * Gibt alle Profile als BO zurÃ¼ck\n           * \n           * @public\n           */\n          getProfile() {\n            return this.#fetchAdvanced(this.#getProfileURL()).then((responseJSON) => {\n              let profileBOs = ProfilBO.fromJSON(responseJSON);\n              // console.info(profilBOs);\n              return new Promise(function (resolve) {\n                resolve(profileBOs);\n              })           \n            })\n          }\n        /**\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\n         *  \n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\n         * @public\n         */\n        addProfil(profilBO) {\n          return this.#fetchAdvanced(this.#addProfilURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(profilBO)\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON, but only need one object\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n        /**\n         * Gibt ein Profil-Objekt zurÃ¼ck\n         * @param {Number} profilID to be retrieved\n         * @public\n          */\n         getProfil(profilID) {\n          return this.#fetchAdvanced(this.#getProfilURL(profilID,{method: 'GET'})).then((responseJSON) => {\n            let profilBOs = ProfilBO.fromJSON(responseJSON);\n            //console.info(ProfilBOs)\n            return new Promise(function (resolve) {\n              resolve(profilBOs);\n            })\n          })\n        }\n\n        /**\n         * Updated ein Profil und gibt Promise zurÃ¼ck, resolves as ProfilBO.\n         * \n         * @param {ProfilBO} profilBO to be updated\n         * @public\n         */\n        updateProfil(profilBO) {\n          return this.#fetchAdvanced(this.#updateProfilURL(profilBO.getID()), {\n            method: 'PUT',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(profilBO)\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(ProfilBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n        /**\n         * Gibt Promise zurÃ¼ck\n         * \n         * @param {Number} profilID to be deleted\n         * @public\n         */\n        deleteProfil(profilID) {\n          return this.#fetchAdvanced(this.#deleteProfilURL(profilID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of ProfilBOs.fromJSON\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\n            // console.info(profilBOs);\n            return new Promise(function (resolve) {\n              resolve(responseProfilBO);\n            })\n          })\n        }\n\n        //Lernvorliebenbezogene\n\n        /**\n         * Gibt eine Lernvorliebe mit einer bestimmten ID als BO zurÃ¼ck\n         * \n         * @param {Number} lernvorliebenID to be retrieved\n         * @public\n         */\n        getLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#getLernvorliebenURL(lernvorliebenID)).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(responseLernvorliebenBO);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n        /**\n         * Adds a lernvorlieben and returns a Promise, which resolves to a new LernvorliebenBO object\n         *  \n         * @param {LernvorliebenBO} lernvorliebenBO to be added. The ID of the new lernvorliebe is set by the backend\n         * @public\n         */\n        addLernvorlieben(lernvorliebenBO) {\n          return this.#fetchAdvanced(this.#addLernvorliebenURL(), {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(lernvorliebenBO)\n          }).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(LernvorliebenBOs);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n        /**\n         * Gibt Promise zurÃ¼ck\n         * \n         * @param {Number} lernvorliebenID to be deleted\n         * @public\n         */\n        deleteLernvorlieben(lernvorliebenID) {\n          return this.#fetchAdvanced(this.#deleteLernvorliebenURL(lernvorliebenID), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of LernvorliebenBOs.fromJSON\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\n            // console.info(LernvorliebenBOs);\n            return new Promise(function (resolve) {\n              resolve(responseLernvorliebenBO);\n            })\n          })\n        }\n\n        //Vorschlagbezogene\n        /**\n         * Gibt alle Vorschlaege zurÃ¼ck\n         * @param {Number} mainpersonID to be retrieved\n         * @param {Number} lernfachID to be retrieved\n         * @public\n          */\n        getVorschlaegeByPersonByLernfach(mainpersonID, lernfachID) {\n          return this.#fetchAdvanced(this.#getVorschlaegeByPersonByLernfachURL(mainpersonID, lernfachID, {method: 'GET'})).then((responseJSON) => {\n            let vorschlaegeBOs = VorschlagBO.fromJSON(responseJSON);\n            //console.info(vorschlaegeBOs)\n            return new Promise(function (resolve) {\n              resolve(vorschlaegeBOs);\n            })\n          })\n        }\n\n      \n        //Nachrichtbezogene\n        /** \n        * Gibt alle Nachrichten einer Person zurÃ¼ck\n         * @param {Number} personID to be retrieved\n         * @public\n          */\n\n        getNachrichten(personID) {\n          return this.#fetchAdvanced(this.#getNachrichtenByPersonURL(personID,{method: 'GET'})).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            //console.info(nachrichtenBOs)\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })\n          })\n        }\n\n       /**\n         * Adds a Nachricht and returns a Promise, which resolves to a new NachrichtenBO object\n         *  \n         * @param {NachrichtBO} nachrichtBO to be added. The ID of the new nachricht is set by the backend\n         * @public\n         */\n\n        addNachricht(nachrichtBO) {\n          return this.#fetchAdvanced(this.#addNachrichtURL(), {\n          method: 'POST',\n            headers: {\n              'Accept': 'application/json, text/plain',\n              'Content-type': 'application/json',\n            },\n            body: JSON.stringify(nachrichtBO)\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtBOs.fromJSON, but only need one object\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /**\n           * Gibt alle Nachrichten als BO zurÃ¼ck\n           * \n           * @public\n           */\n\n        getNachrichten() {\n          return this.#fetchAdvanced(this.#getNachrichtenURL()).then((responseJSON) => {\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(nachrichtenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Nachrichten mit der bestimmten konversationsID als BO zurÃ¼ck\n         * @param {Number} konversationID to be retrieved\n         * @public\n          */\n    \n        getNachrichtenByKonversation(konversationID){\n\t\t      return this.#fetchAdvanced(this.#getNachrichtenByKonversationURL(konversationID)).then((responseJSON) => {\n\t\t\t      let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n\t\t\t      //console.info(nachrichtenBOs)\n\t\t\t      return new Promise(function (resolve){\n\t\t\t  \t    resolve(nachrichtenBOs)\n\t\t\t      })\n\t\t      })\n\t      }\n\n\n          /**\n         * Gibt Promise zurÃ¼ck, LÃ¶scht Nachricht mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n\n\n        deleteNachricht(id) {\n          return this.#fetchAdvanced(this.#deleteNachrichtURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of NachrichtenBOs.fromJSON\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\n            // console.info(NachrichtBOs);\n            return new Promise(function (resolve) {\n              resolve(responseNachrichtBO);\n            })\n          })\n        }\n\n         /** \n         * gibt die Nachrichten mit der bestimmten konversationsID und PersonID als BO zurÃ¼ck\n         * @param {Number} konversationId to be retrieved\n         * @param {Number} personID \n         * @public\n         */\n    \n          getNachrichtenByKonversationByPerson(konversationID, personID) {\n            return this.#fetchAdvanced(this.#getNachrichtenByKonversationByPersonURL(konversationID, personID, {method: 'GET'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              //console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n \n          /** \n           * lÃ¶scht Nachrichten einer konversation\n           * @param {Number} konversationId to be retrieved\n           * @param {Number} personID \n           * @public\n           */\n      \n          deleteNachrichtenByKonversation(konversationID) {\n            return this.#fetchAdvanced(this.#deleteNachrichtenByKonversationURL(konversationID, {method: 'DELETE'})).then((responseJSON) => {\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n              //console.info(nachrichtenBOs)\n              return new Promise(function (resolve) {\n                resolve(nachrichtenBOs);\n              })\n            })\n          }\n\n           /** \n          * gibt die Nachrichten mit dem bestimmten Inhalt als BO zurÃ¼ck\n          * @param {String} inhalt to be retrieved\n          * @public\n          */\n    \n        getNachrichtByInhalt(inhalt){\n          return this.#fetchAdvanced(this.#getNachrichtenByInhaltURL(inhalt)).then((responseJSON) => {\n          let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\n          console.info(nachrichtenBOs)\n          return new Promise(function (resolve){\n            resolve(nachrichtenBOs)\n             })\n           })\n          }\n\n          //Konversations bezogen\n\n           /**\n           * Gibt alle Konversationen als BO zurÃ¼ck\n           * \n           * @public\n           */\n\n        getKonversationen() {\n          return this.#fetchAdvanced(this.#getKonversationenURL()).then((responseJSON) => {\n            let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(konversationenBOs);\n            })           \n          })\n        }\n\n         /** \n        * gibt die Konversation mit der bestimmten ID als BO zurÃ¼ck\n         * @param {Number} id to be retrieved\n         * @public\n          */\n    \n          getKonversation(id){\n            return this.#fetchAdvanced(this.#getKonversationURL(id)).then((responseJSON) => {\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n              //console.info(konversationenBOs)\n              return new Promise(function (resolve){\n                resolve(konversationenBOs)\n              })\n            })\n          }\n\n           /**\n           * Gibt alle Konversationen einer Person als BO zurÃ¼ck\n           * @param {Number} personid to be retrieved\n           * @public\n           */\n\n          getKonversationenByPerson(personid) {\n            return this.#fetchAdvanced(this.#getKonversationenByPersonURL(personid)).then((responseJSON) => {\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\n              return new Promise(function (resolve) {\n                resolve(konversationenBOs);\n              })           \n            })\n          }\n          /** \n          * Adds a KOnversation and returns a Promise, which resolves to a new KonversationBO object\n          *  \n          * @param {KonversationBO} konversationBO to be added. The ID of the new nachricht is set by the backend\n          * @public\n          */\n \n         addKonversation(konversationBO) {\n           return this.#fetchAdvanced(this.#addKonversationURL(), {\n           method: 'POST',\n             headers: {\n               'Accept': 'application/json, text/plain',\n               'Content-type': 'application/json',\n             },\n             body: JSON.stringify(konversationBO)\n           }).then((responseJSON) => {\n             // We always get an array of NachrichtBOs.fromJSON, but only need one object\n             let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\n             // console.info(KonversationBOs);\n             return new Promise(function (resolve) {\n               resolve(responseKonversationBO);\n             })\n           })\n         }\n\n          /**\n         * Gibt Promise zurÃ¼ck, LÃ¶scht Konversation mit bestimmter ID\n         * \n         * @param {Number} id to be deleted\n         * @public\n         */\n\n\n        deleteKonversation(id) {\n          return this.#fetchAdvanced(this.#deleteKonversationURL(id), {\n            method: 'DELETE'\n          }).then((responseJSON) => {\n            // We always get an array of KonversationBOs.fromJSON\n            let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\n            // console.info(KonversationBOs);\n            return new Promise(function (resolve) {\n              resolve(responseKonversationBO);\n            })\n          })\n        }\n\n         /**\n         * Gibt Promise zurÃ¼ck, LÃ¶scht Nachricht mit bestimmter ID\n         * \n         * @param {String} name to be retrived \n         * @public\n         */\n\n\n          getKonversationByName(name){\n            return this.#fetchAdvanced(this.#getKonversationByNameURL(name)).then((responseJSON) => {\n            let konversationBOs = KonversationBO.fromJSON(responseJSON);\n            console.info(konversationBOs)\n            return new Promise(function (resolve){\n              resolve(konversationBOs)\n               })\n             })\n            }\n\n          //setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\n\t        setKonversation(id) { \n\t\t      //immer Zustand 1 holen\n\t\t        return this.#fetchAdvanced(this.#setKonversationURL(id),{method: 'PUT'}).then((responseJSON) => {\n\t\t\t      let konversationBOs = KonversationBO.fromJSON(responseJSON);\n\t\t\t      console.info(konversationBOs)\n\t\t\t      return new Promise(function (resolve){\n\t\t\t      \tresolve(konversationBOs);\n\t\t           \t})\n\t        \t  })\n          \t}\n\n             //Teilnahme Chat bezogene\n\n          /**\n           * Gibt alle Teilnahmen eines Chats als BO zurÃ¼ck\n           * \n           * @public\n           */\n\n           getTeilnahmeChat() {\n            return this.#fetchAdvanced(this.#getTeilnahmeChatURL()).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmechatBOs);\n               })           \n              })\n            }\n\n          /** \n           * gibt die Teilnehmer mit der bestimmten ID als BO zurÃ¼ck\n           * @param {Number} id to be retrieved\n           * @public\n          */\n  \n          getTeilnahmeChatById(id){\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByIdURL(id)).then((responseJSON) => {\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n            //console.info(teilnahmechatBOs)\n            return new Promise(function (resolve){\n              resolve(teilnahmechatBOs)\n               })\n             })\n            }\n\n            /**\n             * setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\n             * \n             * @param {Number} id to be deleted\n             * @public\n             */\n\n             setTeilnahmeChat(id) { \n             //immer Zustand 1 holen\n               return this.#fetchAdvanced(this.#setTeilnahmeChatURL(id),{method: 'PUT'}).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n               console.info(teilnahmechatBOs)\n               return new Promise(function (resolve){\n                 resolve(teilnahmechatBOs);\n                 })\n                })\n              }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeChatBO object\n             *  \n             * @param {TeilnahmeChatBO} teilnahmechatBO to be added. The ID of the new teilnahemChat is set by the backend\n             * @public\n            */\n\n            addTeilnahmeChat(teilnahmechatBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeChatURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmechatBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeChatBOs.fromJSON, but only need one object\n               let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\n               // console.info(TeilnahmeChatBOs);\n                 return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeChatBO);\n                     })\n                   })\n               }\n\n             /** \n             * lÃ¶scht Nachrichten einer konversation\n             * @param {Number} id to be retrieved\n             * @public\n             */\n    \n            deleteTeilnahmeChat(id) {\n              return this.#fetchAdvanced(this.#deleteTeilnahmeChatURL(id), {\n                method: 'DELETE'\n                }).then((responseJSON) => {\n                // We always get an array of TeilnahmeChatBOs.fromJSON\n                let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\n                // console.info(KonversationBOs);\n                return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeChatBO);\n                })\n              })\n            }\n\n             /** \n              * Gibt alle TeilnahmenChat einer Person zurÃ¼ck\n              * @param {Number} personid to be retrieved\n              * @public\n              */\n\n              getTeilnahmeChatByStudentId(personid) {\n                return this.#fetchAdvanced(this.#getTeilnahmeChatByStudentIdURL(personid,{method: 'GET'})).then((responseJSON) => {\n                let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n                //console.info(teilnahmechatBOs)\n                return new Promise(function (resolve) {\n                  resolve(teilnahmechatBOs);\n                  })\n                })\n              }\n              \n             /** \n              * gibt die Nachrichten mit der bestimmten konversationsID als BO zurÃ¼ck\n              * @param {Number} id to be retrieved\n              * @public\n             */\n  \n            getTeilnahmeChatByKonversationId(id){\n               return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationIdURL(id)).then((responseJSON) => {\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\n              //console.info(teilnahmechatBOs)\n              return new Promise(function (resolve){\n               resolve(teilnahmechatBOs)\n                })\n              })\n             }\n\n            //Teilnahme Gruppe bezogen\n\n            /**\n           * Gibt alle Teilnahmen einer Gruppe als BO zurÃ¼ck\n           * \n           * @public\n           */\n\n           getTeilnahmeGruppe() {\n            return this.#fetchAdvanced(this.#getTeilnahmeGruppeURL()).then((responseJSON) => {\n            let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n            return new Promise(function (resolve) {\n              resolve(teilnahmegruppeBOs);\n               })           \n              })\n            }\n\n            /** \n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeGruppeBO object\n             *  \n             * @param {TeilnahmeGruppeBO} teilnahmegruppeBO to be added. The ID of the new teilnahemgruppe is set by the backend\n             * @public\n            */\n\n             addTeilnahmeGruppe(teilnahmegruppeBO) {\n              return this.#fetchAdvanced(this.#addTeilnahmeGruppeURL(), {\n               method: 'POST',\n               headers: {\n                  'Accept': 'application/json, text/plain',\n                  'Content-type': 'application/json',\n                 },\n               body: JSON.stringify(teilnahmegruppeBO)\n               }).then((responseJSON) => {\n               // We always get an array of TeilnahmeGruppeBOs.fromJSON, but only need one object\n               let responseTeilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\n               // console.info(TeilnahmeGruppeBOs);\n                 return new Promise(function (resolve) {\n                  resolve(responseTeilnahmeGruppeBO);\n                     })\n                   })\n               }\n\n              /** \n               * gibt die Teilnehmer mit der bestimmten ID als BO zurÃ¼ck\n               * @param {Number} id to be retrieved\n               * @public\n              */\n  \n              getTeilnahmeGruppeById(id){\n                return this.#fetchAdvanced(this.#getTeilnahmeGruppeByIdURL(id)).then((responseJSON) => {\n                let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\n                //console.info(teilnahmegruppeBOs)\n                return new Promise(function (resolve){\n                 resolve(teilnahmegruppeBOs)\n                  })\n                })\n              }\n\n\n\n\n\n\n\n\n\n}","/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/BusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NamedBusinessObject.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeGruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/TeilnahmeChatBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/KonversationBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/NachrichtBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LerngruppeBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/ProfilBO.js",[],"/Users/hannahhielscher/Desktop/SoPra-LernpartnerApp/frontend/src/api/LernvorliebenBO.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":17,"nodeType":"118","messageId":"119","endLine":1,"endColumn":26},{"ruleId":"116","severity":1,"message":"120","line":10,"column":8,"nodeType":"118","messageId":"119","endLine":10,"endColumn":13},{"ruleId":"116","severity":1,"message":"121","line":153,"column":24,"nodeType":"118","messageId":"119","endLine":153,"endColumn":31},{"ruleId":"116","severity":1,"message":"122","line":2,"column":41,"nodeType":"118","messageId":"119","endLine":2,"endColumn":45},{"ruleId":"116","severity":1,"message":"123","line":3,"column":123,"nodeType":"118","messageId":"119","endLine":3,"endColumn":127},{"ruleId":"116","severity":1,"message":"124","line":138,"column":26,"nodeType":"118","messageId":"119","endLine":138,"endColumn":30},{"ruleId":"116","severity":1,"message":"125","line":138,"column":32,"nodeType":"118","messageId":"119","endLine":138,"endColumn":38},{"ruleId":"126","severity":1,"message":"127","line":564,"column":9,"nodeType":"128","messageId":"129","endLine":571,"endColumn":10},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'About' is defined but never used.","'Userneu' is assigned a value but never used.","'Link' is defined but never used.","'Card' is defined but never used.","'show' is assigned a value but never used.","'person' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","unexpected","no-global-assign","no-unsafe-negation"]