[{"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\index.js":"1","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\App.js":"2","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\Theme.js":"3","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\firebaseconfig.js":"4","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListe.js":"5","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\MeinProfil.js":"6","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListe.js":"7","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Profil.js":"8","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\layout\\Header.js":"9","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\About.js":"10","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernpartnerAPI.js":"11","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\SignIn.js":"12","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LoadingProgress.js":"13","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\RegistrierungForm.js":"14","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js":"15","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListeEintrag.js":"16","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListeEintrag.js":"17","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\PersonBO.js":"18","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\ProfilBO.js":"19","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ProfileDropDown.js":"20","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LerngruppeBO.js":"21","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\VorschlagBO.js":"22","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernvorliebenBO.js":"23","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\KonversationBO.js":"24","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NachrichtBO.js":"25","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeChatBO.js":"26","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeGruppeBO.js":"27","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\index.js":"28","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NamedBusinessObject.js":"29","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\GruppeVerlassenDialog.js":"30","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\BusinessObject.js":"31","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LernfaecherForm.js":"32","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\MeinProfilForm.js":"33","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernfachBO.js":"34"},{"size":151,"mtime":1620806709859,"results":"35","hashOfConfig":"36"},{"size":6302,"mtime":1624711733571,"results":"37","hashOfConfig":"36"},{"size":1787,"mtime":1623496749709,"results":"38","hashOfConfig":"36"},{"size":594,"mtime":1624371992866,"results":"39","hashOfConfig":"36"},{"size":4312,"mtime":1624711650192,"results":"40","hashOfConfig":"36"},{"size":8557,"mtime":1624705738525,"results":"41","hashOfConfig":"36"},{"size":5646,"mtime":1624569929821,"results":"42","hashOfConfig":"36"},{"size":6235,"mtime":1624630590665,"results":"43","hashOfConfig":"36"},{"size":1907,"mtime":1624616171146,"results":"44","hashOfConfig":"36"},{"size":882,"mtime":1624371992865,"results":"45","hashOfConfig":"36"},{"size":44229,"mtime":1624705738486,"results":"46","hashOfConfig":"36"},{"size":1877,"mtime":1624459993900,"results":"47","hashOfConfig":"36"},{"size":902,"mtime":1622117473558,"results":"48","hashOfConfig":"36"},{"size":11181,"mtime":1624705738575,"results":"49","hashOfConfig":"36"},{"size":2187,"mtime":1622117473550,"results":"50","hashOfConfig":"36"},{"size":2754,"mtime":1624538186115,"results":"51","hashOfConfig":"36"},{"size":5424,"mtime":1624630590664,"results":"52","hashOfConfig":"36"},{"size":2672,"mtime":1624630590661,"results":"53","hashOfConfig":"36"},{"size":1309,"mtime":1623496749716,"results":"54","hashOfConfig":"36"},{"size":3383,"mtime":1622538423136,"results":"55","hashOfConfig":"36"},{"size":1057,"mtime":1624630590617,"results":"56","hashOfConfig":"36"},{"size":1426,"mtime":1623496749720,"results":"57","hashOfConfig":"36"},{"size":2025,"mtime":1624630590658,"results":"58","hashOfConfig":"36"},{"size":594,"mtime":1624632098885,"results":"59","hashOfConfig":"36"},{"size":1383,"mtime":1623853219586,"results":"60","hashOfConfig":"36"},{"size":1097,"mtime":1624371992680,"results":"61","hashOfConfig":"36"},{"size":1097,"mtime":1624569929819,"results":"62","hashOfConfig":"36"},{"size":335,"mtime":1622117473538,"results":"63","hashOfConfig":"36"},{"size":400,"mtime":1622117473508,"results":"64","hashOfConfig":"36"},{"size":4037,"mtime":1624569929826,"results":"65","hashOfConfig":"36"},{"size":799,"mtime":1621766915463,"results":"66","hashOfConfig":"36"},{"size":3068,"mtime":1624705738539,"results":"67","hashOfConfig":"36"},{"size":19278,"mtime":1624705738560,"results":"68","hashOfConfig":"36"},{"size":805,"mtime":1624705738451,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"15l5e1u",{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"87"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"87"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\index.js",[],["152","153"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\App.js",["154","155","156","157"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\Theme.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\firebaseconfig.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListe.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\MeinProfil.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\r\n//import Button from '@material-ui/core/Button';\r\nimport { withRouter } from 'react-router-dom';\r\nimport RegistrierungForm from './dialogs/RegistrierungForm';\r\nimport MeinProfilForm from './dialogs/MeinProfilForm';\r\nimport { LernpartnerAPI } from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nclass MeinProfil extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            person: null,\r\n            \r\n            personVorname: null,\r\n            personName: this.props.personName,\r\n            personSemester: null,\r\n            personAlter: null,\r\n            personStudiengang: null,\r\n            lerngruppe: false,\r\n            personProfilID: null,\r\n            personLernfaecher: [],\r\n            lernfaechernamen: [],\r\n            personLernvorliebenID: null,\r\n            profil: null,\r\n            lernvorlieben: null,\r\n            lernvorliebenfrequenz: null,\r\n            gruppe: false,\r\n            showMeinProfilForm: false,\r\n            showRegistrierungForm: false,\r\n            loadingInProgress: false,\r\n            loadingError: null,\r\n            \r\n        };\r\n    }\r\n\r\n    // API Anbindung um Profil vom Backend zu bekommen\r\n    \r\n    getPerson = () => {\r\n      LernpartnerAPI.getAPI().getPersonByGoogleID(this.props.currentPerson.getgoogle_user_id())\r\n      .then(personBO =>\r\n          this.setState({\r\n            person: personBO,\r\n            personName: personBO.name,\r\n            personVorname: personBO.vorname,\r\n            personAlter: personBO.alter,\r\n            personSemester: personBO.semester,\r\n            personStudiengang: personBO.studiengang,\r\n            personProfilID: personBO.personenprofil,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          })).then(() => {\r\n            if (this.state.personName === 'Null'){\r\n              this.setState({\r\n                showRegistrierungForm: true\r\n              })\r\n            }\r\n          })\r\n          .catch(e =>\r\n              this.setState({\r\n            person: null,\r\n            personName: null,\r\n            personVorname: null,\r\n            personSemester: null,\r\n            personStudiengang: null,\r\n            personProfilID: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n    \r\n\r\n   getProfil = () => {\r\n\t\tLernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getprofil())\r\n\t\t\t.then(profilBO =>\r\n\t\t\t\tthis.setState({\r\n            profil: profilBO,\r\n            personLernvorliebenID: profilBO.lernvorlieben_id,\r\n            error: null,\r\n            loadingInProgress: false,\r\n          })).then(() => {\r\n            this.getLernvorlieben();\r\n           \r\n          }).catch(e =>\r\n            this.setState({\r\n              profil: null,\r\n              personLernfaecher: null,\r\n              error: e,\r\n              loadingInProgress: false,\r\n            }));\r\n\r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n\r\n    getLernfaecher = () => {\r\n      LernpartnerAPI.getAPI().getLernfaecherByProfil(this.props.currentPerson.getprofil())\r\n      .then(lernfaecherBOs =>\r\n        this.setState({\r\n              personLernfaecher: lernfaecherBOs,\r\n              lernfaechernamen: lernfaecherBOs.map(lernfach=> lernfach.bezeichnung + \"  \"),\r\n              loadingInProgress: false,\r\n              error: null\r\n        }))\r\n        .catch(e =>\r\n          this.setState({ // Reset state with error from catch\r\n            lernfaecher: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n          })\r\n        );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n   \r\n    getLernvorlieben = () => {\r\n    LernpartnerAPI.getAPI().getLernvorlieben(this.state.personLernvorliebenID)\r\n    .then(lernvorliebenBO =>\r\n      this.setState({\r\n            lernvorlieben: lernvorliebenBO,\r\n            lernvorliebenfrequenz: lernvorliebenBO.frequenz,\r\n            loadingInProgress: false,\r\n            error: null\r\n      }))\r\n      .catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          lernvorlieben: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n  \r\n  \r\n  //Handles the onClick event of the show profil button\r\n  bearbeitenButtonClicked = (event) => {\r\n    this.setState({\r\n      showMeinProfilForm: true\r\n    });\r\n  }\r\n\r\n  //Wird aufgerufen, wenn Speichern oder Abbrechen im Dialog gedrückt wird\r\n  userFormClosed = (person) => {\r\n    this.getPerson();\r\n    if (person) {\r\n        this.setState({\r\n            person: person,\r\n            showRegistrierungForm: false,\r\n        });\r\n    } else {\r\n        this.setState({\r\n          showRegistrierungForm: false\r\n        })\r\n      \r\n    }\r\n  }\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount(){\r\n    this.getPerson();\r\n    this.getProfil();\r\n    this.getLernfaecher();\r\n    \r\n  }\r\n\r\n\r\n    //wird aufgerufen, wenn Dialog Fenster geschloßen wird\r\n    MeinProfilFormClosed = projekt => {\r\n        if (projekt) {\r\n            const newProjektList = [...this.state.projekte, projekt];\r\n            this.setState({\r\n                projekte: newProjektList,\r\n                filteredProjekte: [...newProjektList],\r\n                showProjekteForm: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showProjekteForm: false\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n   /** Renders the component */\r\n    render() {\r\n      const { classes , currentPerson } = this.props;\r\n      // Use the states customer\r\n      const { lernfaechernamen, profil, personProfil, personName, personVorname, personSemester, personAlter, personStudiengang, personLernfaecher, lernfach, personLernvorliebenID, lernvorlieben, lernvorliebenfrequenz, showRegistrierungForm, showMeinProfilForm, loadingInProgress, error} = this.state;\r\n      console.log(personLernfaecher)\r\n      console.log(lernfaechernamen)\r\n    \r\n      return (\r\n        <div className={classes.root}>\r\n        <RegistrierungForm show={showRegistrierungForm} currentPerson = {currentPerson} onClose={this.MeinProfilFormClosed}/>\r\n        \r\n        <Button color=\"primary\" onClick= {this.bearbeitenButtonClicked}>Mein Profil bearbeiten</Button>\r\n        <Typography variant='body1' color={'textSecondary'}>\r\n\r\n                              <b>Name: </b>{personVorname} {personName}<br />\r\n                              <b>Alter: </b> {personAlter} <br />\r\n                              <b>Semester: </b> {personSemester} <br />\r\n                              <b>Studiengang: </b>{personStudiengang}<br />\r\n                              <b>Lernfächer: </b>{lernfaechernamen}<br />\r\n                              <b>Lernvorlieben-Frequenz: </b>{lernvorliebenfrequenz}<br />\r\n\r\n        </Typography>\r\n        <MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson} lernvorlieben={lernvorlieben} onClose={this.userFormClosed} />\r\n        </div>\r\n      );\r\n    }\r\n}\r\n//<MeinProfilForm show={showMeinProfilForm} currentPerson={currentPerson}/>\r\n  const styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n  formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      textAlign: \"left\"\r\n  },\r\n\r\n  laden: {\r\n    padding: 0\r\n  },\r\n  breite: {\r\n    width: 220\r\n  }\r\n  });\r\n\r\n\r\n/** PropTypes */\r\nMeinProfil.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  currentPerson: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withRouter(withStyles(styles)(MeinProfil));\r\n\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListe.js",["175","176","177","178","179","180"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport GruppenListeEintrag from './GruppenListeEintrag';\r\n//import SaveIcon from '@material-ui/icons/Save';\r\n//import Table from '@material-ui/core/Table';\r\n//import TableBody from '@material-ui/core/TableBody';\r\n//import TableCell from '@material-ui/core/TableCell';\r\n//import TableContainer from '@material-ui/core/TableContainer';\r\n//import TableHead from '@material-ui/core/TableHead';\r\n//import TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\n/**\r\n * Es werden alle Vorschläge des aktuell eingeloggten Studenten angezeigt\r\n *\r\n * @see See [VorschlagListeEintrag](#vorschaglisteeintrag)\r\n *\r\n * Hierfür werden alle Vorschläge des aktuell eingeloggten Student geladen und in die Componente VorschlagListeEintrag gemappt\r\n *\r\n */\r\n\r\n\r\nclass GruppenListe extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let expandedID = null;\r\n\r\n        if (this.props.location.expandLerngruppe) {\r\n          expandedID = this.props.location.expandLerngruppe.getID();\r\n        }\r\n\r\n        // Init an empty state\r\n        this.state = {\r\n          lerngruppen: [],\r\n          error: null,\r\n          loadingInProgress: false,\r\n          expandedLerngruppeID: expandedID,\r\n          //showCustomerForm: false\r\n        };\r\n\r\n    }\r\n\r\n    /** Fetches all LerngruppenBOs from the backend */\r\n    getLerngruppen = () => {\r\n        LernpartnerAPI.getAPI().getLerngruppe(this.props.currentPerson.id)\r\n            .then(lerngruppeBOs =>\r\n                this.setState({               // Set new state when LerngruppeBOs have been fetched\r\n                    lerngruppen: lerngruppeBOs,\r\n                    //name: lerngruppeBO.name\r\n                    loadingInProgress: false,   // disable loading indicator\r\n                    error: null\r\n                })).catch(e =>\r\n                    this.setState({             // Reset state with error from catch\r\n                        lerngruppen: [],\r\n                        loadingInProgress: false, // disable loading indicator\r\n                        error: e\r\n                    })\r\n                );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            loadingInProgress: true,\r\n            error: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles onExpandedStateChange events from the GruppeListeEintrag component. Toggels the expanded state of\r\n     * the GruppeListeEintrag of the given LerngruppeBO.\r\n     *\r\n     * @param {lerngruppe} LerngruppeBO of the GruppeListeEintrag to be toggeled\r\n     */\r\n    onExpandedStateChange = lerngruppe => {\r\n        // console.log(vorschlagID);\r\n        // Set expandend Lerngruppe Eintrag to null by default\r\n        let newID = null;\r\n\r\n        // If same lerngruppe entry is clicked, collapse it else expand a new one\r\n        if (lerngruppe.getID() !== this.state.expandedLerngruppeID) {\r\n        // Expand the lerngruppe entry with lerngruppeID\r\n        newID = lerngruppe.getID();\r\n        }\r\n        // console.log(newID);\r\n        this.setState({\r\n        expandedLerngruppeID: newID,\r\n        });\r\n    }\r\n\r\n   /**\r\n   * Handles lerngruppeVerlassen events from the GruppenListeEintrag component\r\n   */\r\n    lerngruppeVerlassen = () => {\r\n        this.getLerngruppen();\r\n        this.setState({\r\n            lerngruppen: this.state.lerngruppen,\r\n            //showCustomerForm: false\r\n        });\r\n    }\r\n\r\n    /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n    componentDidMount() {\r\n        this.getLerngruppen();\r\n    }\r\n\r\n    render() {\r\n        const { classes, currentPerson } = this.props;\r\n        const { lerngruppen, personID, expandedLerngruppeID, loadingInProgress, error }  = this.state;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Grid item >\r\n                        <Typography>\r\n                            <h1>Lerngruppen</h1>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    lerngruppen.map(lerngruppe =>\r\n                    <GruppenListeEintrag key={lerngruppe.getID()} lerngruppe={lerngruppe} currentPerson={currentPerson} expandedState={expandedLerngruppeID === lerngruppe.getID()}\r\n                      onExpandedStateChange={this.onExpandedStateChange}\r\n                      onTeilnahmeGruppeDeleted={this.lerngruppeVerlassen}\r\n                    />)\r\n                }\r\n                <LoadingProgress show={loadingInProgress} />\r\n                <ContextErrorMessage error={error} contextErrorMsg={`Sorry, deine Lerngruppen konnten nicht geladen werden!`} onReload={this.getLerngruppen} />\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nGruppenListe.propTypes = {\r\n    /** @ignore */\r\n    classes: PropTypes.object.isRequired,\r\n    /** @ignore */\r\n    location: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default withRouter(withStyles(styles)(GruppenListe));",["181","182"],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\Profil.js",["183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Button, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {LernpartnerAPI} from '../api';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n\r\nclass Profil extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            user: props.user,\r\n            profil: null,\r\n            lernvorlieben: null,\r\n            gruppe: false,\r\n            tageszeiten: null,\r\n            tage: null,\r\n            frequenz: null,\r\n            lernart: null,\r\n            gruppengroesse: null,\r\n            lernort: null,\r\n            gruppe: null,\r\n            personVorname: null,\r\n            personName: null,\r\n            personSemester: 0,\r\n            personStudiengang: null,\r\n            lerngruppe: false,\r\n            personProfilID: null,\r\n            personLernfaecher: null,\r\n            personLernvorliebenID: null,\r\n            loadingInProgress: false,\r\n            loadingError: null,\r\n        };\r\n    }\r\n\r\n\r\n\r\n/**   showVorschlagButtonClick = (event) => {\r\n      event.stopPropagation();\r\n      this.setState({\r\n        showVorschlag: true\r\n      });\r\n    }**/\r\n\r\n\r\n\r\n/**\r\n    // API Anbindung um Profil vom Backend zu bekommen\r\n    getPerson = () => {\r\n      LernpartnerAPI.getAPI().getPerson(this.props.person.getID())\r\n      .then(personBO =>\r\n          this.setState({\r\n            person: personBO,\r\n            personName: personBO.name,\r\n            personVorname: personBO.vorname,\r\n            personSemester: personBO.semester,\r\n            personStudiengang: personBO.studiengang,\r\n            personProfilID: personBO.personenprofil,\r\n            loadingInProgress: false,\r\n            error: null,\r\n          }))\r\n          .catch(e =>\r\n              this.setState({\r\n            person: null,\r\n            personName: null,\r\n            personVorname: null,\r\n            personSemester: null,\r\n            personStudiengang: null,\r\n            personProfilID: null,\r\n            loadingInProgress: false,\r\n            error: e,\r\n              }));\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n*/\r\n\r\n     getProfil = () => {\r\n    LernpartnerAPI.getAPI().getProfil(this.props.user.id).then(profilBO =>\r\n      this.setState({\r\n            profil: profilBO,\r\n            gruppe: profilBO.gruppe,\r\n            //profilLernfaecher: profilBO.lernfaecher,\r\n            profilLernvorliebenID: profilBO.lernvorlieben,\r\n            loadingInProgress: false,\r\n            error: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          profil: null,\r\n          gruppe: null,\r\n          //profilLernfaecher: null,\r\n          profilLernvorliebenID: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n\r\n     getLernvorlieben = () => {\r\n    LernpartnerAPI.getAPI().getLernvorliebenPraeferenz(this.props.user.profil).then(lernvorliebenBO =>\r\n      this.setState({\r\n            lernvorlieben: lernvorliebenBO,\r\n            tageszeiten: lernvorliebenBO.tageszeiten,\r\n            tage: lernvorliebenBO.tage,\r\n            frequenz: lernvorliebenBO.frequenz,\r\n            lernart: lernvorliebenBO.lernart,\r\n            gruppengroesse: lernvorliebenBO.gruppengroesse,\r\n            lernort: lernvorliebenBO.lernort,\r\n            loadingInProgress: false,\r\n            error: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          lernvorlieben: null,\r\n          loadingInProgress: false,\r\n          error: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n    componentDidMount() {\r\n        this.getProfil();\r\n        this.getLernvorlieben();\r\n  }\r\n\r\n\r\n   /** Renders the component */\r\n  render() {\r\n    const { classes, show } = this.props;\r\n    // Use the states customer\r\n    const { user, profil, lernvorlieben, tageszeiten, tage, frequenz, lernart, lernort, gruppengroesse, gruppe, personLernvorliebenID, loadingInProgress, error} = this.state;\r\n    console.log(user)\r\n\r\n    // console.log(this.props);\r\n    return (\r\n      <div className={classes.root}>\r\n            {\r\n            gruppe ?\r\n                <>\r\n                    <b> {user.vorname} {user.name} </b> <br />\r\n                    <b>Semester: </b> {user.semester} <br />\r\n                    <b>Studiengang: </b> {user.studiengang} <br />\r\n                    <b>Alter: </b> {user.alter} <br />\r\n                    <b>Geschlecht: </b> {user.geschlecht} <br />\r\n\r\n                </>\r\n\r\n                :\r\n                <>\r\n                    <b> Profilinformationen: </b> <br /><br />\r\n                    Tageszeiten: {tageszeiten}<br />\r\n                    Tage: {tage}<br />\r\n                    Frequenz: {frequenz}<br />\r\n                    Lernart: {lernart}<br />\r\n                    Lernort: {lernort}\r\n                </>\r\n           }\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n  },\r\n  content: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  table: {\r\n      minWidth: 700,\r\n    },\r\n  formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      textAlign: \"left\"\r\n  },\r\n\r\n  laden: {\r\n    padding: 0\r\n  },\r\n  breite: {\r\n    width: 220\r\n  }\r\n});\r\n\r\n\r\n/** PropTypes */\r\nProfil.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Profil);\r\n\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\layout\\Header.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\About.js",["205"],"import React from 'react'\r\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(1)\r\n  },\r\n  content: {\r\n    margin: theme.spacing(1),\r\n  }\r\n}));\r\n\r\n/**\r\n * Shows the about page with the impressum\r\n */\r\n\r\n\r\nfunction About() {\r\n\r\n    const classes = useStyles();\r\n  \r\n    return (\r\n      <Paper elevation={0} className={classes.root}>\r\n        <div className={classes.content}>\r\n          <Typography variant='h6'>\r\n            App zum Auffinden von Lernpartnern\r\n          </Typography>\r\n          <Typography variant='body2'>\r\n            © Hochschule der Medien 2020, all rights reserved.\r\n          </Typography>\r\n        </div>\r\n      </Paper>\r\n    )\r\n  }\r\n  \r\n  export default About;","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernpartnerAPI.js",["206"],"import ProfilBO from './ProfilBO';\r\nimport PersonBO from './PersonBO';\r\nimport VorschlagBO from './VorschlagBO';\r\nimport LerngruppeBO from './LerngruppeBO';\r\nimport LernvorliebenBO from './LernvorliebenBO';\r\nimport NachrichtBO from './NachrichtBO';\r\nimport KonversationBO from './KonversationBO'\r\nimport TeilnahmeChatBO from './TeilnahmeChatBO';\r\nimport TeilnahmeGruppeBO from './TeilnahmeGruppeBO';\r\nimport LernfachBO from './LernfachBO';\r\n\r\n/**\r\n * Abstracts the REST interface of the Python backend with convenient access methods.\r\n * The class is implemented as a singleton. \r\n */\r\nexport default class LernpartnerAPI {\r\n\r\n        // Singelton instance\r\n        static #api = null;\r\n\r\n        #lernappServerBaseURL = '/lernApp'\r\n        /** \r\n         * Get the Singelton instance \r\n         * \r\n         * @public\r\n         */\r\n        static getAPI() {\r\n          if (this.#api == null) {\r\n            this.#api = new LernpartnerAPI();\r\n          }\r\n          return this.#api;\r\n        }\r\n\r\n        #fetchAdvanced = (url, init) => fetch(url, init)\r\n          .then(res => {\r\n            // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \r\n            if (!res.ok) {\r\n              throw Error(`${res.status} ${res.statusText}`);\r\n            }\r\n            return res.json();\r\n          }\r\n          )\r\n\r\n        //Person related\r\n        #getPersonenURL = () => `${this.#lernappServerBaseURL}/personen`;\r\n        #addPersonURL = () => `${this.#lernappServerBaseURL}/personen`;\r\n        #getPersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\r\n        #updatePersonURL = (id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe) => `${this.#lernappServerBaseURL}/personen?id=${id}&name=${name}&vorname=${vorname}&semester=${semester}&studiengang=${studiengang}&alter=${alter}&geschlecht=${geschlecht}&lerngruppe=${lerngruppe}`;\r\n        #deletePersonURL = (id) => `${this.#lernappServerBaseURL}/personen/${id}`;\r\n        #searchPersonURL = (personName) => `${this.#lernappServerBaseURL}/personen-by-name/${personName}`;\r\n        #getPersonByGoogleIDURL = (google_user_id) => `${this.#lernappServerBaseURL}/personbygoogle/${google_user_id}`;\r\n        \r\n        //Gruppenbezogen\r\n        #getLerngruppenURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\r\n        #addLerngruppeURL = () => `${this.#lernappServerBaseURL}/lerngruppen`;\r\n        #getLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\r\n        #updateLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\r\n        #deleteLerngruppeURL = (id) => `${this.#lernappServerBaseURL}/lerngruppen/${id}`;\r\n        \r\n        //Profilbezogen\r\n        #getProfileURL = () => `${this.#lernappServerBaseURL}/profile`;\r\n        #addProfilURL = () => `${this.#lernappServerBaseURL}/profile`;\r\n        #getProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\r\n        #updateProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\r\n        //#getLernfaecherByProfilURL = (profilID) => `${this.#lernappServerBaseURL}/profil/${profilID}`;\r\n        #deleteProfilURL = (id) => `${this.#lernappServerBaseURL}/profile/${id}`;\r\n\r\n        //Lernvorliebenbezogen\r\n        #getLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\r\n        //#getLernvorliebenByProfilURL = () => `${this.#lernappServerBaseURL}/lervorlieben/${profilid}`;\r\n        #getLernvorliebenPraeferenzURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben-praeferenz/${id}`;\r\n        #addLernvorliebenURL = () => `${this.#lernappServerBaseURL}/lernvorlieben`;\r\n        #updateLernvorliebenURL = (id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort) => `${this.#lernappServerBaseURL}/lernvorlieben?id=${id}&tageszeiten=${tageszeiten}&tage=${tage}&frequenz=${frequenz}&lernart=${lernart}&gruppengroesse=${gruppengroesse}&lernort=${lernort}`;\r\n        #deleteLernvorliebenURL = (id) => `${this.#lernappServerBaseURL}/lernvorlieben/${id}`;\r\n\r\n        //Vorschlagbezogen\r\n        #getVorschlaegeURL = (mainpersonID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}`;\r\n        //#getSelectedLernfach = () => `${this.#lernappServerBaseURL}`\r\n        #getVorschlaegeByPersonByLernfachURL = (mainpersonID, lernfachID) => `${this.#lernappServerBaseURL}/vorschlaege/${mainpersonID}/${lernfachID}`;\r\n\r\n        //Nachrichtenbezogen\r\n        #getNachrichtenURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\r\n        #getNachrichtenByKonversationURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/konversation/${id}`;\r\n        #addNachrichtURL = () => `${this.#lernappServerBaseURL}/nachrichten`;\r\n        #getNachrichtenByKonversationByPersonURL = (konversationID, personID) => `${this.#lernappServerBaseURL}/nachricht-by-konversation-by-person/${konversationID}/${personID}`;\r\n        #deleteNachrichtURL = (id) => `${this.#lernappServerBaseURL}/nachrichten/${id}`;\r\n        #deleteNachrichtenByKonversationURL = (konversationID) => `${this.#lernappServerBaseURL}/nachrichten/${konversationID}`;\r\n        #getNachrichtenByPersonURL = (personID) => `${this.#lernappServerBaseURL}/nachrichten/${personID}`;\r\n        #getNachrichtenByInhaltURL= (inhalt) => `${this.#lernappServerBaseURL}/nachrichten/${inhalt}`;\r\n        \r\n        //Konversationbezogen\r\n        #getKonversationenURL = () => `${this.#lernappServerBaseURL}/konversationen`;\r\n        #getKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\r\n        #getKonversationenByPersonURL = (personid) => `${this.#lernappServerBaseURL}/konversationbyperson/${personid}`;\r\n        #setKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\r\n        #addKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\r\n        #deleteKonversationURL = (id) => `${this.#lernappServerBaseURL}/konversationen/${id}`;\r\n        #getKonversationByNameURL = (name) => `${this.#lernappServerBaseURL}/konversationen/${name}`;\r\n\r\n        //TeilnahmeChatbezogen\r\n        #getTeilnahmeChatURL = () => `${this.#lernappServerBaseURL}/teilnahmeChat`;\r\n        #getTeilnahmeChatByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\r\n        #setTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\r\n        #addTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\r\n        #deleteTeilnahmeChatURL = (id) => `${this.#lernappServerBaseURL}/teilnahmeChat/${id}`;\r\n        #getTeilnahmeChatByStudentIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-student-id/${id}`;\r\n        #getTeilnahmeChatByKonversationIdURL = (id) => `${this.#lernappServerBaseURL}/teilnehmer-by-konversation-id/${id}`;\r\n\r\n        //TeilnahmeGruppebezogen\r\n        #getTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\r\n        #addTeilnahmeGruppeURL = () => `${this.#lernappServerBaseURL}/teilnahmenGruppe`;\r\n        #getTeilnahmeGruppeByIdURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\r\n        #getTeilnahmeGruppeByPersonByGruppeURL = (personId, lerngruppeId) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${personId}/${lerngruppeId}`;\r\n        #deleteTeilnahmeGruppeURL = (id) => `${this.#lernappServerBaseURL}/teilnahmenGruppe/${id}`;\r\n\r\n        //Lernfachbezogene\r\n        #getLernfaecherURL = () => `${this.#lernappServerBaseURL}/lernfaecher`;\r\n        #getLernfachByIDURL = (id) => `${this.#lernappServerBaseURL}/lernfaecher-by-id/${id}`;\r\n        #getLernfaecherByProfilURL = (profilid) => `${this.#lernappServerBaseURL}/lernfaecher-by-profil/${profilid}`;\r\n        //Personenbezogene\r\n        /**\r\n           * Gibt alle Personen als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n        getPersonen() {\r\n          return this.#fetchAdvanced(this.#getPersonenURL()).then((responseJSON) => {\r\n            let personenBOs = PersonBO.fromJSON(responseJSON);\r\n            // console.info(customerBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(personenBOs);\r\n            })           \r\n          })\r\n        }\r\n        /**\r\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\r\n         *  \r\n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\r\n         * @public\r\n         */\r\n        addPerson(personBO) {\r\n          return this.#fetchAdvanced(this.#addPersonURL(), {\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(personBO)\r\n          }).then((responseJSON) => {\r\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\r\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n            // console.info(accountBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responsePersonBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        /**\r\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\r\n         * \r\n         * @param {Number} personID to be retrieved\r\n         * @public\r\n         */\r\n        getPerson(personID) {\r\n          return this.#fetchAdvanced(this.#getPersonURL(personID)).then((responseJSON) => {\r\n            // We always get an array of PersonBOs.fromJSON, but only need one object\r\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n            // console.info(responsePersonBO);\r\n            return new Promise(function (resolve) {\r\n              resolve(responsePersonBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        /**\r\n         * Updated eine Person und gibt Promise zurück, resolves as PersonBO.\r\n         \r\n         */\r\n        updatePerson(id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe) {\r\n          return this.#fetchAdvanced(this.#updatePersonURL(id, name, vorname, semester, studiengang, alter, geschlecht, lerngruppe), {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            }\r\n          })\r\n        }\r\n\r\n        /**\r\n         * Gibt eine Person mit einer bestimmten ID als BO zurück\r\n         * \r\n         * @param {Number} google_user_id to be retrieved\r\n         * @public\r\n         */\r\n        getPersonByGoogleID(google_user_id) {\r\n          return this.#fetchAdvanced(this.#getPersonByGoogleIDURL(google_user_id)).then((responseJSON) => {\r\n            // We always get an array of PersonBOs.fromJSON, but only need one object\r\n            let personBO = PersonBO.fromJSON(responseJSON);\r\n            console.info(personBO);\r\n            return new Promise(function (resolve){\r\n                resolve(personBO)\r\n            })\r\n          })\r\n        }\r\n \r\n        /**\r\n         * Gibt Promise zurück\r\n         * \r\n         * @param {Number} personID to be deleted\r\n         * @public\r\n         */\r\n        deletePerson(personID) {\r\n          return this.#fetchAdvanced(this.#deletePersonURL(personID), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of PersonBOs.fromJSON\r\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n            // console.info(personBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responsePersonBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        /**\r\n         * Gibt Promise zurück\r\n         * \r\n         * @param {Number} personID to be deleted\r\n         * @public\r\n         */\r\n        searchPerson(personName) {\r\n          return this.#fetchAdvanced(this.#searchPersonURL(personName)).then((responseJSON) => {\r\n            let personBOs = PersonBO.fromJSON(responseJSON);\r\n            // console.info(personBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(personBOs);\r\n            })\r\n          })\r\n        }\r\n        //Lerngruppenbezogene\r\n        /**\r\n           * Gibt alle Lerngruppen als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n          getLerngruppen() {\r\n            return this.#fetchAdvanced(this.#getLerngruppenURL()).then((responseJSON) => {\r\n              let lerngruppenBOs = LerngruppeBO.fromJSON(responseJSON);\r\n              // console.info(customerBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(lerngruppenBOs);\r\n              })           \r\n            })\r\n          }\r\n          /**\r\n           * Adds a lerngruppe and returns a Promise, which resolves to a new LerngruppeBO object\r\n           *  \r\n           * @param {LerngruppeBO} lerngruppeBO to be added. The ID of the new lerngruppe is set by the backend\r\n           * @public\r\n           */\r\n          addLerngruppe(lerngruppeBO) {\r\n            return this.#fetchAdvanced(this.#addLerngruppeURL(), {\r\n              method: 'POST',\r\n              headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Content-type': 'application/json',\r\n              },\r\n              body: JSON.stringify(lerngruppeBO)\r\n            }).then((responseJSON) => {\r\n              // We always get an array of LerngruppeBOs.fromJSON, but only need one object\r\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\r\n              // console.info(LerngruppeBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(responseLerngruppeBO);\r\n              })\r\n            })\r\n          }\r\n  \r\n          /**\r\n           * Gibt eine Lerngruppe mit einer bestimmten personenID als BO zurück\r\n           * \r\n           * @param {Number} personenID to be retrieved\r\n           * @public\r\n           */\r\n          getLerngruppe(personenID) {\r\n            return this.#fetchAdvanced(this.#getLerngruppeURL(personenID)).then((responseJSON) => {\r\n              // We get an array of LerngruppeBOs.fromJSON\r\n              let lerngruppeBO = LerngruppeBO.fromJSON(responseJSON);\r\n              //console.info(lerngruppeBO);\r\n              return new Promise(function (resolve) {\r\n                resolve(lerngruppeBO);\r\n              })\r\n            })\r\n          }\r\n  \r\n          /**\r\n           * Updated eine Lerngruppe und gibt Promise zurück, resolves as LerngruppeBO.\r\n           * \r\n           * @param {LerngruppeBO} lerngruppeBO to be updated\r\n           * @public\r\n           */\r\n          updateLerngruppe(lerngruppeBO) {\r\n            return this.#fetchAdvanced(this.#updateLerngruppeURL(lerngruppeBO.getID()), {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Content-type': 'application/json',\r\n              },\r\n              body: JSON.stringify(lerngruppeBO)\r\n            }).then((responseJSON) => {\r\n              // We always get an array of LerngruppeBOs.fromJSON\r\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\r\n              // console.info(LerngruppeBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(responseLerngruppeBO);\r\n              })\r\n            })\r\n          }\r\n   \r\n          /**\r\n           * Gibt Promise zurück\r\n           * \r\n           * @param {Number} lerngruppeID to be deleted\r\n           * @public\r\n           */\r\n          deleteLerngruppe(lerngruppeID) {\r\n            return this.#fetchAdvanced(this.#deleteLerngruppeURL(lerngruppeID), {\r\n              method: 'DELETE'\r\n            }).then((responseJSON) => {\r\n              // We always get an array of LerngruppeBOs.fromJSON\r\n              let responseLerngruppeBO = LerngruppeBO.fromJSON(responseJSON)[0];\r\n              // console.info(LerngruppeBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(responseLerngruppeBO);\r\n              })\r\n            })\r\n          }\r\n\r\n\r\n        //Profilbezogene\r\n        /**\r\n           * Gibt alle Profile als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n          getProfile() {\r\n            return this.#fetchAdvanced(this.#getProfileURL()).then((responseJSON) => {\r\n              let profileBOs = ProfilBO.fromJSON(responseJSON);\r\n              // console.info(profilBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(profileBOs);\r\n              })           \r\n            })\r\n          }\r\n        /**\r\n         * Adds a person and returns a Promise, which resolves to a new PersonBO object\r\n         *  \r\n         * @param {PersonBO} personBO to be added. The ID of the new customer is set by the backend\r\n         * @public\r\n         */\r\n        addProfil(profilBO) {\r\n          return this.#fetchAdvanced(this.#addProfilURL(), {\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(profilBO)\r\n          }).then((responseJSON) => {\r\n            // We always get an array of ProfilBOs.fromJSON, but only need one object\r\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\r\n            // console.info(accountBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseProfilBO);\r\n            })\r\n          })\r\n        }\r\n        /**\r\n         * Gibt ein Profil-Objekt zurück\r\n         * @param {Number} profilID to be retrieved\r\n         * @public\r\n          */\r\n         getProfil(profilID) {\r\n          return this.#fetchAdvanced(this.#getProfilURL(profilID,{method: 'GET'})).then((responseJSON) => {\r\n            let profilBO = ProfilBO.fromJSON(responseJSON);\r\n            console.info(profilBO)\r\n            return new Promise(function (resolve) {\r\n              resolve(profilBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        /**\r\n         * Updated ein Profil und gibt Promise zurück, resolves as ProfilBO.\r\n         * \r\n         * @param {ProfilBO} profilBO to be updated\r\n         * @public\r\n         */\r\n        updateProfil(profilBO) {\r\n          return this.#fetchAdvanced(this.#updateProfilURL(profilBO.getID()), {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(profilBO)\r\n          }).then((responseJSON) => {\r\n            // We always get an array of ProfilBOs.fromJSON\r\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\r\n            // console.info(ProfilBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseProfilBO);\r\n            })\r\n          })\r\n        }\r\n        /**\r\n         * Gibt Promise zurück\r\n         * \r\n         * @param {Number} profilID to be deleted\r\n         * @public\r\n         */\r\n        deleteProfil(profilID) {\r\n          return this.#fetchAdvanced(this.#deleteProfilURL(profilID), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of ProfilBOs.fromJSON\r\n            let responseProfilBO = ProfilBO.fromJSON(responseJSON)[0];\r\n            // console.info(profilBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseProfilBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        //Lernvorliebenbezogene\r\n\r\n        /**\r\n         * Gibt eine Lernvorliebe mit einer bestimmten ID als BO zurück\r\n         * \r\n         * @param {Number} lernvorliebenID to be retrieved\r\n         * @public\r\n         */\r\n        getLernvorlieben(lernvorliebenID) {\r\n          return this.#fetchAdvanced(this.#getLernvorliebenURL(lernvorliebenID)).then((responseJSON) => {\r\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\r\n            let lernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON);\r\n            console.info(lernvorliebenBO);\r\n            return new Promise(function (resolve) {\r\n              resolve(lernvorliebenBO);\r\n            })\r\n          })\r\n        }\r\n\r\n\r\n        getLernvorliebenPraeferenz(lernvorliebenID) {\r\n          return this.#fetchAdvanced(this.#getLernvorliebenPraeferenzURL(lernvorliebenID)).then((responseJSON) => {\r\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\r\n            let lernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON);\r\n            console.info(lernvorliebenBO);\r\n            return new Promise(function (resolve) {\r\n              resolve(lernvorliebenBO);\r\n            })\r\n          })\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Adds a lernvorlieben and returns a Promise, which resolves to a new LernvorliebenBO object\r\n         *  \r\n         * @param {LernvorliebenBO} lernvorliebenBO to be added. The ID of the new lernvorliebe is set by the backend\r\n         * @public\r\n         */\r\n        addLernvorlieben(lernvorliebenBO) {\r\n          return this.#fetchAdvanced(this.#addLernvorliebenURL(), {\r\n            method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(lernvorliebenBO)\r\n          }).then((responseJSON) => {\r\n            // We always get an array of LernvorliebenBOs.fromJSON, but only need one object\r\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\r\n            // console.info(LernvorliebenBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseLernvorliebenBO);\r\n            })\r\n          })\r\n        }\r\n        /**\r\n         * Gibt Promise zurück\r\n         * \r\n         * @param {Number} lernvorliebenID to be deleted\r\n         * @public\r\n         */\r\n        deleteLernvorlieben(lernvorliebenID) {\r\n          return this.#fetchAdvanced(this.#deleteLernvorliebenURL(lernvorliebenID), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of LernvorliebenBOs.fromJSON\r\n            let responseLernvorliebenBO = LernvorliebenBO.fromJSON(responseJSON)[0];\r\n            // console.info(LernvorliebenBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseLernvorliebenBO);\r\n            })\r\n          })\r\n        }\r\n\r\n        updateLernvorlieben(id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort) {\r\n            return this.#fetchAdvanced(this.#updateLernvorliebenURL(id, tageszeiten, tage, frequenz, lernart, gruppengroesse, lernort), {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Accept': 'application/json, text/plain',\r\n                'Content-type': 'application/json',\r\n              }\r\n            })\r\n          }\r\n\r\n        //Vorschlagbezogene\r\n        /**\r\n         * Gibt alle Vorschlaege zurück\r\n         * @param {Number} mainpersonID to be retrieved\r\n         * @param {Number} lernfachID to be retrieved\r\n         * @public\r\n          */\r\n        getVorschlaegeByPersonByLernfach(mainpersonID, lernfachID) {\r\n          return this.#fetchAdvanced(this.#getVorschlaegeByPersonByLernfachURL(mainpersonID, lernfachID, {method: 'GET'})).then((responseJSON) => {\r\n            let vorschlaegeBOs = VorschlagBO.fromJSON(responseJSON);\r\n            //console.info(vorschlaegeBOs)\r\n            return new Promise(function (resolve) {\r\n              resolve(vorschlaegeBOs);\r\n            })\r\n          })\r\n        }\r\n\r\n      \r\n        //Nachrichtbezogene\r\n        /** \r\n        * Gibt alle Nachrichten einer Person zurück\r\n         * @param {Number} personID to be retrieved\r\n         * @public\r\n          */\r\n\r\n        getNachrichten(personID) {\r\n          return this.#fetchAdvanced(this.#getNachrichtenByPersonURL(personID,{method: 'GET'})).then((responseJSON) => {\r\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n            //console.info(nachrichtenBOs)\r\n            return new Promise(function (resolve) {\r\n              resolve(nachrichtenBOs);\r\n            })\r\n          })\r\n        }\r\n\r\n       /**\r\n         * Adds a Nachricht and returns a Promise, which resolves to a new NachrichtenBO object\r\n         *  \r\n         * @param {NachrichtBO} nachrichtBO to be added. The ID of the new nachricht is set by the backend\r\n         * @public\r\n         */\r\n\r\n        addNachricht(nachrichtBO) {\r\n          return this.#fetchAdvanced(this.#addNachrichtURL(), {\r\n          method: 'POST',\r\n            headers: {\r\n              'Accept': 'application/json, text/plain',\r\n              'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(nachrichtBO)\r\n          }).then((responseJSON) => {\r\n            // We always get an array of NachrichtBOs.fromJSON, but only need one object\r\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\r\n            // console.info(NachrichtBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseNachrichtBO);\r\n            })\r\n          })\r\n        }\r\n\r\n         /**\r\n           * Gibt alle Nachrichten als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n\r\n        getNachrichten() {\r\n          return this.#fetchAdvanced(this.#getNachrichtenURL()).then((responseJSON) => {\r\n            let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n            return new Promise(function (resolve) {\r\n              resolve(nachrichtenBOs);\r\n            })           \r\n          })\r\n        }\r\n\r\n         /** \r\n        * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\r\n         * @param {Number} konversationID to be retrieved\r\n         * @public\r\n          */\r\n    \r\n        getNachrichtenByKonversation(konversationID){\r\n\t\t      return this.#fetchAdvanced(this.#getNachrichtenByKonversationURL(konversationID)).then((responseJSON) => {\r\n\t\t\t      let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n\t\t\t      //console.info(nachrichtenBOs)\r\n\t\t\t      return new Promise(function (resolve){\r\n\t\t\t  \t    resolve(nachrichtenBOs)\r\n\t\t\t      })\r\n\t\t      })\r\n\t      }\r\n\r\n\r\n          /**\r\n         * Gibt Promise zurück, Löscht Nachricht mit bestimmter ID\r\n         * \r\n         * @param {Number} id to be deleted\r\n         * @public\r\n         */\r\n\r\n\r\n        deleteNachricht(id) {\r\n          return this.#fetchAdvanced(this.#deleteNachrichtURL(id), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of NachrichtenBOs.fromJSON\r\n            let responseNachrichtBO = NachrichtBO.fromJSON(responseJSON)[0];\r\n            // console.info(NachrichtBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseNachrichtBO);\r\n            })\r\n          })\r\n        }\r\n\r\n         /** \r\n         * gibt die Nachrichten mit der bestimmten konversationsID und PersonID als BO zurück\r\n         * @param {Number} konversationId to be retrieved\r\n         * @param {Number} personID \r\n         * @public\r\n         */\r\n    \r\n          getNachrichtenByKonversationByPerson(konversationID, personID) {\r\n            return this.#fetchAdvanced(this.#getNachrichtenByKonversationByPersonURL(konversationID, personID, {method: 'GET'})).then((responseJSON) => {\r\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n              //console.info(nachrichtenBOs)\r\n              return new Promise(function (resolve) {\r\n                resolve(nachrichtenBOs);\r\n              })\r\n            })\r\n          }\r\n \r\n          /** \r\n           * löscht Nachrichten einer konversation\r\n           * @param {Number} konversationId to be retrieved\r\n           * @param {Number} personID \r\n           * @public\r\n           */\r\n      \r\n          deleteNachrichtenByKonversation(konversationID) {\r\n            return this.#fetchAdvanced(this.#deleteNachrichtenByKonversationURL(konversationID, {method: 'DELETE'})).then((responseJSON) => {\r\n              let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n              //console.info(nachrichtenBOs)\r\n              return new Promise(function (resolve) {\r\n                resolve(nachrichtenBOs);\r\n              })\r\n            })\r\n          }\r\n\r\n           /** \r\n          * gibt die Nachrichten mit dem bestimmten Inhalt als BO zurück\r\n          * @param {String} inhalt to be retrieved\r\n          * @public\r\n          */\r\n    \r\n        getNachrichtByInhalt(inhalt){\r\n          return this.#fetchAdvanced(this.#getNachrichtenByInhaltURL(inhalt)).then((responseJSON) => {\r\n          let nachrichtenBOs = NachrichtBO.fromJSON(responseJSON);\r\n          console.info(nachrichtenBOs)\r\n          return new Promise(function (resolve){\r\n            resolve(nachrichtenBOs)\r\n             })\r\n           })\r\n          }\r\n\r\n          //Konversations bezogen\r\n\r\n           /**\r\n           * Gibt alle Konversationen als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n\r\n        getKonversationen() {\r\n          return this.#fetchAdvanced(this.#getKonversationenURL()).then((responseJSON) => {\r\n            let konversationenBOs = KonversationBO.fromJSON(responseJSON);\r\n            return new Promise(function (resolve) {\r\n              resolve(konversationenBOs);\r\n            })           \r\n          })\r\n        }\r\n\r\n         /** \r\n        * gibt die Konversation mit der bestimmten ID als BO zurück\r\n         * @param {Number} id to be retrieved\r\n         * @public\r\n          */\r\n    \r\n          getKonversation(id){\r\n            return this.#fetchAdvanced(this.#getKonversationURL(id)).then((responseJSON) => {\r\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\r\n              //console.info(konversationenBOs)\r\n              return new Promise(function (resolve){\r\n                resolve(konversationenBOs)\r\n              })\r\n            })\r\n          }\r\n\r\n           /**\r\n           * Gibt alle Konversationen einer Person als BO zurück\r\n           * @param {Number} personid to be retrieved\r\n           * @public\r\n           */\r\n\r\n          getKonversationenByPerson(personid) {\r\n            return this.#fetchAdvanced(this.#getKonversationenByPersonURL(personid)).then((responseJSON) => {\r\n              let konversationenBOs = KonversationBO.fromJSON(responseJSON);\r\n              return new Promise(function (resolve) {\r\n                resolve(konversationenBOs);\r\n              })           \r\n            })\r\n          }\r\n          /** \r\n          * Adds a KOnversation and returns a Promise, which resolves to a new KonversationBO object\r\n          *  \r\n          * @param {KonversationBO} konversationBO to be added. The ID of the new nachricht is set by the backend\r\n          * @public\r\n          */\r\n \r\n         addKonversation(konversationBO) {\r\n           return this.#fetchAdvanced(this.#addKonversationURL(), {\r\n           method: 'POST',\r\n             headers: {\r\n               'Accept': 'application/json, text/plain',\r\n               'Content-type': 'application/json',\r\n             },\r\n             body: JSON.stringify(konversationBO)\r\n           }).then((responseJSON) => {\r\n             // We always get an array of NachrichtBOs.fromJSON, but only need one object\r\n             let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\r\n             // console.info(KonversationBOs);\r\n             return new Promise(function (resolve) {\r\n               resolve(responseKonversationBO);\r\n             })\r\n           })\r\n         }\r\n\r\n          /**\r\n         * Gibt Promise zurück, Löscht Konversation mit bestimmter ID\r\n         * \r\n         * @param {Number} id to be deleted\r\n         * @public\r\n         */\r\n        deleteKonversation(id) {\r\n          return this.#fetchAdvanced(this.#deleteKonversationURL(id), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of KonversationBOs.fromJSON\r\n            let responseKonversationBO = KonversationBO.fromJSON(responseJSON)[0];\r\n            // console.info(KonversationBOs);\r\n            return new Promise(function (resolve) {\r\n              resolve(responseKonversationBO);\r\n            })\r\n          })\r\n        }\r\n\r\n         /**\r\n         * Gibt Promise zurück, Löscht Nachricht mit bestimmter ID\r\n         * \r\n         * @param {String} name to be retrived \r\n         * @public\r\n         */\r\n\r\n\r\n          getKonversationByName(name){\r\n            return this.#fetchAdvanced(this.#getKonversationByNameURL(name)).then((responseJSON) => {\r\n            let konversationBOs = KonversationBO.fromJSON(responseJSON);\r\n            console.info(konversationBOs)\r\n            return new Promise(function (resolve){\r\n              resolve(konversationBOs)\r\n               })\r\n             })\r\n            }\r\n\r\n          //setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\r\n\t        setKonversation(id) { \r\n\t\t      //immer Zustand 1 holen\r\n\t\t        return this.#fetchAdvanced(this.#setKonversationURL(id),{method: 'PUT'}).then((responseJSON) => {\r\n\t\t\t      let konversationBOs = KonversationBO.fromJSON(responseJSON);\r\n\t\t\t      console.info(konversationBOs)\r\n\t\t\t      return new Promise(function (resolve){\r\n\t\t\t      \tresolve(konversationBOs);\r\n\t\t           \t})\r\n\t        \t  })\r\n          \t}\r\n\r\n             //Teilnahme Chat bezogene\r\n\r\n          /**\r\n           * Gibt alle Teilnahmen eines Chats als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n\r\n           getTeilnahmeChat() {\r\n            return this.#fetchAdvanced(this.#getTeilnahmeChatURL()).then((responseJSON) => {\r\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\r\n            return new Promise(function (resolve) {\r\n              resolve(teilnahmechatBOs);\r\n               })           \r\n              })\r\n            }\r\n\r\n          /** \r\n           * gibt die Teilnehmer mit der bestimmten ID als BO zurück\r\n           * @param {Number} id to be retrieved\r\n           * @public\r\n          */\r\n  \r\n          getTeilnahmeChatById(id){\r\n            return this.#fetchAdvanced(this.#getTeilnahmeChatByIdURL(id)).then((responseJSON) => {\r\n            let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\r\n            //console.info(teilnahmechatBOs)\r\n            return new Promise(function (resolve){\r\n              resolve(teilnahmechatBOs)\r\n               })\r\n             })\r\n            }\r\n\r\n            /**\r\n             * setzt den Zustand einer Konversation mit der bestimmten ID auf einen neuen Zustand\r\n             * \r\n             * @param {Number} id to be deleted\r\n             * @public\r\n             */\r\n\r\n             setTeilnahmeChat(id) { \r\n             //immer Zustand 1 holen\r\n               return this.#fetchAdvanced(this.#setTeilnahmeChatURL(id),{method: 'PUT'}).then((responseJSON) => {\r\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\r\n               console.info(teilnahmechatBOs)\r\n               return new Promise(function (resolve){\r\n                 resolve(teilnahmechatBOs);\r\n                 })\r\n                })\r\n              }\r\n\r\n            /** \r\n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeChatBO object\r\n             *  \r\n             * @param {TeilnahmeChatBO} teilnahmechatBO to be added. The ID of the new teilnahemChat is set by the backend\r\n             * @public\r\n            */\r\n\r\n            addTeilnahmeChat(teilnahmechatBO) {\r\n              return this.#fetchAdvanced(this.#addTeilnahmeChatURL(), {\r\n               method: 'POST',\r\n               headers: {\r\n                  'Accept': 'application/json, text/plain',\r\n                  'Content-type': 'application/json',\r\n                 },\r\n               body: JSON.stringify(teilnahmechatBO)\r\n               }).then((responseJSON) => {\r\n               // We always get an array of TeilnahmeChatBOs.fromJSON, but only need one object\r\n               let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\r\n               // console.info(TeilnahmeChatBOs);\r\n                 return new Promise(function (resolve) {\r\n                  resolve(responseTeilnahmeChatBO);\r\n                     })\r\n                   })\r\n               }\r\n\r\n             /** \r\n             * löscht Nachrichten einer konversation\r\n             * @param {Number} id to be retrieved\r\n             * @public\r\n             */\r\n    \r\n            deleteTeilnahmeChat(id) {\r\n              return this.#fetchAdvanced(this.#deleteTeilnahmeChatURL(id), {\r\n                method: 'DELETE'\r\n                }).then((responseJSON) => {\r\n                // We always get an array of TeilnahmeChatBOs.fromJSON\r\n                let responseTeilnahmeChatBO = TeilnahmeChatBO.fromJSON(responseJSON)[0];\r\n                // console.info(KonversationBOs);\r\n                return new Promise(function (resolve) {\r\n                  resolve(responseTeilnahmeChatBO);\r\n                })\r\n              })\r\n            }\r\n\r\n             /** \r\n              * Gibt alle TeilnahmenChat einer Person zurück\r\n              * @param {Number} personid to be retrieved\r\n              * @public\r\n              */\r\n\r\n              getTeilnahmeChatByStudentId(personid) {\r\n                return this.#fetchAdvanced(this.#getTeilnahmeChatByStudentIdURL(personid,{method: 'GET'})).then((responseJSON) => {\r\n                let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\r\n                //console.info(teilnahmechatBOs)\r\n                return new Promise(function (resolve) {\r\n                  resolve(teilnahmechatBOs);\r\n                  })\r\n                })\r\n              }\r\n              \r\n             /** \r\n              * gibt die Nachrichten mit der bestimmten konversationsID als BO zurück\r\n              * @param {Number} id to be retrieved\r\n              * @public\r\n             */\r\n  \r\n            getTeilnahmeChatByKonversationId(id){\r\n               return this.#fetchAdvanced(this.#getTeilnahmeChatByKonversationIdURL(id)).then((responseJSON) => {\r\n               let teilnahmechatBOs = TeilnahmeChatBO.fromJSON(responseJSON);\r\n              //console.info(teilnahmechatBOs)\r\n              return new Promise(function (resolve){\r\n               resolve(teilnahmechatBOs)\r\n                })\r\n              })\r\n             }\r\n\r\n            //Teilnahme Gruppe bezogen\r\n\r\n            /**\r\n           * Gibt alle Teilnahmen einer Gruppe als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n\r\n           getTeilnahmeGruppe() {\r\n            return this.#fetchAdvanced(this.#getTeilnahmeGruppeURL()).then((responseJSON) => {\r\n            let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\r\n            return new Promise(function (resolve) {\r\n              resolve(teilnahmegruppeBOs);\r\n               })           \r\n              })\r\n            }\r\n\r\n            /** \r\n             * Adds a Teilnahme and returns a Promise, which resolves to a new TeilnahmeGruppeBO object\r\n             *  \r\n             * @param {TeilnahmeGruppeBO} teilnahmegruppeBO to be added. The ID of the new teilnahemgruppe is set by the backend\r\n             * @public\r\n            */\r\n\r\n             addTeilnahmeGruppe(teilnahmegruppeBO) {\r\n              return this.#fetchAdvanced(this.#addTeilnahmeGruppeURL(), {\r\n               method: 'POST',\r\n               headers: {\r\n                  'Accept': 'application/json, text/plain',\r\n                  'Content-type': 'application/json',\r\n                 },\r\n               body: JSON.stringify(teilnahmegruppeBO)\r\n               }).then((responseJSON) => {\r\n               // We always get an array of TeilnahmeGruppeBOs.fromJSON, but only need one object\r\n               let responseTeilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\r\n               // console.info(TeilnahmeGruppeBOs);\r\n                 return new Promise(function (resolve) {\r\n                  resolve(responseTeilnahmeGruppeBO);\r\n                     })\r\n                   })\r\n               }\r\n\r\n              /** \r\n               * gibt die Teilnehmer mit der bestimmten ID als BO zurück\r\n               * @param {Number} id to be retrieved\r\n               * @public\r\n              */\r\n              getTeilnahmeGruppeById(id){\r\n                return this.#fetchAdvanced(this.#getTeilnahmeGruppeByIdURL(id)).then((responseJSON) => {\r\n                let teilnahmegruppeBOs = TeilnahmeGruppeBO.fromJSON(responseJSON);\r\n                //console.info(teilnahmegruppeBOs)\r\n                return new Promise(function (resolve){\r\n                 resolve(teilnahmegruppeBOs)\r\n                  })\r\n                })\r\n              }\r\n\r\n              /** \r\n               * gibt die Teilnehmer mit der bestimmten ID als BO zurück\r\n               * @param {Number} id to be retrieved\r\n               * @public\r\n              */\r\n             getTeilnahmeGruppeByPersonByGruppe(personId, lerngruppeId){\r\n              return this.#fetchAdvanced(this.#getTeilnahmeGruppeByPersonByGruppeURL(personId, lerngruppeId)).then((responseJSON) => {\r\n              let teilnahmegruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON);\r\n              console.info(teilnahmegruppeBO)\r\n              return new Promise(function (resolve){\r\n               resolve(teilnahmegruppeBO)\r\n                })\r\n              })\r\n            }\r\n\r\n        /**\r\n         * Gibt Promise zurück, Löscht Konversation mit bestimmter ID\r\n         *\r\n         * @param {Number} id to be deleted\r\n         * @public\r\n         */\r\n        deleteTeilnahmeGruppe(id) {\r\n          return this.#fetchAdvanced(this.#deleteTeilnahmeGruppeURL(id), {\r\n            method: 'DELETE'\r\n          }).then((responseJSON) => {\r\n            // We always get an array of TeilnahmeGruppeBOs.fromJSON\r\n            let teilnahmeGruppeBO = TeilnahmeGruppeBO.fromJSON(responseJSON)[0];\r\n             console.info(teilnahmeGruppeBO);\r\n            return new Promise(function (resolve) {\r\n              resolve(teilnahmeGruppeBO);\r\n            })\r\n          })\r\n        }\r\n\r\n\r\n        //Lernfachspezifische Methoden\r\n        /**\r\n           * Gibt alle Lernfaecher als BO zurück\r\n           * \r\n           * @public\r\n           */\r\n          getLernfaecher() {\r\n            return this.#fetchAdvanced(this.#getLernfaecherURL()).then((responseJSON) => {\r\n              let lernfaecherBOs = LernfachBO.fromJSON(responseJSON);\r\n              // console.info(lernfaecherBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(lernfaecherBOs);\r\n              })           \r\n            })\r\n          }\r\n          \r\n          /**\r\n           * Gibt eine Person mit einer bestimmten ID als BO zurück\r\n           * \r\n           * @param {Number} id to be retrieved\r\n           * @public\r\n           */\r\n          getLernfach(id) {\r\n            return this.#fetchAdvanced(this.#getLernfachByIDURL(id)).then((responseJSON) => {\r\n              // We always get an array of PersonBOs.fromJSON, but only need one object\r\n              let lernfachBO = LernfachBO.fromJSON(responseJSON)[0];\r\n              // console.info(lernfachBO);\r\n              return new Promise(function (resolve) {\r\n                resolve(lernfachBO);\r\n              })\r\n            })\r\n          }\r\n\r\n          /**\r\n           * Gibt eine Person mit einer bestimmten ID als BO zurück\r\n           * \r\n           * @param {Number} profilid to be retrieved\r\n           * @public\r\n           */\r\n          getLernfaecherByProfil(profilid) {\r\n            return this.#fetchAdvanced(this.#getLernfaecherByProfilURL(profilid)).then((responseJSON) => {\r\n              // We always get an array of PersonBOs.fromJSON, but only need one object\r\n              let lernfaecherBOs = LernfachBO.fromJSON(responseJSON);\r\n              console.info(lernfaecherBOs);\r\n              return new Promise(function (resolve) {\r\n                resolve(lernfaecherBOs);\r\n              })\r\n            })\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n}","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\pages\\SignIn.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LoadingProgress.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\RegistrierungForm.js",["207","208"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    } from '@material-ui/core';\r\n\r\nimport { LernpartnerAPI } from '../../api';\r\nimport { withRouter } from 'react-router-dom';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n/** \r\n * Renders a landing page for users who are not signed in. Provides a sign in button \r\n * for using an existing google account to sign in. The component uses firebase to \r\n * do redirect based signin process.\r\n * \r\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\r\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\r\n * \r\n */\r\nclass RegistrierungForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Init the state\r\n        this.state = {\r\n            name: '',\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            vorname: null,\r\n            vornameValidationFailed: false,\r\n            vornameEdited: false,\r\n\r\n            alter: null,\r\n            alterValidationFailed: false,\r\n            alterEdited: false,\r\n\r\n            geschlecht: null,\r\n            geschlechtValidationFailed: false,\r\n            geschlechtEdited: false,\r\n\r\n            semester: null,\r\n            semesterValidationFailed: false,\r\n            semesterEdited: false,\r\n\r\n            studiengang: null,\r\n            studiengangValidationFailed: false,\r\n            studiengangEdited: false,\r\n\r\n            lerngruppe: null,\r\n            lerngruppeValidationFailed: false,\r\n            lerngruppeEdited: false,\r\n\r\n            addingError: null,\r\n            addingInProgress: false,\r\n\r\n            updatingError: null,\r\n            updatingInProgress: false,\r\n            \r\n            \r\n        };\r\n        // save this state for canceling\r\n        this.baseState = this.state;\r\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\r\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\r\n        }\r\n    \r\n\r\n    /** Updates the person */\r\n    registrieren = () => {\r\n        let person = this.props.currentPerson;\r\n        person.name = this.state.name\r\n        person.vorname = this.state.vorname\r\n        person.semester = this.state.semester\r\n        person.studiengang = this.state.studiengang\r\n        person.alter = this.state.alter\r\n        person.geschlecht = this.state.geschlecht\r\n        person.lerngruppe = this.state.lerngruppe\r\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\r\n          this.state.lerngruppe).then(person => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(person); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator \r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\t/** \r\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\r\n\t \r\n\thandleSignInButtonClicked = () => {\r\n\t\tthis.props.onSignIn();\r\n\t}\r\n    */\r\n   /** Handles value changes of the forms textfields and validates them */\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n        error = true;\r\n        }\r\n\r\n        this.setState({\r\n        [event.target.id]: event.target.value,\r\n        [event.target.id + 'ValidationFailed']: error,\r\n        [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Setzen der Werte aus der Validierung\r\n    setStateValueChange(event, error) {\r\n      this.setState({\r\n          [event.target.id]: event.target.value,\r\n          [event.target.id + 'ValidationFailed']: error,\r\n          [event.target.id + 'Edited']: true\r\n      });\r\n  }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n    handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose(null);\r\n    }\r\n\r\n    handleChangeStudiengang(event) {\r\n      this.setState({studiengang: event.target.value});\r\n    }\r\n\r\n    handleChangeLerngruppe(event) {\r\n      this.setState({lerngruppe: event.target.value});\r\n    }\r\n\r\n  \r\n\t/** Renders the sign in page, if user objext is null */\r\n\t/** Renders the component */\r\n    render() {\r\n        const { classes, show, currentPerson, } = this.props;\r\n        const { name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\r\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, addingInProgress,\r\n          updatingInProgress, updatingError} = this.state;\r\n    \r\n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\r\n        let header = 'Bitte gib deine Daten ein:';\r\n    \r\n        return (\r\n            show ?\r\n            <Dialog open={show}>\r\n              <DialogTitle id='form-dialog-title'>{title}\r\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  {header}\r\n                </DialogContentText>\r\n                <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\r\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname} \r\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed} \r\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\r\n                  \r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester} \r\n                    onChange={this.numberValueChange} error={semesterValidationFailed} \r\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} /> \r\n                    \r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Studiengang</InputLabel>\r\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\r\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\r\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n                   \r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter} \r\n                    onChange={this.numberValueChange} error={alterValidationFailed} \r\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht} \r\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed} \r\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} /> \r\n                  \r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\r\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\r\n                                <MenuItem value='1'>Ja!</MenuItem>\r\n                                <MenuItem value='0'>Nein!</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                </form>\r\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                {\r\n\r\n                  <ContextErrorMessage error={updatingError}\r\n                      contextErrorMsg={`Du konntest leider nicht registriert werden :/`}\r\n                      onReload={this.registrieren} />\r\n\r\n                }\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                </Button>\r\n                {\r\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\r\n                          onClick={this.registrieren} color='primary'>\r\n                          Jetzt registrieren\r\n                    </Button>\r\n                }\r\n              </DialogActions>\r\n            </Dialog>\r\n            : null\r\n        );\r\n      }\r\n    \r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\tmargin: theme.spacing(2)\r\n\t}\r\n});\r\n\r\n/** PropTypes */\r\nRegistrierungForm.propTypes = {\r\n\t/** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n\t/** \r\n\t * Handler function, which is called if the user wants to sign in.\r\n\t */\r\n  \r\n\tonSignIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(RegistrierungForm));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\KonversationListeEintrag.js",["209"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\n//import Nachricht from './Nachricht';\r\nimport KonversationListe from './KonversationListe';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/** \r\n * \r\n * Es wird ein einzelne Konversationen von einer Person dargestellt\r\n * \r\n * Hierfür wird der Name der Konversation angezeigt\r\n * \r\n */\r\n\r\nclass KonversationListeEintrag extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            konversation: null,\r\n            //showKonversation: false,\r\n            //showProfil: false,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n\r\n    \r\n// Lifecycle methode, wird aufgerufen wenn componente in den DOM eingesetzt wird\r\ncomponentDidMount() {\r\n  this.getKonversation();\r\n}\r\n\r\n//Handles the onClick event of the show Konversation button\r\nshowKonversationButtonClicked = (event) => {\r\n  event.stopPropagation();\r\n  this.setState({\r\n    showKonversation: true\r\n  });\r\n}\r\n\r\nrender() {\r\n  const { classes } = this.props;\r\n  const { konversation, loadingInProgress, error } = this.state;\r\n\r\n  return(\r\n    <div>\r\n      <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n            <Grid item>\r\n              <Typography variant='body1' className={classes.heading}>{konversation.getname()}\r\n                </Typography>\r\n            </Grid>  \r\n            <Grid item>\r\n              <ButtonGroup variant='text' size='small'>\r\n                <Button color='primary' onClick={this.showKonversationButtonClicked}>\r\n                    Konversation ansehen\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Grid>\r\n      </Grid>\r\n      <LoadingProgress show={loadingInProgress} />\r\n      <ContextErrorMessage error={error} contextErrorMsg={`Leider konnte deine Konversation nicht geladen werden!`} onReload={this.getKonversationen} />\r\n      \r\n    </div>\r\n    //<Nachricht show={showKonversation} konversationid = {konversation.getid()}/> \r\n  )\r\n\r\n}\r\n  \r\n    \r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  customerFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nKonversationListeEintrag.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(KonversationListeEintrag);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\GruppenListeEintrag.js",["210","211","212","213","214","215","216","217","218"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import LernpartnerAPI from '../api/LernpartnerAPI'\r\nimport Profil from './Profil';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import InputLabel from '@material-ui/core/InputLabel';\r\n//import MenuItem from '@material-ui/core/MenuItem';\r\n//import FormControl from '@material-ui/core/FormControl';\r\n//import Select from '@material-ui/core/Select';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport GruppeVerlassenDialog from './dialogs/GruppeVerlassenDialog';\r\nimport LernpartnerAPI from '../api/LernpartnerAPI'\r\n\r\n/**\r\n * Es wird ein einzelner Vorschlag für einen passenden Lernpartner oder /-gruppe mit allen not wendigen Informationen dargestellt\r\n *\r\n * Hierfür werden Profilname, Alter, Geschlecht, Semester, Lernfach und der Prozentsatz des Matches angezeigt\r\n *\r\n */\r\n\r\nclass GruppenListeEintrag extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        // initiiere einen leeren state\r\n        this.state = {\r\n            lerngruppe: props.lerngruppe,\r\n            gruppeName: this.props.lerngruppe.name,\r\n            teilnahmeGruppe: null,\r\n            profilID: this.props.lerngruppe.gruppenprofil,\r\n            showProfil: false,\r\n            showLerngruppeVerlassenDialog: false,\r\n            //showTeilnehmer: false,\r\n            //showNachrichtenListe: false,\r\n            loadingInProgress: false,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    /** Handles onChange events of the underlying ExpansionPanel */\r\n    expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.lerngruppe);\r\n    }\r\n\r\n    /** Handles the onClick event of the Profil ansehen button */\r\n    showProfilButtonClicked = (event) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showProfil: true\r\n        });\r\n    }\r\n\r\n        /** TeilnahmeGruppe holen fürs Verlassen */\r\n  getTeilnahmeGruppe = () => {\r\n    LernpartnerAPI.getAPI().getTeilnahmeGruppeByPersonByGruppe(this.props.currentPerson.getID(), this.props.lerngruppe.id)\r\n    .then(teilnahmeGruppeBO => {\r\n      this.setState({\r\n        teilnahmeGruppe: teilnahmeGruppeBO,              // disable loading indicator                 // no error message\r\n      });\r\n    }).catch(e =>\r\n      this.setState({\r\n        teilnahmeGruppe: null,              // disable loading indicator                     // show error message\r\n      })\r\n    );\r\n    }\r\n\r\n    /** Handles the onClick event of the delete customer button */\r\n    verlasseLerngruppeButtonClicked = (event) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            showLerngruppeVerlassenDialog: true\r\n        });\r\n    }\r\n\r\n    /** Handles the onClose event of the CustomerDeleteDialog */\r\n    verlasseLerngruppeDialogClosed = (teilnahmeGruppe) => {\r\n        // if customer is not null, delete it\r\n        if (teilnahmeGruppe) {\r\n            this.props.onTeilnahmeGruppeDeleted(teilnahmeGruppe);\r\n        };\r\n\r\n        // Don´t show the dialog\r\n        this.setState({\r\n            showLerngruppeVerlassenDialog: false\r\n        });\r\n    }\r\n\r\n     /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n   componentDidMount() {\r\n       this.getTeilnahmeGruppe();\r\n   }\r\n\r\n    render(){\r\n\r\n          const { classes, expandedState, currentPerson } = this.props;\r\n          const { lerngruppe, gruppeName, profilID, teilnahmeGruppe, showProfil, showLerngruppeVerlassenDialog } = this.state;\r\n\r\n          return (\r\n            <div>\r\n              <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  id={`lerngruppe${lerngruppe.getID()}accountpanel-header`}\r\n                >\r\n                  <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n                    <Typography variant='body1'>\r\n                        {lerngruppe.getname()}\r\n                    </Typography>\r\n                  </Grid>\r\n                    <Button style={{ width : 250, color: \"red\"}} color='secondary' onClick={this.verlasseLerngruppeButtonClicked}>\r\n                        Gruppe verlassen\r\n                    </Button>\r\n                  </AccordionSummary>\r\n                 <AccordionDetails>\r\n                  <Profil user={lerngruppe}/>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <GruppeVerlassenDialog show={showLerngruppeVerlassenDialog} teilnahmeGruppe={teilnahmeGruppe} currentPerson={currentPerson} onClose={this.verlasseLerngruppeDialogClosed}/>\r\n            </div>\r\n          );\r\n        }\r\n}\r\n\r\n/** PropTypes */\r\nGruppenListeEintrag.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  vorschlag: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  expandedState: PropTypes.bool.isRequired,\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  onTeilnahmeGruppeDeleted: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default (GruppenListeEintrag);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\PersonBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\ProfilBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\ProfileDropDown.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LerngruppeBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\VorschlagBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernvorliebenBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\KonversationBO.js",["219"],"import BusinessObject from './BusinessObject';\r\n\r\nexport default class KonversationBO extends BusinessObject{\r\n\r\n\tconstructor(){\r\n        super();\r\n        \r\n    }\r\n\r\n    \r\n\r\n    static fromJSON(konversationen) {\r\n\t\tlet results = null;\r\n\t\tif (Array.isArray(konversationen)) {\r\n\t\t\tresults = [];\r\n\t\t\tkonversationen.forEach((x) => {\r\n\t\t\t\tObject.setPrototypeOf(x, konversationen.prototype);\r\n\t\t\t\tresults.push(x);\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\t// Es gibt wohl nur ein Objekt\r\n\t\t\tlet x = konversationen;\r\n\t\t\tObject.setPrototypeOf(x, KonversationBO.prototype);\r\n\t\t\tresults = x;\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n}","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NachrichtBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeChatBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\TeilnahmeGruppeBO.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\index.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\NamedBusinessObject.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\GruppeVerlassenDialog.js",["220"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\nimport LernpartnerAPI from '../../api/LernpartnerAPI'\r\n\r\n\r\nclass GruppeVerlassenDialog extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      verlassenInProgress: false,\r\n      verlassenError: null\r\n    };\r\n  }\r\n\r\n  /** Gruppe verlassen */\r\n  verlasseGruppe = () => {\r\n    LernpartnerAPI.getAPI().deleteTeilnahmeGruppe(this.props.teilnahmeGruppe.getID())\r\n    .then(teilnahmeGruppe => {\r\n      this.setState({\r\n        verlassenInProgress: false,              // disable loading indicator\r\n        verlassenError: null                     // no error message\r\n      });\r\n      this.props.onClose(this.props.teilnahmeGruppe);  // call the parent with the deleted customer\r\n    }).catch(e =>\r\n      this.setState({\r\n        verlassenInProgress: false,              // disable loading indicator\r\n        verlassenError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      verlassenInProgress: true,                 // show loading indicator\r\n      verlassenError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // console.log(event);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, teilnahmeGruppe, lerngruppeID, show } = this.props;\r\n    const { verlassenInProgress, verlassenError } = this.state;\r\n    //console.log(verlassenInProgress)\r\n    console.log(teilnahmeGruppe)\r\n    //console.log(teilnahmeGruppe.id)\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose}>\r\n          <DialogTitle id='delete-dialog-title'>Gruppe verlassen\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              <p>Möchtest du wirklich die Gruppe verlassen?</p>\r\n              <p style={{color: \"red\", fontSize: 14}}>!!!Achtung: Wenn du die Gruppe verlässt, verlässt du auch automatisch den Chat!!!</p>\r\n            </DialogContentText>\r\n            <LoadingProgress show={verlassenInProgress} />\r\n            <ContextErrorMessage error={verlassenError} contextErrorMsg={`Die Gruppe konnte nicht verlassen werden.`}\r\n              onReload={this.verlasseGruppe} />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Abbrechen\r\n            </Button>\r\n            <Button variant='contained' onClick={this.verlasseGruppe} color='primary'>\r\n              Verlassen\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nGruppeVerlassenDialog.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The CustomerBO to be deleted */\r\n  teilnahmeGruppe: PropTypes.object.isRequired,\r\n  /** If true, the dialog is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(CustomerBO customer);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(GruppeVerlassenDialog);\r\n","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\BusinessObject.js",[],"C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\LernfaecherForm.js",["221","222","223"],"import React, { Component } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from 'react-router-dom';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport { LernpartnerAPI } from '../../api';\r\n//import VorschlagListe from '../VorschlagListe';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n  \r\nclass LernfaecherForm extends Component {\r\n  \r\n  constructor(props){\r\n    super(props);\r\n\r\n    // initiiere einen leeren state\r\n    this.state = {\r\n        profil: null,\r\n        lernfaecher: null,\r\n        lernfach: null,\r\n        loadingInProgress: false,\r\n        error: null\r\n    };\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const lernfach = event.target.lernfach;\r\n    this.setState({\r\n      [lernfach]: event.target.value,\r\n    });\r\n  }\r\n\r\n  getProfil = () => {\r\n    LernpartnerAPI.getAPI().getProfil(this.props.currentPerson.getpersonenprofil())\r\n    .then(profilBO =>\r\n        this.setState({\r\n          profil: profilBO,\r\n          lernfaecher: profilBO.lernfaecher,\r\n          loadingInProgress: false,\r\n          error: null,\r\n        }))\r\n        .catch(e =>\r\n            this.setState({\r\n              profil: null,\r\n              lernfaecher: null,\r\n              loadingInProgress: false,\r\n              error: e,\r\n            }));\r\n        this.setState({\r\n          loadingInProgress: true,\r\n          error: null\r\n        });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getProfil();\r\n  }\r\n\r\n  render() {\r\n    const { classes, currentPerson } = this.props;\r\n    const { profil, lernfaecher, lernfach, loadingInProgress, error } = this.state;\r\n    \r\n    console.log(profil)\r\n    console.log(lernfaecher)\r\n    return (\r\n      <div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel htmlFor=\"age-native-simple\">Lernfach auswählen:</InputLabel>\r\n          <Select\r\n            native\r\n            value= {lernfach}\r\n            onChange={this.handleChange}\r\n            inputProps={{\r\n              name: 'age',\r\n              id: 'age-native-simple',\r\n            }}\r\n          >\r\n           {lernfaecher.map(lernfach =>\r\n            <option key={lernfach.key} value={lernfach.key}>{lernfach.value}</option>\r\n          )};\r\n           \r\n          </Select>\r\n        </FormControl>\r\n        \r\n        <LoadingProgress show={loadingInProgress}></LoadingProgress>\r\n        <ContextErrorMessage error={error} contextErrorMsg = {'Hier ist ein Fehler aufgetreten'} onReload={this.getProfil} />\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default withRouter(withStyles(useStyles)(LernfaecherForm));","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\components\\dialogs\\MeinProfilForm.js",["224","225","226","227"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Card,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    } from '@material-ui/core';\r\n\r\nimport { LernpartnerAPI } from '../../api';\r\nimport { withRouter } from 'react-router-dom';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Dieses Form zeigt ein Dialog zum erstellen/updaten von ProjektBO's. Falls ein Projekt bereits besteht wird das Formular als edit konfiguriert.\r\n * Falls das Projekt Objekt null ist wird das Formular zum erstellen eines PojektBO's konfiguriert.\r\n * Dafuer wird auf die API zugegriffen (Backend zugriff)\r\n *\r\n * @see See Matieral-UIs [Dialog] (https://material-ui.com/components/dialogs)\r\n */\r\n\r\nclass MeinProfilForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        //initiiere den state\r\n        this.state = {\r\n            name: null,\r\n            nameValidationFailed: false,\r\n            nameEdited: false,\r\n\r\n            vorname: null,\r\n            vornameValidationFailed: false,\r\n            vornameEdited: false,\r\n\r\n            semester: null,\r\n            semesterValidationFailed: false,\r\n            semesterEdited: false,\r\n\r\n            studiengang: null,\r\n            studiengangValidationFailed: false,\r\n            studiengangEdited: false,\r\n\r\n            lerngruppe: null,\r\n            lerngruppeValidationFailed: false,\r\n            lerngruppeEdited: false,\r\n\r\n            alter: null,\r\n            alterValidationFailed: false,\r\n            alterEdited: false,\r\n\r\n            geschlecht: null,\r\n            geschlechtValidationFailed: false,\r\n            geschlechtEdited: false,\r\n\r\n            tageszeiten: null,\r\n            tageszeitenValidationFailed: false,\r\n            tageszeitenEdited: false,\r\n\r\n            tage: null,\r\n            tageValidationFailed: false,\r\n            tageEdited: false,\r\n\r\n            frequenz: null,\r\n            frequenzValidationFailed: false,\r\n            frequenzEdited: false,\r\n\r\n            lernart: null,\r\n            lernartValidationFailed: false,\r\n            lernartEdited: false,\r\n\r\n            gruppengroesse: null,\r\n            gruppengroesseValidationFailed: false,\r\n            gruppengroesseEdited: false,\r\n\r\n            lernort: null,\r\n            lernortValidationFailed: false,\r\n            lernortEdited: false,\r\n\r\n            lernfaecher: null,\r\n            lernfaecherValidationFailed: false,\r\n            lernfaecherEdited: false,\r\n\r\n\r\n        };\r\n        // State speichern falls cancel\r\n        this.baseState = this.state;\r\n        this.handleChangeStudiengang = this.handleChangeStudiengang.bind(this);\r\n        this.handleChangeLerngruppe = this.handleChangeLerngruppe.bind(this);\r\n        this.handleChangeTageszeiten = this.handleChangeTageszeiten.bind(this);\r\n        this.handleChangeTage = this.handleChangeTage.bind(this);\r\n        this.handleChangeFrequenz = this.handleChangeFrequenz.bind(this);\r\n        this.handleChangeLernart = this.handleChangeLernart.bind(this);\r\n        this.handleChangeGruppengroesse = this.handleChangeGruppengroesse.bind(this);\r\n        this.handleChangeLernort = this.handleChangeLernort.bind(this);\r\n        this.handleChangeLernfaecher = this.handleChangeLernfaecher.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Updates the person */\r\n    updatenPerson = () => {\r\n        let person = this.props.currentPerson;\r\n        person.name = this.state.name\r\n        person.vorname = this.state.vorname\r\n        person.semester = this.state.semester\r\n        person.studiengang = this.state.studiengang\r\n        person.alter = this.state.alter\r\n        person.geschlecht = this.state.geschlecht\r\n        person.lerngruppe = this.state.lerngruppe\r\n        LernpartnerAPI.getAPI().updatePerson(person.id, this.state.name, this.state.vorname, this.state.semester, this.state.studiengang, this.state.alter, this.state.geschlecht,\r\n          this.state.lerngruppe).then(person => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(person); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator\r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\r\n  /** Updates the person */\r\n    updatenLernvorlieben = () => {\r\n        let lernvorlieben = this.props.lernvorlieben;\r\n        lernvorlieben.tageszeiten = this.state.tageszeiten\r\n        lernvorlieben.tage = this.state.tage\r\n        lernvorlieben.frequenz = this.state.frequenz\r\n        lernvorlieben.lernart = this.state.lernart\r\n        lernvorlieben.gruppengroesse = this.state.gruppengroesse\r\n        lernvorlieben.lernort = this.state.lernort\r\n\r\n        LernpartnerAPI.getAPI().updateLernvorlieben(lernvorlieben.id, this.state.tageszeiten, this.state.tage, this.state.frequenz, this.state.lernart, this.state.gruppengroesse, this.state.lernort)\r\n        .then(lernvorlieben => {\r\n            // Backend call sucessfull\r\n            // reinit the dialogs state for a new empty customer\r\n            this.setState(this.baseState);\r\n            this.props.onClose(lernvorlieben); // call the parent with the customer object from backend\r\n        }).catch(e =>\r\n            this.setState({\r\n                updatingInProgress: false,    // disable loading indicator\r\n                updatingError: e              // show error message\r\n            })\r\n        );\r\n\r\n        // set loading to true\r\n        this.setState({\r\n            updatingInProgress: true,       // show loading indicator\r\n            updatingError: null             // disable error message\r\n      });\r\n    }\r\n\r\n\r\n\t/**\r\n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\r\n\r\n\thandleSignInButtonClicked = () => {\r\n\t\tthis.props.onSignIn();\r\n\t}\r\n    */\r\n   /** Handles value changes of the forms textfields and validates them */\r\n    textFieldValueChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n        error = true;\r\n        }\r\n\r\n        this.setState({\r\n        [event.target.id]: event.target.value,\r\n        [event.target.id + 'ValidationFailed']: error,\r\n        [event.target.id + 'Edited']: true\r\n        });\r\n    }\r\n\r\n    //Setzen der Werte aus der Validierung\r\n    setStateValueChange(event, error) {\r\n      this.setState({\r\n          [event.target.id]: event.target.value,\r\n          [event.target.id + 'ValidationFailed']: error,\r\n          [event.target.id + 'Edited']: true\r\n      });\r\n  }\r\n\r\n    // Validierung der Textfeldaenderungen nur numerische Werte\r\n    numberValueChange = (event) => {\r\n        const value = event.target.value;\r\n        const re = /^[0-9]{1,10}$/;\r\n\r\n        let error = false;\r\n        if (value.trim().length === 0) {\r\n            error = true;\r\n        }\r\n        if (re.test(event.target.value) === false) {\r\n            error = true;\r\n        }\r\n        this.setStateValueChange(event, error);\r\n    }\r\n\r\n    //Setzen des Status, bei schließen des Dialogs\r\n      handleClose = () => {\r\n        this.setState(this.baseState);\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleChangeStudiengang(event) {\r\n      this.setState({studiengang: event.target.value});\r\n    }\r\n\r\n    handleChangeLerngruppe(event) {\r\n      this.setState({lerngruppe: event.target.value});\r\n    }\r\n\r\n    handleChangeTageszeiten(event) {\r\n      this.setState({tageszeiten: event.target.value});\r\n    }\r\n\r\n    handleChangeTage(event) {\r\n      this.setState({tage: event.target.value});\r\n    }\r\n\r\n    handleChangeFrequenz(event) {\r\n      this.setState({frequenz: event.target.value});\r\n    }\r\n\r\n    handleChangeLernart(event) {\r\n      this.setState({lernart: event.target.value});\r\n    }\r\n\r\n    handleChangeGruppengroesse(event) {\r\n      this.setState({gruppengroesse: event.target.value});\r\n    }\r\n\r\n    handleChangeLernort(event) {\r\n      this.setState({lernort: event.target.value});\r\n    }\r\n\r\n    handleChangeLernfaecher(event) {\r\n      this.setState({lernfaecher: event.target.value});\r\n    }\r\n\r\n\r\n\r\n\t/** Renders the sign in page, if user objext is null */\r\n\t/** Renders the component */\r\n    render() {\r\n        const { classes, show, currentPerson, lernvorlieben } = this.props;\r\n        const { name, nameValidationFailed, vorname, vornameValidationFailed, semester, semesterValidationFailed, studiengang, studiengangValidationFailed,\r\n          alter, alterValidationFailed, geschlecht, geschlechtValidationFailed, lerngruppe, lerngruppeValidationFailed, tageszeiten,\r\n          tageszeitenValidationFailed, tage, tageValidationFailed, frequenz, frequenzValidationFailed, lernart, lernartValidationFailed, gruppengroesse, gruppengroesseValidationFailed,\r\n          lernort, lernortValidationFailed, lernfaecher, lernfaecherValidationFailed, addingInProgress, updatingInProgress, updatingError} = this.state;\r\n\r\n\r\n        let title = 'Registriere dich zuerst, bevor du die App nutzen kannst!';\r\n        let header = 'Bitte gib deine Daten ein:';\r\n\r\n        return (\r\n            show ?\r\n            <Dialog open={show}>\r\n              <DialogTitle id='form-dialog-title'>{title}\r\n                  <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText>\r\n                  {header}\r\n                </DialogContentText>\r\n                <form className={classes.root} noValidate autoComplete='off'>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='name' label='Nachname:' value={name}\r\n                    onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                    helperText={nameValidationFailed ? 'The last name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='vorname' label='Vorname:' value={vorname}\r\n                    onChange={this.textFieldValueChange} error={vornameValidationFailed}\r\n                    helperText={vornameValidationFailed ? 'The first name must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\r\n                    onChange={this.numberValueChange} error={semesterValidationFailed}\r\n                    helperText={geschlechtValidationFailed ? 'The semester must contain at least one character' : ' '} />\r\n\r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Studiengang</InputLabel>\r\n                             <Select required error={studiengangValidationFailed} value={studiengang} onChange={this.handleChangeStudiengang}>\r\n                                <MenuItem value='WI'>Wirtschaftsinformatik</MenuItem>\r\n                                <MenuItem value='MW'>Medienwirtschaft</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='alter' label='Alter:' value={alter}\r\n                    onChange={this.numberValueChange} error={alterValidationFailed}\r\n                    helperText={alterValidationFailed ? 'The age must contain at least one character' : ' '} />\r\n\r\n                  <TextField className={classes.textfield} autoFocus type='text' required fullWidth margin='normal' id='geschlecht' label='Geschlecht:' value={geschlecht}\r\n                    onChange={this.textFieldValueChange} error={geschlechtValidationFailed}\r\n                    helperText={geschlechtValidationFailed ? 'The gender must contain at least one character' : ' '} />\r\n\r\n                  <FormControl className={classes.formControl}>\r\n                            <InputLabel>Interesse an einer Lerngruppe?</InputLabel>\r\n                             <Select required error={lerngruppeValidationFailed} value={lerngruppe} onChange={this.handleChangeLerngruppe}>\r\n                                <MenuItem value='1'>Ja!</MenuItem>\r\n                                <MenuItem value='0'>Nein!</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Tageszeit präferierst du?</InputLabel>\r\n                             <Select required error={tageszeitenValidationFailed} value={tageszeiten} onChange={this.handleChangeTageszeiten}>\r\n                                <MenuItem value='1'>Morgens</MenuItem>\r\n                                <MenuItem value='2'>Mittags</MenuItem>\r\n                                <MenuItem value='3'>Abends</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Tage präferierst du?</InputLabel>\r\n                             <Select required error={tageValidationFailed} value={tage} onChange={this.handleChangeTage}>\r\n                                <MenuItem value='1'>Unter der Woche</MenuItem>\r\n                                <MenuItem value='2'>Am Wochenende</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Frequenz präferierst du?</InputLabel>\r\n                             <Select required error={frequenzValidationFailed} value={frequenz} onChange={this.handleChangeFrequenz}>\r\n                                <MenuItem value='1'>Wöchentlich</MenuItem>\r\n                                <MenuItem value='2'>Mehrmals die Woche</MenuItem>\r\n                                <MenuItem value='3'>Alle zwei Wochen</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Lernart präferierst du?</InputLabel>\r\n                             <Select required error={lernartValidationFailed} value={lernart} onChange={this.handleChangeLernart}>\r\n                                <MenuItem value='1'>Visuell</MenuItem>\r\n                                <MenuItem value='2'>Auditiv</MenuItem>\r\n                                <MenuItem value='3'>Motorisch</MenuItem>\r\n                                <MenuItem value='4'>Kommunikativ</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Gruppengroesse präferierst du?</InputLabel>\r\n                             <Select required error={gruppengroesseValidationFailed} value={gruppengroesse} onChange={this.handleChangeGruppengroesse}>\r\n                                <MenuItem value='1'>Bis zu 3 Personen</MenuItem>\r\n                                <MenuItem value='2'>3-5 Personen</MenuItem>\r\n                                <MenuItem value='3'>Über 5 Personen</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welchen Lernort präferierst du?</InputLabel>\r\n                             <Select required error={lernortValidationFailed} value={lernort} onChange={this.handleChangeLernort}>\r\n                                <MenuItem value='1'>Remote</MenuItem>\r\n                                <MenuItem value='2'>Hochschule</MenuItem>\r\n                                <MenuItem value='3'>Bibliothek</MenuItem>\r\n                                <MenuItem value='4'>Cafe</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n                   <FormControl className={classes.formControl}>\r\n                            <InputLabel>Welche Lernfaecher präferierst du?</InputLabel>\r\n                             <Select required error={lernfaecherValidationFailed} value={lernfaecher} onChange={this.handleChangeLernfaecher}>\r\n                                <MenuItem value='1'>Software Entwicklung</MenuItem>\r\n                                <MenuItem value='2'>Data Science</MenuItem>\r\n                                <MenuItem value='3'>Führungsorientiertes Rechnungswesen</MenuItem>\r\n                                <MenuItem value='4'>Medienrecht</MenuItem>\r\n                                <MenuItem value='5'>Crossmedia-Konzeption</MenuItem>\r\n                                <MenuItem value='6'>Web-Technologie</MenuItem>\r\n                                <MenuItem value='7'>Datenbanken</MenuItem>\r\n                                <MenuItem value='8'>IT-Security</MenuItem>\r\n                            </Select>\r\n                   </FormControl>\r\n\r\n\r\n\r\n                </form>\r\n                <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n                {\r\n\r\n                  <ContextErrorMessage error={updatingError}\r\n                      contextErrorMsg={`Dein Profil konnte nicht bearbeitet werden :/`}\r\n                      onReload={this.updatenPerson} />\r\n\r\n                }\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={this.handleClose} color='secondary'>\r\n                            Abbrechen\r\n                </Button>\r\n                {\r\n                    <Button disabled={nameValidationFailed || vornameValidationFailed || semesterValidationFailed || studiengangValidationFailed || alterValidationFailed || geschlechtValidationFailed || lerngruppeValidationFailed } variant='contained'\r\n                          onClick={this.updatenPerson} color='primary'>\r\n                          Änderungen abschließen\r\n                    </Button>\r\n                }\r\n              </DialogActions>\r\n            </Dialog>\r\n            : null\r\n        );\r\n      }\r\n\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n\troot: {\r\n\t\tmargin: theme.spacing(2)\r\n\t}\r\n});\r\n\r\n/** PropTypes */\r\nMeinProfilForm.propTypes = {\r\n\t/** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n\t/**\r\n\t * Handler function, which is called if the user wants to sign in.\r\n\t */\r\n\r\n\tonSignIn: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(MeinProfilForm);","C:\\GitHub\\SoPra-LernpartnerApp\\frontend\\src\\api\\LernfachBO.js",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"232","severity":1,"message":"236","line":13,"column":8,"nodeType":"234","messageId":"235","endLine":13,"endColumn":25},{"ruleId":"232","severity":1,"message":"237","line":18,"column":8,"nodeType":"234","messageId":"235","endLine":18,"endColumn":23},{"ruleId":"232","severity":1,"message":"238","line":19,"column":8,"nodeType":"234","messageId":"235","endLine":19,"endColumn":14},{"ruleId":"232","severity":1,"message":"239","line":3,"column":34,"nodeType":"234","messageId":"235","endLine":3,"endColumn":48},{"ruleId":"232","severity":1,"message":"240","line":3,"column":50,"nodeType":"234","messageId":"235","endLine":3,"endColumn":55},{"ruleId":"232","severity":1,"message":"241","line":3,"column":57,"nodeType":"234","messageId":"235","endLine":3,"endColumn":66},{"ruleId":"232","severity":1,"message":"242","line":3,"column":68,"nodeType":"234","messageId":"235","endLine":3,"endColumn":77},{"ruleId":"232","severity":1,"message":"243","line":3,"column":79,"nodeType":"234","messageId":"235","endLine":3,"endColumn":84},{"ruleId":"232","severity":1,"message":"244","line":3,"column":86,"nodeType":"234","messageId":"235","endLine":3,"endColumn":94},{"ruleId":"232","severity":1,"message":"245","line":3,"column":96,"nodeType":"234","messageId":"235","endLine":3,"endColumn":105},{"ruleId":"232","severity":1,"message":"246","line":3,"column":107,"nodeType":"234","messageId":"235","endLine":3,"endColumn":111},{"ruleId":"232","severity":1,"message":"247","line":3,"column":113,"nodeType":"234","messageId":"235","endLine":3,"endColumn":117},{"ruleId":"232","severity":1,"message":"248","line":9,"column":8,"nodeType":"234","messageId":"235","endLine":9,"endColumn":27},{"ruleId":"232","severity":1,"message":"249","line":10,"column":8,"nodeType":"234","messageId":"235","endLine":10,"endColumn":23},{"ruleId":"232","severity":1,"message":"250","line":213,"column":33,"nodeType":"234","messageId":"235","endLine":213,"endColumn":39},{"ruleId":"232","severity":1,"message":"251","line":213,"column":41,"nodeType":"234","messageId":"235","endLine":213,"endColumn":53},{"ruleId":"232","severity":1,"message":"252","line":213,"column":149,"nodeType":"234","messageId":"235","endLine":213,"endColumn":157},{"ruleId":"232","severity":1,"message":"253","line":213,"column":159,"nodeType":"234","messageId":"235","endLine":213,"endColumn":180},{"ruleId":"232","severity":1,"message":"254","line":213,"column":263,"nodeType":"234","messageId":"235","endLine":213,"endColumn":280},{"ruleId":"232","severity":1,"message":"255","line":213,"column":282,"nodeType":"234","messageId":"235","endLine":213,"endColumn":287},{"ruleId":"232","severity":1,"message":"256","line":4,"column":22,"nodeType":"234","messageId":"235","endLine":4,"endColumn":28},{"ruleId":"232","severity":1,"message":"257","line":4,"column":30,"nodeType":"234","messageId":"235","endLine":4,"endColumn":39},{"ruleId":"232","severity":1,"message":"258","line":4,"column":41,"nodeType":"234","messageId":"235","endLine":4,"endColumn":55},{"ruleId":"232","severity":1,"message":"259","line":4,"column":57,"nodeType":"234","messageId":"235","endLine":4,"endColumn":67},{"ruleId":"232","severity":1,"message":"243","line":16,"column":8,"nodeType":"234","messageId":"235","endLine":16,"endColumn":13},{"ruleId":"232","severity":1,"message":"260","line":116,"column":30,"nodeType":"234","messageId":"235","endLine":116,"endColumn":38},{"ruleId":"228","replacedBy":"261"},{"ruleId":"230","replacedBy":"262"},{"ruleId":"232","severity":1,"message":"263","line":3,"column":22,"nodeType":"234","messageId":"235","endLine":3,"endColumn":32},{"ruleId":"232","severity":1,"message":"256","line":3,"column":34,"nodeType":"234","messageId":"235","endLine":3,"endColumn":40},{"ruleId":"232","severity":1,"message":"239","line":3,"column":42,"nodeType":"234","messageId":"235","endLine":3,"endColumn":56},{"ruleId":"232","severity":1,"message":"240","line":3,"column":58,"nodeType":"234","messageId":"235","endLine":3,"endColumn":63},{"ruleId":"232","severity":1,"message":"241","line":3,"column":65,"nodeType":"234","messageId":"235","endLine":3,"endColumn":74},{"ruleId":"232","severity":1,"message":"242","line":3,"column":76,"nodeType":"234","messageId":"235","endLine":3,"endColumn":85},{"ruleId":"232","severity":1,"message":"243","line":3,"column":87,"nodeType":"234","messageId":"235","endLine":3,"endColumn":92},{"ruleId":"232","severity":1,"message":"244","line":3,"column":94,"nodeType":"234","messageId":"235","endLine":3,"endColumn":102},{"ruleId":"232","severity":1,"message":"245","line":3,"column":104,"nodeType":"234","messageId":"235","endLine":3,"endColumn":113},{"ruleId":"232","severity":1,"message":"246","line":3,"column":115,"nodeType":"234","messageId":"235","endLine":3,"endColumn":119},{"ruleId":"232","severity":1,"message":"247","line":3,"column":121,"nodeType":"234","messageId":"235","endLine":3,"endColumn":125},{"ruleId":"232","severity":1,"message":"264","line":4,"column":10,"nodeType":"234","messageId":"235","endLine":4,"endColumn":20},{"ruleId":"232","severity":1,"message":"248","line":6,"column":8,"nodeType":"234","messageId":"235","endLine":6,"endColumn":27},{"ruleId":"232","severity":1,"message":"249","line":7,"column":8,"nodeType":"234","messageId":"235","endLine":7,"endColumn":23},{"ruleId":"265","severity":1,"message":"266","line":27,"column":13,"nodeType":"267","messageId":"268","endLine":27,"endColumn":19},{"ruleId":"232","severity":1,"message":"269","line":150,"column":22,"nodeType":"234","messageId":"235","endLine":150,"endColumn":26},{"ruleId":"232","severity":1,"message":"250","line":152,"column":19,"nodeType":"234","messageId":"235","endLine":152,"endColumn":25},{"ruleId":"232","severity":1,"message":"270","line":152,"column":27,"nodeType":"234","messageId":"235","endLine":152,"endColumn":40},{"ruleId":"232","severity":1,"message":"271","line":152,"column":89,"nodeType":"234","messageId":"235","endLine":152,"endColumn":103},{"ruleId":"232","severity":1,"message":"253","line":152,"column":113,"nodeType":"234","messageId":"235","endLine":152,"endColumn":134},{"ruleId":"232","severity":1,"message":"254","line":152,"column":136,"nodeType":"234","messageId":"235","endLine":152,"endColumn":153},{"ruleId":"232","severity":1,"message":"255","line":152,"column":155,"nodeType":"234","messageId":"235","endLine":152,"endColumn":160},{"ruleId":"232","severity":1,"message":"246","line":2,"column":41,"nodeType":"234","messageId":"235","endLine":2,"endColumn":45},{"ruleId":"272","severity":1,"message":"273","line":587,"column":9,"nodeType":"274","messageId":"268","endLine":594,"endColumn":10},{"ruleId":"232","severity":1,"message":"275","line":3,"column":123,"nodeType":"234","messageId":"235","endLine":3,"endColumn":127},{"ruleId":"232","severity":1,"message":"276","line":168,"column":32,"nodeType":"234","messageId":"235","endLine":168,"endColumn":45},{"ruleId":"232","severity":1,"message":"277","line":6,"column":8,"nodeType":"234","messageId":"235","endLine":6,"endColumn":25},{"ruleId":"232","severity":1,"message":"264","line":5,"column":10,"nodeType":"234","messageId":"235","endLine":5,"endColumn":20},{"ruleId":"232","severity":1,"message":"278","line":6,"column":10,"nodeType":"234","messageId":"235","endLine":6,"endColumn":20},{"ruleId":"232","severity":1,"message":"279","line":7,"column":18,"nodeType":"234","messageId":"235","endLine":7,"endColumn":29},{"ruleId":"232","severity":1,"message":"248","line":13,"column":8,"nodeType":"234","messageId":"235","endLine":13,"endColumn":27},{"ruleId":"232","severity":1,"message":"249","line":14,"column":8,"nodeType":"234","messageId":"235","endLine":14,"endColumn":23},{"ruleId":"232","severity":1,"message":"280","line":99,"column":19,"nodeType":"234","messageId":"235","endLine":99,"endColumn":26},{"ruleId":"232","severity":1,"message":"281","line":100,"column":31,"nodeType":"234","messageId":"235","endLine":100,"endColumn":41},{"ruleId":"232","severity":1,"message":"282","line":100,"column":43,"nodeType":"234","messageId":"235","endLine":100,"endColumn":51},{"ruleId":"232","severity":1,"message":"283","line":100,"column":70,"nodeType":"234","messageId":"235","endLine":100,"endColumn":80},{"ruleId":"284","severity":1,"message":"285","line":5,"column":2,"nodeType":"274","messageId":"286","endLine":8,"endColumn":6},{"ruleId":"232","severity":1,"message":"287","line":53,"column":39,"nodeType":"234","messageId":"235","endLine":53,"endColumn":51},{"ruleId":"232","severity":1,"message":"288","line":5,"column":8,"nodeType":"234","messageId":"235","endLine":5,"endColumn":22},{"ruleId":"232","severity":1,"message":"289","line":8,"column":8,"nodeType":"234","messageId":"235","endLine":8,"endColumn":20},{"ruleId":"232","severity":1,"message":"276","line":73,"column":22,"nodeType":"234","messageId":"235","endLine":73,"endColumn":35},{"ruleId":"232","severity":1,"message":"275","line":3,"column":123,"nodeType":"234","messageId":"235","endLine":3,"endColumn":127},{"ruleId":"232","severity":1,"message":"264","line":11,"column":10,"nodeType":"234","messageId":"235","endLine":11,"endColumn":20},{"ruleId":"232","severity":1,"message":"276","line":261,"column":32,"nodeType":"234","messageId":"235","endLine":261,"endColumn":45},{"ruleId":"232","severity":1,"message":"270","line":261,"column":47,"nodeType":"234","messageId":"235","endLine":261,"endColumn":60},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'RegistrierungForm' is defined but never used.","'LernfaecherForm' is defined but never used.","'Profil' is defined but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableCell' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'TableBody' is defined but never used.","'Link' is defined but never used.","'Grid' is defined but never used.","'ContextErrorMessage' is defined but never used.","'LoadingProgress' is defined but never used.","'profil' is assigned a value but never used.","'personProfil' is assigned a value but never used.","'lernfach' is assigned a value but never used.","'personLernvorliebenID' is assigned a value but never used.","'loadingInProgress' is assigned a value but never used.","'error' is assigned a value but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'personID' is assigned a value but never used.",["290"],["291"],"'Typography' is defined but never used.","'withRouter' is defined but never used.","no-dupe-keys","Duplicate key 'gruppe'.","ObjectExpression","unexpected","'show' is assigned a value but never used.","'lernvorlieben' is assigned a value but never used.","'gruppengroesse' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getNachrichten'.","MethodDefinition","'Card' is defined but never used.","'currentPerson' is assigned a value but never used.","'KonversationListe' is defined but never used.","'withStyles' is defined but never used.","'ButtonGroup' is defined but never used.","'classes' is assigned a value but never used.","'gruppeName' is assigned a value but never used.","'profilID' is assigned a value but never used.","'showProfil' is assigned a value but never used.","no-useless-constructor","Useless constructor.","noUselessConstructor","'lerngruppeID' is assigned a value but never used.","'FormHelperText' is defined but never used.","'NativeSelect' is defined but never used.","no-global-assign","no-unsafe-negation"]